<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-6298089572270107210</id><updated>2014-07-31T11:33:51.352-04:00</updated><title type='text'>Going Go Programming</title><subtitle type='html'>Golang For The Common Man : https://github.com/goinggo</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://www.goinggo.net/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default?start-index=26&amp;max-results=25'/><author><name>William Kennedy</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>59</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-3332669871159299206</id><published>2014-06-27T19:31:00.000-04:00</published><updated>2014-06-27T22:04:31.060-04:00</updated><title type='text'>Ice Cream Makers and Data Races Part II</title><content type='html'>&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;br /&gt;Dave Cheney published a post called &lt;a href=&quot;http://dave.cheney.net/2014/06/27/ice-cream-makers-and-data-races&quot; target=&quot;_blank&quot;&gt;Ice Cream Makers and Data Races&lt;/a&gt;. The post showed an example of an interesting data race that can occur when using an interface typed variable to make a method call. If you have not read the post yet please do. Once you read the post you will discover that the problem lies with the fact that an interface value is implemented internally using a two word header and that the Go memory model states only writes to a single word are atomic.&lt;br /&gt;&lt;br /&gt;The program in the post shows a race condition that allows two goroutines to perform a read and write operation at the same time against an interface value. Not synchronizing this read and write allows the read to observe a partial write to the interface value. This allows the method implementation for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; type to operate against a value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type and visa versa.&lt;br /&gt;&lt;br /&gt;In Dave&#39;s example, the layout of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; structs were identical in memory, so they were in some sense compatible. Dave suggested the chaos that would occur if they had different memory representations. This is because each implementation of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; method assumes the code is operating against values of the receiver type. When this bug surfaces, this is no longer the case. To give you a visual view of this suggested chaos, I am going to change the declaration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type in two different ways. Both changes will give you some better insight into the interworking of interface types and memory.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;First Code Change&lt;/span&gt;&lt;br /&gt;Let&#39;s review the code and see the first set of changes. My changes to the original code are in bold:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;01 package main&lt;br /&gt;02&lt;br /&gt;03 import &quot;fmt&quot;&lt;br /&gt;04&lt;br /&gt;05 type IceCreamMaker interface {&lt;br /&gt;06 &amp;nbsp; &amp;nbsp;// Great a customer.&lt;br /&gt;07 &amp;nbsp; &amp;nbsp;Hello()&lt;br /&gt;08 }&lt;br /&gt;09&lt;br /&gt;10 type Ben struct {&lt;br /&gt;11 &amp;nbsp; &amp;nbsp;name string&lt;br /&gt;12 }&lt;br /&gt;13&lt;br /&gt;&lt;b&gt;14 func (b *Ben) Hello() {&lt;/b&gt;&lt;br /&gt;&lt;b&gt;15 &amp;nbsp; &amp;nbsp;if b.name != &quot;Ben&quot; {&lt;/b&gt;&lt;br /&gt;&lt;b&gt;16 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Ben says, \&quot;Hello my name is %s\&quot;\n&quot;, b.name)&lt;/b&gt;&lt;br /&gt;&lt;b&gt;17 &amp;nbsp; &amp;nbsp;}&lt;/b&gt;&lt;br /&gt;&lt;b&gt;18 }&lt;/b&gt;&lt;br /&gt;19&lt;br /&gt;&lt;b&gt;20 type Jerry struct {&lt;/b&gt;&lt;br /&gt;&lt;b&gt;21 &amp;nbsp; &amp;nbsp;field1 *[5]byte&lt;/b&gt;&lt;br /&gt;&lt;b&gt;22 &amp;nbsp; &amp;nbsp;field2 int&lt;/b&gt;&lt;br /&gt;&lt;b&gt;23 }&lt;/b&gt;&lt;br /&gt;24&lt;br /&gt;&lt;b&gt;25 func (j *Jerry) Hello() {&lt;/b&gt;&lt;br /&gt;&lt;b&gt;26 &amp;nbsp; &amp;nbsp;name := string((*j.field1)[:])&lt;/b&gt;&lt;br /&gt;&lt;b&gt;27 &amp;nbsp; &amp;nbsp;if name != &quot;Jerry&quot; {&lt;/b&gt;&lt;br /&gt;&lt;b&gt;28 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Jerry says, \&quot;Hello my name is %s\&quot;\n&quot;, name)&lt;/b&gt;&lt;br /&gt;&lt;b&gt;29 &amp;nbsp; &amp;nbsp;}&lt;/b&gt;&lt;br /&gt;&lt;b&gt;30 }&lt;/b&gt;&lt;br /&gt;31&lt;br /&gt;32 func main() {&lt;br /&gt;33 &amp;nbsp; &amp;nbsp;var ben = &amp;amp;Ben{&quot;Ben&quot;}&lt;br /&gt;&lt;b&gt;34&lt;/b&gt; &amp;nbsp; &amp;nbsp;&lt;b&gt;var jerry = &amp;amp;Jerry{&amp;amp;[5]byte{&#39;J&#39;, &#39;e&#39;, &#39;r&#39;, &#39;r&#39;, &#39;y&#39;}, 5}&lt;/b&gt;&lt;br /&gt;35 &amp;nbsp; &amp;nbsp;var maker IceCreamMaker = ben&lt;br /&gt;36&lt;br /&gt;37 &amp;nbsp; &amp;nbsp;var loop0, loop1 func()&lt;br /&gt;38&lt;br /&gt;39 &amp;nbsp; &amp;nbsp;loop0 = func() {&lt;br /&gt;40 &amp;nbsp; &amp;nbsp;maker = ben&lt;br /&gt;41 &amp;nbsp; &amp;nbsp;go loop1()&lt;br /&gt;42 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;43&lt;br /&gt;44 &amp;nbsp; &amp;nbsp;loop1 = func() {&lt;br /&gt;45 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;maker = jerry&lt;br /&gt;46 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;go loop0()&lt;br /&gt;47 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;48&lt;br /&gt;49 &amp;nbsp; &amp;nbsp;go loop0()&lt;br /&gt;50&lt;br /&gt;51 &amp;nbsp; &amp;nbsp;for {&lt;br /&gt;52 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;maker.Hello()&lt;br /&gt;53 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;54 } &lt;/div&gt;&lt;br /&gt;In the implementation of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; method for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; type on lines 14 through 18, I changed the code to only display the message when the name is not Ben. This is a simple change so we don&#39;t have to go through the results looking for when the bug surfaces.&lt;br /&gt;&lt;br /&gt;Then on lines 20 through 23, I completely changed out the declaration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type. The declaration is now a manual representation of a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;string&lt;/span&gt;. A &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;string&lt;/span&gt; in Go consists of a header with two words. The first word is a pointer to an array of bytes and the second word is the length of the string. This is similar to a slice but without the third word in the header for the capacity. The declarations of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; structs represent the same memory layout though declared very differently.&lt;br /&gt;&lt;br /&gt;The idea of changing the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type in this fashion is to show how serious this data race condition Dave created is. When the implementation of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt;&amp;nbsp;method for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; type is called, the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Printf&lt;/span&gt; function is going to print the characters for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;name&lt;/span&gt; field. When the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; implementation for type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt;&amp;nbsp;is called using a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt;, the memory associated with the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;name&lt;/span&gt; field could be anything. In this case we are guaranteeing that there is a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;string&lt;/span&gt;&amp;nbsp;representation so the code does not stack trace, but doing this by unusual means.&lt;br /&gt;&lt;br /&gt;One lines 25 through 30, I changed the implementation of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; method for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type. I convert the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;byte&lt;/span&gt; array to a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;string&lt;/span&gt; and use the new &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;name&lt;/span&gt; variable to check and display the value. Since the declaration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;name&lt;/span&gt; field in the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; type is equivalent to the declaration of the two fields declared in the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type, everything will print out appropriately.&lt;br /&gt;&lt;br /&gt;Finally on line 34, I create and initialize the variable of type Jerry, setting the bytes and length. Then the rest of the code remains as is.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Running The Program&lt;/span&gt;&lt;br /&gt;When we run this new version of the program the output does not change at all:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Jerry says, &quot;Hello my name is Ben&quot;&lt;br /&gt;Ben says, &quot;Hello my name is Jerry&quot;&lt;br /&gt;Ben says, &quot;Hello my name is Jerry&quot;&lt;br /&gt;Jerry says, &quot;Hello my name is Ben&quot;&lt;br /&gt;Ben says, &quot;Hello my name is Jerry&quot;&lt;/div&gt;&lt;br /&gt;Even though the declaration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; types are different, the memory layouts are the same and the program runs as designed:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type Ben struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp;name string&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;type Jerry struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp;field1 *[5]byte&lt;br /&gt;&amp;nbsp; &amp;nbsp;field2 int&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fmt.Printf(&quot;Ben says, \&quot;Hello my name is %s\&quot;\n&quot;, b.name)&lt;br /&gt;&lt;br /&gt;name := string((*j.field1)[:])&lt;br /&gt;fmt.Printf(&quot;Jerry says, \&quot;Hello my name is %s\&quot;\n&quot;, name)&lt;/div&gt;&lt;br /&gt;In the case of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Printf&lt;/span&gt; function call for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; type implementation of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; method, the code thinks the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;b&lt;/span&gt; pointer is pointing to a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; when it is not. However, since the memory layout is the same between the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; types, the call to the&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Printf&lt;/span&gt;&amp;nbsp;function still works.&amp;nbsp;The same is true for the implementation of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; method for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type. The values of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;field1&lt;/span&gt;&amp;nbsp;and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;field2&lt;/span&gt; are equivalent to declaring a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;string&lt;/span&gt; field so everything works.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Crashing The Program&lt;/span&gt;&lt;br /&gt;Let&#39;s change the code one more time. This time we will make the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type incompatible with the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; type:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;01 package main&lt;br /&gt;02&lt;br /&gt;03 import &quot;fmt&quot;&lt;br /&gt;04&lt;br /&gt;05 type IceCreamMaker interface {&lt;br /&gt;06 &amp;nbsp; &amp;nbsp;// Great a customer.&lt;br /&gt;07 &amp;nbsp; &amp;nbsp;Hello()&lt;br /&gt;08 }&lt;br /&gt;09&lt;br /&gt;10 type Ben struct {&lt;br /&gt;11 &amp;nbsp; &amp;nbsp;name string&lt;br /&gt;12 }&lt;br /&gt;13&lt;br /&gt;14 func (b *Ben) Hello() {&lt;br /&gt;15 &amp;nbsp; &amp;nbsp;if b.name != &quot;Ben&quot; {&lt;br /&gt;16 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Ben says, \&quot;Hello my name is %s\&quot;\n&quot;, b.name)&lt;br /&gt;17 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;18 }&lt;br /&gt;19&lt;br /&gt;&lt;b&gt;20 type Jerry struct {&lt;/b&gt;&lt;br /&gt;&lt;b&gt;21 &amp;nbsp; &amp;nbsp;field2 int&lt;/b&gt;&lt;br /&gt;&lt;b&gt;22 &amp;nbsp; &amp;nbsp;field1 *[5]byte&lt;/b&gt;&lt;br /&gt;&lt;b&gt;23 }&lt;/b&gt;&lt;br /&gt;24&lt;br /&gt;25 func (j *Jerry) Hello() {&lt;br /&gt;26 &amp;nbsp; &amp;nbsp;name := string((*j.field1)[:])&lt;br /&gt;27 &amp;nbsp; &amp;nbsp;if name != &quot;Jerry&quot; {&lt;br /&gt;28 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Jerry says, \&quot;Hello my name is %s\&quot;\n&quot;, name)&lt;br /&gt;29 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;30 }&lt;br /&gt;31&lt;br /&gt;32 func main() {&lt;br /&gt;33 &amp;nbsp; &amp;nbsp;var ben = &amp;amp;Ben{&quot;Ben&quot;}&lt;br /&gt;&lt;b&gt;34&lt;/b&gt; &amp;nbsp; &amp;nbsp;&lt;b&gt;var jerry = &amp;amp;Jerry{5,&amp;nbsp;&lt;/b&gt;&lt;b&gt;&amp;amp;[5]byte{&#39;J&#39;, &#39;e&#39;, &#39;r&#39;, &#39;r&#39;, &#39;y&#39;}&lt;/b&gt;&lt;b&gt;}&lt;/b&gt;&lt;br /&gt;35 &amp;nbsp; &amp;nbsp;var maker IceCreamMaker = ben&lt;br /&gt;36&lt;br /&gt;37 &amp;nbsp; &amp;nbsp;var loop0, loop1 func()&lt;br /&gt;38&lt;br /&gt;39 &amp;nbsp; &amp;nbsp;loop0 = func() {&lt;br /&gt;40 &amp;nbsp; &amp;nbsp;maker = ben&lt;br /&gt;41 &amp;nbsp; &amp;nbsp;go loop1()&lt;br /&gt;42 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;43&lt;br /&gt;44 &amp;nbsp; &amp;nbsp;loop1 = func() {&lt;br /&gt;45 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;maker = jerry&lt;br /&gt;46 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;go loop0()&lt;br /&gt;47 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;48&lt;br /&gt;&lt;b&gt;49 &amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Ben: %p  Jerry: %p\n&quot;, ben, jerry)&lt;/b&gt;&lt;br /&gt;50&lt;br /&gt;51 &amp;nbsp; &amp;nbsp;go loop0()&lt;br /&gt;52&lt;br /&gt;53 &amp;nbsp; &amp;nbsp;for {&lt;br /&gt;54 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;maker.Hello()&lt;br /&gt;55 &amp;nbsp; &amp;nbsp;}&lt;br /&gt;56 } &lt;/div&gt;&lt;br /&gt;Now the declaration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; type between lines 20 through 23 switches the order of the two field members. The integer value now comes before the byte array pointer. When we run this version of the program we get a stack trace:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;Ben: 0x20817a170  Jerry: 0x20817a180&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;01 panic: runtime error: invalid memory address or nil pointer dereference&lt;br /&gt;02 [signal 0xb code=0x1 addr=0x5 pc=0x294f6]&lt;br /&gt;03&lt;br /&gt;04 goroutine 16 [running]:&lt;br /&gt;05 runtime.panic(0xb90e0, 0x144144)&lt;br /&gt;06 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/runtime/panic.c:279 +0xf5&lt;br /&gt;07 fmt.(*fmt).padString(0x2081b42d0, 0x5, 0x20817a190)&lt;br /&gt;08 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/fmt/format.go:130 +0x390&lt;br /&gt;09 fmt.(*fmt).fmt_s(0x2081b42d0, 0x5, 0x20817a190)&lt;br /&gt;10 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/fmt/format.go:285 +0x67&lt;br /&gt;11 fmt.(*pp).fmtString(0x2081b4270, 0x5, 0x20817a190, 0x73)&lt;br /&gt;12 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/fmt/print.go:511 +0xe0&lt;br /&gt;13 fmt.(*pp).printArg(0x2081b4270, 0x97760, 0x20817a210, 0x73, 0x0, 0x0)&lt;br /&gt;14 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/fmt/print.go:780 +0xbb8&lt;br /&gt;15 fmt.(*pp).doPrintf(0x2081b4270, 0xddfd0, 0x20, 0x220832de40, 0x1, 0x1)&lt;br /&gt;16 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/fmt/print.go:1159 +0x1ecc&lt;br /&gt;17 fmt.Fprintf(0x220818c340, 0x2081c2008, 0xddfd0, 0x20, 0x220832de40, 0x1, 0x1, 0x10, 0x0, 0x0)&lt;br /&gt;18 &amp;nbsp; &amp;nbsp; /Users/bill/go/src/pkg/fmt/print.go:188 +0x7f&lt;br /&gt;19 fmt.Printf(0xddfd0, 0x20, 0x220832de40, 0x1, 0x1, 0x5, 0x0, 0x0)&lt;br /&gt;20 &amp;nbsp; &amp;nbsp;/Users/bill/go/src/pkg/fmt/print.go:197 +0xa2&lt;br /&gt;&lt;b&gt;21 main.(*Ben).Hello(0x20817a180)&lt;/b&gt;&lt;br /&gt;22 &amp;nbsp; &amp;nbsp;/Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/temp/main.go:16 +0x118&lt;br /&gt;23 main.main()&lt;br /&gt;24 &amp;nbsp; &amp;nbsp;/Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/temp/main.go:54 +0x2c3&lt;/div&gt;&lt;br /&gt;If we look at line 21 of the stack trace we will see how the method call to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Hello&lt;/span&gt; is using the implementation for type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; but being passed the address of the value for type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt;. Just before the stack trace I display the addresses of each value to make this clear. If we look at the declaration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Ben&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt; types one more time we can see how they are no longer compatible:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type Ben struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp;name string&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;type Jerry struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp;field2 int&lt;br /&gt;&amp;nbsp; &amp;nbsp;field1 *[5]byte&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;Since this new declaration for type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Jerry&lt;/span&gt;&amp;nbsp;now starts with an integer value, it is not compatible with a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;string&lt;/span&gt; type. This time when the code tries to print the value of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;b.name&lt;/span&gt; on line 16, the program stack traces.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;br /&gt;In the end, a running program manipulates memory without any safeguards from the compiler. Memory is just memory and the CPU will interpret that memory as it is told. In the crash example, thanks to the data race bug, the code asked the CPU to interpret an integer value as a string and the program crashed. So I agree with Dave, there is no such thing as a safe data race.&amp;nbsp;Your program either has no data races, or its operation is undefined.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Cherry On Top&lt;/span&gt;&lt;br /&gt;After reading both posts you might be disappointed that no ice cream was actually used in the writing of these posts. If you&#39;re bummed out now and wished you had some coupons, I found a link to signup for the Ben and Jerry&#39;s &lt;a href=&quot;http://www.benjerry.com/about-us/contact-us?selectedForm=newsletter#selectForm&quot; target=&quot;_blank&quot;&gt;newsletter&lt;/a&gt;. You can also &lt;a href=&quot;http://www.benjerry.com/&quot; target=&quot;_blank&quot;&gt;find a store&lt;/a&gt; near you.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/3332669871159299206/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/06/ice-cream-makers-and-data-races-part-ii.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/3332669871159299206'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/3332669871159299206'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/06/ice-cream-makers-and-data-races-part-ii.html' title='Ice Cream Makers and Data Races Part II'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-5031828978589342939</id><published>2014-06-25T10:20:00.000-04:00</published><updated>2014-06-25T10:27:17.518-04:00</updated><title type='text'>Actionable Data With MongoDB and Go</title><content type='html'>&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;br /&gt;If you are building any kind of application for a consumer based product, it is common to have large amounts of application data being generated about your users. Running reports is a traditional use of this data, but what if you could make this data actionable? What if you could adapt the user experience by aggregating and testing this data against rules that could dictate actions or special messaging?&lt;br /&gt;&lt;br /&gt;In this post I am going to show you a way that could be used to make your application data “actionable”. We are going to review a sample program written in Go that leverages MongoDB&#39;s aggregation pipeline to execute rules that aggregate and test data. The rule the program defines and executes determines what messaging we want to show the user based on their current set of financial transactions in the system.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;The Data&lt;/span&gt;&lt;br /&gt;We have two collections of data we will be using which are being hosted in a public &lt;a href=&quot;https://mongolab.com/welcome/&quot; target=&quot;_blank&quot;&gt;MongoLab&lt;/a&gt; database.&amp;nbsp;The first collection contains credit card transactions for users. This data represent application generated data:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Collection: demo_user_transactions&lt;br /&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;user_id&quot; : &quot;396bc782-6ac6-4183-a671-6e75ca5989a5&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;description&quot; : &quot;Chevron&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;amount&quot; : 23.76,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;date&quot; : ISODate(&quot;2014-04-20T00:00:00.000Z&quot;),&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;category&quot; : &quot;gas&quot;&lt;br /&gt;},&lt;br /&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;user_id&quot; : &quot;396bc782-6ac6-4183-a671-6e75ca5989a5&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;description&quot; : &quot;Fandango&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;amount&quot; : 15.6,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;date&quot; : ISODate(&quot;2014-04-20T00:00:00.000Z&quot;),&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;category&quot; : &quot;movies&quot;&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;The second collection contains a set of user advice which is presented to the user based on some aspect of their financial transactions. This data represents configuration data:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Collection: demo_user_advice&lt;br /&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;advice_id&quot; : 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;title&quot; : &quot;Dealing with Rising Gas Prices&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;link&quot; : &quot;www.careonecredit.com/knowledge/dealingwithrisinggasprices.aspx&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;desc&quot; : &quot;With gas prices rising, and no relief in sight, looking for...&quot;&lt;br /&gt;},&lt;br /&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;advice_id&quot; : 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;title&quot; : &quot;Ways To Stretch A Dollar&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;link&quot; : &quot;www.careonecredit.com/knowledge/ways-to-stretch-a-dollar.aspx&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;desc&quot; : &quot;Are you looking for ways to make your dollar go further?...&quot;&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;We can imagine the transaction data is changing as the system refreshes user transactions throughout the day. The advice data is configurable and can be changed by marketing or business analyst people throughout the day as well. These two collections will allow us to create rules and adapt the user experience by providing the most relevant advice for the target user.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;The Rule&lt;/span&gt;&lt;br /&gt;To make the data actionable we need to define a rule. For this sample program, a rule defines a test expression that is run through the aggregation pipeline to determine a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;true&lt;/span&gt; or &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;false&lt;/span&gt; condition which then results in an action. For this example we are going to create a rule that looks at a user’s purchasing of gasoline. Based on the amount of money the user spends, the action will be to display a piece of advice that is relevant.&lt;br /&gt;&lt;br /&gt;Let’s look at the rule we are going to run and the success and failure actions:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{&lt;br /&gt;&amp;nbsp; &quot;test&quot; : {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;collection&quot; : &quot;demo_user_transactions&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;expressions&quot; : [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;{ \&quot;$match\&quot; : { \&quot;user_id\&quot; : \&quot;#userId#\&quot;, \&quot;category\&quot; : \&quot;gas\&quot; }}&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;{ \&quot;$group\&quot; : { \&quot;_id\&quot; : { \&quot;category\&quot; : \&quot;$category\&quot; }, \&quot;amount\&quot; : { \&quot;$sum\&quot; : \&quot;$amount\&quot; }}}&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;{ \&quot;$match\&quot; : { \&quot;amount\&quot; : { \&quot;$gt\&quot; : 20.00}}}&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;br /&gt;&amp;nbsp; },&lt;br /&gt;&amp;nbsp; &quot;success&quot; : {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;collection&quot; : &quot;demo_advice&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;expressions&quot; : [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;{ \&quot;$match\&quot; : { \&quot;advice_id\&quot; : 1 }}&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;br /&gt;&amp;nbsp; },&lt;br /&gt;&amp;nbsp; &quot;failed&quot; : {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;collection&quot; : &quot;demo_advice&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;expressions&quot; : [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;{ \&quot;$match\&quot; : { \&quot;advice_id\&quot; : 2 }}&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The rule is defined as a JSON document that contains three fields each with a sub-document that contains a collection name and the set of expressions to be run through the aggregation pipeline. When the expressions for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;test&lt;/span&gt; field returns a dataset, then the application will run the expressions defined in the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;success&lt;/span&gt; field. When no dataset is returned, then the application will run the expressions in the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;failed&lt;/span&gt; field.&lt;br /&gt;&lt;br /&gt;If we look at the rule a bit closer we can see what we are testing:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{ &quot;$match&quot; : { &quot;user_id&quot; : &quot;#userId#&quot;, &quot;category&quot; : &quot;gas&quot; }}&lt;br /&gt;{ &quot;$group&quot; : { &quot;_id&quot; : { &quot;category&quot; : &quot;$category&quot; }, &quot;amount&quot; : { &quot;$sum&quot; : &quot;$amount&quot; }}}&lt;br /&gt;{ &quot;$match&quot; : { &quot;amount&quot; : { &quot;$gt&quot; : 20.00}}} &lt;/div&gt;&lt;br /&gt;The first pipeline operation uses a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;$match&lt;/span&gt; command to find all the documents from the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;demo_user_transactions&lt;/span&gt; collection for a specific user where the category is &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;gas&lt;/span&gt;. The &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;#userId#&lt;/span&gt; tag is replaced with the actual user id by the program before running the expression. Then those &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;gas&lt;/span&gt; transactions are grouped and the total amount spent on gasoline is calculated using the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;$group&lt;/span&gt; command. Finally that total spend on gasoline is tested to see if it is greater than $20. If the total spend on gasoline is greater than $20, there will be a dataset returned signifying the rule is &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;true&lt;/span&gt; else no dataset is returned and the rule is &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;false&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;The Code&lt;/span&gt;&lt;br /&gt;Now that we have a brief understanding of the data and the rule, we can examine some of the code that executes this rule against our test MongoDB database. The code is in &lt;a href=&quot;https://github.com/goinggo/mgoaction&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt; and you can use the following Go command if you have Go already installed: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;go get github.com/goinggo/mgoaction &lt;/div&gt;&lt;br /&gt;If you don&#39;t have Go installed check out these links to get started:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://golang.org/doc/install&quot; target=&quot;_blank&quot;&gt;http://golang.org/doc/install&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/06/installing-go-gocode-gdb-and-liteide.html&quot; target=&quot;_blank&quot;&gt;http://www.goinggo.net/2013/06/installing-go-gocode-gdb-and-liteide.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;To make the application dynamic and keep things simple, the rule is being kept in an individual JSON file within a project folder called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;rules&lt;/span&gt;. This allows us to change the rule without needing to change the program. Let’s examine the function that reads and decode the JSON document from within a given file into a Go struct value so the rule can be processed by the program. We have already seen the JSON document for the rule above, so here are the structs that the JSON document will be decoded into:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// operation contains a set of expressions for a collection.&lt;br /&gt;type operation struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Collection &amp;nbsp;string &amp;nbsp; `json:&quot;collection&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; Expressions []string `json:&quot;expressions&quot;`&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// rule contains a single rule with an action.&lt;br /&gt;type rule struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Test &amp;nbsp; &amp;nbsp;operation `json:&quot;rule&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; Success operation `json:&quot;success&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; Failed &amp;nbsp;operation `json:&quot;failed&quot;`&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;Support for decoding JSON documents exists within the Go standard library. Here is the function &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;retrieveRule&lt;/span&gt; that decodes the JSON document found in&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;rules/advice.json&lt;/span&gt;&amp;nbsp;into a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;rule&lt;/span&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif;&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&amp;nbsp;92 // retrieveRule reads and unmarshals the specified rule data file.&lt;br /&gt;&amp;nbsp;93 func retrieveRule(ruleName string) (*rule, error) {&lt;br /&gt;&amp;nbsp;94 &amp;nbsp; &amp;nbsp; // Open the file.&lt;br /&gt;&amp;nbsp;95 &amp;nbsp; &amp;nbsp; file, err := os.Open(&quot;rules/&quot; + ruleName + &quot;.json&quot;)&lt;br /&gt;&amp;nbsp;96 &amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp;97 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return nil, err&lt;br /&gt;&amp;nbsp;98 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp;99&lt;br /&gt;100 &amp;nbsp; &amp;nbsp; // Schedule the file to be closed once the function returns.&lt;br /&gt;101 &amp;nbsp; &amp;nbsp; defer file.Close()&lt;br /&gt;102&lt;br /&gt;103 &amp;nbsp; &amp;nbsp; // Decode the file into a value of the rule type.&lt;br /&gt;104 &amp;nbsp; &amp;nbsp; var r rule&lt;br /&gt;105 &amp;nbsp; &amp;nbsp; err = json.NewDecoder(file).Decode(&amp;amp;r)&lt;br /&gt;106&lt;br /&gt;107 &amp;nbsp; &amp;nbsp; // We don&#39;t need to check for errors, the caller can do this.&lt;br /&gt;108 &amp;nbsp; &amp;nbsp; return &amp;amp;r, err&lt;br /&gt;109 } &lt;/div&gt;&lt;br /&gt;The function is passed a rule name which is used to form the path to the rule file. On line 95 the file is opened and then on line 104 a variable named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;r&lt;/span&gt; of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;rule&lt;/span&gt; is declared. In combination with the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;json&lt;/span&gt; package&#39;s&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;NewDecoder&lt;/span&gt; function followed by the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Decode&lt;/span&gt; method on line 105, the value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;r&lt;/span&gt; variable is updated to reflect the JSON document’s data. Then the address of the variable is passed out of the function for use on line 108.&lt;br /&gt;&lt;br /&gt;Next let’s look at the rule processing function named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;processRule&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;111 // processRule processes the rule and displays the results.&lt;br /&gt;112 func processRule(session *mgo.Session, r *rule, user string) error {&lt;br /&gt;113 &amp;nbsp; &amp;nbsp; // Process the rule and check for results&lt;br /&gt;114 &amp;nbsp; &amp;nbsp; log.Println(&quot;Test:&quot;)&lt;br /&gt;115 &amp;nbsp; &amp;nbsp; results, err := executeOperation(session, r.Test, user)&lt;br /&gt;116 &amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;117 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Println(&quot;Unable To Process Action&quot;, err)&lt;br /&gt;118 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return err&lt;br /&gt;119 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;120&lt;br /&gt;121 &amp;nbsp; &amp;nbsp; if len(results) == 0 {&lt;br /&gt;122 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // If no result is returned, provide the failed result&lt;br /&gt;123 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Println(&quot;Failed:&quot;)&lt;br /&gt;124 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; _, err = executeOperation(session, r.Failed, user)&lt;br /&gt;125 &amp;nbsp; &amp;nbsp; } else {&lt;br /&gt;126 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Provide the success result&lt;br /&gt;127 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Println(&quot;Succeeded:&quot;)&lt;br /&gt;128 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; _, err = executeOperation(session, r.Success, user)&lt;br /&gt;129 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;130&lt;br /&gt;131 &amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;132 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Println(&quot;Unable To Process Action&quot;, err)&lt;br /&gt;133 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;134&lt;br /&gt;135 &amp;nbsp; &amp;nbsp; return err&lt;br /&gt;136 } &lt;/div&gt;&lt;br /&gt;This function on line 115 executes the expressions for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Test&lt;/span&gt; field using the aggregation pipeline and then on line 116 checks for errors. If there are no errors, the determination if a result was returned is tested on line 121. If there is no result, the function executes the set of expressions for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Failed&lt;/span&gt; field on line 124, else the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Success&lt;/span&gt; field expressions are executed on line 128. A test for an error value occurs one more time on line 131 for logging purposes and then the function returns.&lt;br /&gt;&lt;br /&gt;Let’s look at one more function named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;executeOperation&lt;/span&gt; to see how the expressions are actually sent to the aggregation pipeline for processing:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;138 // executeOperation builds an aggregation pipeline query based on the&lt;br /&gt;139 // configured expressions for the operation.&lt;br /&gt;140 func executeOperation(session *mgo.Session, op operation, user string) ([]bson.M, error) {&lt;br /&gt;141 &amp;nbsp; &amp;nbsp; var err error&lt;br /&gt;142 &amp;nbsp; &amp;nbsp; expressions := make([]bson.M, len(op.Expressions))&lt;br /&gt;143&lt;br /&gt;144 &amp;nbsp; &amp;nbsp; // Iterate through the set of expressions and build the slice&lt;br /&gt;145 &amp;nbsp; &amp;nbsp; // of operations.&lt;br /&gt;146 &amp;nbsp; &amp;nbsp; for index, exp := range op.Expressions {&lt;br /&gt;147 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if index := strings.Index(exp, &quot;#userId#&quot;); index &amp;gt;= 0 {&lt;br /&gt;148 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exp = strings.Replace(exp, &quot;#userId#&quot;, user, -1)&lt;br /&gt;149 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;150&lt;br /&gt;151 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Println(exp)&lt;br /&gt;152 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; expressions[index] = decodeExpression(exp)&lt;br /&gt;153 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;154&lt;br /&gt;155 &amp;nbsp; &amp;nbsp; // Capture a collection so we can execute the expressions.&lt;br /&gt;156 &amp;nbsp; &amp;nbsp; collection := session.DB(TestDatabase).C(op.Collection)&lt;br /&gt;157 &amp;nbsp; &amp;nbsp; if collection == nil {&lt;br /&gt;158 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return nil, fmt.Errorf(&quot;Collection %s does not exist&quot;, op.Collection)&lt;br /&gt;159 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;160&lt;br /&gt;161 &amp;nbsp; &amp;nbsp; // Execute the expressions against the aggregation pipeline.&lt;br /&gt;162 &amp;nbsp; &amp;nbsp; var results []bson.M&lt;br /&gt;163 &amp;nbsp; &amp;nbsp; err = collection.Pipe(expressions).All(&amp;amp;results)&lt;br /&gt;164&lt;br /&gt;165 &amp;nbsp; &amp;nbsp; // Pretty print the result.&lt;br /&gt;166 &amp;nbsp; &amp;nbsp; output, _ := json.MarshalIndent(results, &quot;&quot;, &quot;    &quot;)&lt;br /&gt;167 &amp;nbsp; &amp;nbsp; log.Println(string(output))&lt;br /&gt;168&lt;br /&gt;169 &amp;nbsp; &amp;nbsp; return results, err&lt;br /&gt;170 } &lt;/div&gt;&lt;br /&gt;On line 142 we declare a slice of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;bson.M&lt;/span&gt; named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;expressions&lt;/span&gt; to hold all the expressions we need to execute and then between lines 146 through 153 we iterate through that set of expressions. The first thing that is done in each iteration on line 147 is to check the expression for a user id tag. If the tag is found, it is replaced with the actual user id. On line 151 the expression is displayed and finally on line 152 the expression is decoded into a map of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;bson.M&lt;/span&gt; and assigned to the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;expressions&lt;/span&gt; slice.&lt;br /&gt;&lt;br /&gt;Once the slice of expressions is ready for execution, we capture a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;collection&lt;/span&gt; value from the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;session&lt;/span&gt;&amp;nbsp;value on line 156 and execute the expressions against that collection on line 163. The results from the aggregation pipeline are then returned from the function for processing, which take the form of another map of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;bson.M&lt;/span&gt;. One line 166 we create a pretty print view of the results and then display those results on line 167.&lt;br /&gt;&lt;br /&gt;Now that we have seen the code, let’s look at the results when we run the program for the data and the rule we reviewed.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;The Result&lt;/span&gt;&lt;br /&gt;When we run the program we see the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Test:&lt;br /&gt;{ &quot;$match&quot; : { &quot;user_id&quot; : &quot;396bc782-6ac6-4183-a671-6e75ca5989a5&quot;, &quot;category&quot; : &quot;gas&quot; }}&lt;br /&gt;{ &quot;$group&quot; : { &quot;_id&quot; : { &quot;category&quot; : &quot;$category&quot; }, &quot;amount&quot; : { &quot;$sum&quot; : &quot;$amount&quot; }}}&lt;br /&gt;{ &quot;$match&quot; : { &quot;amount&quot; : { &quot;$gt&quot; : 20.00}}}&lt;br /&gt;[&lt;br /&gt;&amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;_id&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;category&quot;: &quot;gas&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;amount&quot;: 23.76&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;]&lt;br /&gt;Success:&lt;br /&gt;{ &quot;$match&quot; : { &quot;advice_id&quot; : 1 }}&lt;br /&gt;[&lt;br /&gt;&amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;_id&quot;: &quot;53a70e71792ac1bbba4b016e&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;advice_id&quot;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;desc&quot;: &quot;With gas prices rising, and no relief in sight, looking for...&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;link&quot;: &quot;www.careonecredit.com/knowledge/dealingwithrisinggasprices.aspx&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;title&quot;: &quot;Dealing with Rising Gas Prices&quot;&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;] &lt;/div&gt;&lt;br /&gt;The first section of the output shows the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Test&lt;/span&gt; expressions that are executed through the aggregation pipeline with the result immediately following. The results show the total spend for the user was $23.76. Since this value is greater than $20.00, the code then proceeds to execute the Success expressions. This one expression returns the advice document for&amp;nbsp;the advice about managing transportation costs.&lt;br /&gt;&lt;br /&gt;If we change the rule so it fails we should get the other piece of advice:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Test:&lt;br /&gt;{ &quot;$match&quot; : { &quot;user_id&quot; : &quot;396bc782-6ac6-4183-a671-6e75ca5989a5&quot;, &quot;category&quot; : &quot;gas&quot; }}&lt;br /&gt;{ &quot;$group&quot; : { &quot;_id&quot; : { &quot;category&quot; : &quot;$category&quot; }, &quot;amount&quot; : { &quot;$sum&quot; : &quot;$amount&quot; }}}&lt;br /&gt;&lt;b&gt;{ &quot;$match&quot; : { &quot;amount&quot; : { &quot;$lt&quot; : 20.00}}}&lt;/b&gt;&lt;br /&gt;null&lt;br /&gt;Failed:&lt;br /&gt;{ &quot;$match&quot; : { &quot;advice_id&quot; : 2 }}&lt;br /&gt;[&lt;br /&gt;&amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;_id&quot;: &quot;53a70e8a792ac1bbba4b016f&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;advice_id&quot;: 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;desc&quot;: &quot;Are you looking for ways to make your dollar go further? ...&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;link&quot;: &quot;www.careonecredit.com/knowledge/ways-to-stretch-a-dollar.aspx&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;title&quot;: &quot;Ways To Stretch A Dollar&quot;&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;] &lt;/div&gt;&lt;br /&gt;This time we changed the rule to test for the total spend on gasoline to be less than $20.00. This change resulted in a &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;null&lt;/span&gt; dataset so the code proceeded to execute the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Failed&lt;/span&gt; expressions. This time the advice is more generalized around saving money.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;br /&gt;MongoDB with the aggregation pipeline allows you to design programs that can make your data actionable. This small Go program provides one way you can declare and process rules against data in your MongoDB collections and adapt your users experience. Using Go to drive your rules engine gives you the added benefit of high performance and concurrent processing. Together, MongoDB and Go can help you build these robust systems faster, smarter and with a ton of flexibility.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/5031828978589342939/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/06/actionable-data-with-mongodb-and-go.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/5031828978589342939'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/5031828978589342939'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/06/actionable-data-with-mongodb-and-go.html' title='Actionable Data With MongoDB and Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-699388346034030609</id><published>2014-06-20T13:10:00.001-04:00</published><updated>2014-06-21T09:17:47.278-04:00</updated><title type='text'>Pitfalls With Closures In Go</title><content type='html'>&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;br /&gt;Closures in Go are a very powerful construct but they can also be the cause of bugs if you don’t understand how they work. In this post I am going to pull a small piece of code from Chapter 2 from the &lt;a href=&quot;http://www.goinactionbook.com/&quot; target=&quot;_blank&quot;&gt;Go In Action&lt;/a&gt; book that discusses a pitfall you can run into when using closures. The full code example can be found in the &lt;a href=&quot;https://github.com/goinaction/code/tree/master/chapter2/sample&quot; target=&quot;_blank&quot;&gt;Github repository&lt;/a&gt; for the book. Chapter 2 discusses this code example in full detail.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;The Closure Pitfall&lt;/span&gt;&lt;br /&gt;First let’s look at the piece of code: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;search/search.go&lt;br /&gt;&lt;br /&gt;29 &amp;nbsp;// Launch a goroutine for each feed to find the results.&lt;br /&gt;30 &amp;nbsp;for _, feed := range feeds {&lt;br /&gt;31 &amp;nbsp; &amp;nbsp; // Retrieve a matcher for the search.&lt;br /&gt;32 &amp;nbsp; &amp;nbsp; matcher, exists := matchers[feed.Type]&lt;br /&gt;33 &amp;nbsp; &amp;nbsp; if !exists {&lt;br /&gt;34 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;matcher = matchers[&quot;default&quot;]&lt;br /&gt;35 &amp;nbsp; &amp;nbsp; }&lt;br /&gt;36&lt;br /&gt;37 &amp;nbsp; &amp;nbsp; // Launch the goroutine to perform the search.&lt;br /&gt;38 &amp;nbsp; &amp;nbsp; go func(matcher Matcher, feed *Feed) {&lt;br /&gt;39 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Match(matcher, feed, searchTerm, results)&lt;br /&gt;40 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;waitGroup.Done()&lt;br /&gt;41 &amp;nbsp; &amp;nbsp; }(matcher, feed)&lt;br /&gt;42 &amp;nbsp;} &lt;/div&gt;&lt;br /&gt;This code sample starts out on line 30 iterating over a slice of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Feed&lt;/span&gt; values. The value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variable declared within the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;for range&lt;/span&gt; loop is changing with each iteration. Then on line 32 the code is checking a map for a value that matches the specified key for the value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed.Type&lt;/span&gt; field. If the key does not exist, a default value for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; variable is then assigned. Just like the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variable, the value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; variable also changes with each iteration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;for range&lt;/span&gt; loop.&lt;br /&gt;&lt;br /&gt;Now we can jump to lines 38 through 41 which still exist within the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;for range&lt;/span&gt; loop.  Here we are declaring an anonymous function and launching that function as a goroutine. The anonymous function is being declared to accept two parameters. The first parameter is a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Matcher&lt;/span&gt; and the second parameter is a pointer to a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Feed&lt;/span&gt;. On line 41 we can see the value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variables being passed into the anonymous function.&lt;br /&gt;&lt;br /&gt;The implementation of the anonymous function on line 39 is where things get interesting. Here we see a call to a function named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Match&lt;/span&gt;. This function accepts four parameters and if you look closely at the function call, you will notice the first two parameters are the variables we declared as the function parameters. The last two parameters however were not declared within the scope of the anonymous function. Here we are seeing two variables being used by the anonymous function via closures.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;search/search.go&lt;br /&gt;&lt;br /&gt;37 &amp;nbsp; &amp;nbsp; // Launch the goroutine to perform the search.&lt;br /&gt;38 &amp;nbsp; &amp;nbsp; go func(matcher Matcher, feed *Feed) {&lt;br /&gt;39 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Match(matcher, feed, searchTerm, results)&lt;br /&gt;40 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;waitGroup.Done()&lt;br /&gt;41 &amp;nbsp; &amp;nbsp; }(matcher, feed)&lt;br /&gt;42 &amp;nbsp;} &lt;/div&gt;&lt;br /&gt;The &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;searchTerm&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;results&lt;/span&gt; variables are declared within the scope of the outer function yet we are able to use them within the scope of the anonymous function without the need to pass them in as parameters. A question this raises is why are we passing in the values of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variables as parameters but using closures for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;searchTerm&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;results&lt;/span&gt; variables?&lt;br /&gt;&lt;br /&gt;I pointed out in the beginning how the values of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variables were changing with every iteration of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;for range&lt;/span&gt; loop. The values of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;searchTerm&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;results&lt;/span&gt; variable are not changing with each iteration. Their values remain constant throughout the lifetime of each goroutine that is launched based on the declaration of the anonymous function. What does this have to do with anything?&lt;br /&gt;&lt;br /&gt;When we use a variable in an anonymous function via closures, we are not passing the value of the variable at the time the anonymous function is declared. We are sharing the actual variable which means changes to that variable’s value will be reflected within the scope of the anonymous function and in our case the running goroutine. If we were to share the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variables via closures with the anonymous function and not pass the value of these variables into the function, most of the goroutines would be processing the very last value in the slice.&lt;br /&gt;&lt;br /&gt;In this program all of the goroutines will be running concurrently and not in parallel. By the time the first or even second goroutine is given time to run, the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;for range&lt;/span&gt; loop will be complete and the value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variables will contain values for the last iteration of the loop. This mean the majority if not all of the goroutines will be processing the same values for these variables. This is ok for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;searchTerm&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;results&lt;/span&gt; variables since they do not change.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;br /&gt;Luckily we can declare anonymous functions that accept parameters and these types of closure problems can be avoided. In our example above, when each anonymous function is declared within the scope of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;for range&lt;/span&gt; loop, the values of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;matcher&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;feed&lt;/span&gt; variables are locked in by passing them as parameters. The code remains clean and readable by leveraging closures for the remaining variables the anonymous function requires. Before using closures to share a variable with an anonymous function, ask yourself if the value of that variable will be changing and how that affects the function when it is called to run. &lt;br /&gt;&lt;br /&gt;To learn more details about this piece of code and the entire code sample, please take the time to download and read the Go In Action book. Chapter 2 is available for &lt;a href=&quot;http://www.manning.com/ketelsen/?a_aid=goinaction&quot; target=&quot;_blank&quot;&gt;download here&lt;/a&gt;.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/699388346034030609/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/06/pitfalls-with-closures-in-go.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/699388346034030609'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/699388346034030609'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/06/pitfalls-with-closures-in-go.html' title='Pitfalls With Closures In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-183613223728302854</id><published>2014-05-03T19:50:00.000-04:00</published><updated>2014-05-03T20:14:26.053-04:00</updated><title type='text'>Methods, Interfaces and Embedded Types in Go</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;My business partner Ed asked me what would happen if a struct and an embedded field both implemented the same interface. We asked ourselves two questions:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;Would the compiler throw an error because we now had two implementations of the interface?&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;If the compiler accepted the type declaration, how does the compiler determine which implementation to use for interface calls?&lt;/li&gt;&lt;/ul&gt;We hacked out some code to answer the questions and then I dug into the specification. What we found was really interesting and we believed worth sharing with others who are also learning the language. Once we learned the mechanics behind methods, interfaces, and embedded types, the answers seemed obvious. To get started, let’s talk about what methods are in Go.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Methods&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Go has both functions and methods. In Go, a method is a function that is declared with a &lt;a href=&quot;http://golang.org/ref/spec#Method_declarations&quot; target=&quot;_blank&quot;&gt;receiver&lt;/a&gt;. A receiver is a value or a pointer of a &lt;a href=&quot;http://golang.org/ref/spec#Types&quot; target=&quot;_blank&quot;&gt;named&lt;/a&gt; or &lt;a href=&quot;http://golang.org/ref/spec#Struct_types&quot; target=&quot;_blank&quot;&gt;struct&lt;/a&gt; type. All the methods for a given type belong to the type’s method set.&lt;br /&gt;&lt;br /&gt;Let’s declare a struct type and a method for that type:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type User struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Name string&lt;br /&gt;&amp;nbsp; &amp;nbsp; Email string&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func (u User) Notify() error&lt;/div&gt;&lt;br /&gt;First we declare a struct type named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; and then we declare a method named &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; with a receiver that accepts a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt;. To call the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method we need a value or pointer of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Value of type User can be used to call the method&lt;br /&gt;// with a value receiver.&lt;br /&gt;bill := User{“Bill”, “bill@email.com”}&lt;br /&gt;bill.Notify()&lt;br /&gt;&lt;br /&gt;// Pointer of type User can also be used to call a method&lt;br /&gt;// with a value receiver.&lt;br /&gt;jill := &amp;amp;User{“Jill”, “jill@email.com”}&lt;br /&gt;jill.Notify()&lt;/div&gt;&lt;br /&gt;In the case where we are using a pointer, Go &lt;a href=&quot;http://golang.org/ref/spec#Calls&quot; target=&quot;_blank&quot;&gt;adjusts&lt;/a&gt; and dereferences the pointer so the call can be made. Be aware that when the receiver is not a pointer, the method is operating against a copy of the receiver value.&lt;br /&gt;&lt;br /&gt;We can change the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method to use a pointer for the receiver:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func (u *User) Notify() error&lt;/div&gt;&lt;br /&gt;Once again, we can call the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method like we did before:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Value of type User can be used to call the method&lt;br /&gt;// with a pointer receiver. &lt;br /&gt;bill := User{“Bill”, “bill@email.com”}&lt;br /&gt;bill.Notify()&lt;br /&gt;&lt;br /&gt;// Pointer of type User can be used to call the method&lt;br /&gt;// with a pointer receiver.&lt;br /&gt;jill := &amp;amp;User{“Jill”, “jill@email.com”}&lt;br /&gt;jill.Notify()&lt;/div&gt;&lt;br /&gt;If you are unsure about when to use a value or a pointer for the receiver, the Go wiki has a great set of &lt;a href=&quot;https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Receiver_Type&quot; target=&quot;_blank&quot;&gt;rules&lt;/a&gt; that you can follow. The Go wiki also contains a paragraph about the conventions the community follows for &lt;a href=&quot;https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Receiver_Names&quot; target=&quot;_blank&quot;&gt;naming&lt;/a&gt; receivers.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Interfaces&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;a href=&quot;http://golang.org/doc/effective_go.html#interfaces&quot; target=&quot;_blank&quot;&gt;Interfaces&lt;/a&gt; in Go are special and provide an incredible amount of flexibility and abstraction for our programs. They are a way of specifying that values and pointers of a particular type can behave in a specific way. From a language perspective, an interface is a type that specifies a &lt;a href=&quot;http://golang.org/ref/spec#Method_sets&quot; target=&quot;_blank&quot;&gt;method set&lt;/a&gt; and all the methods for an &lt;a href=&quot;http://golang.org/ref/spec#Interface_types&quot; target=&quot;_blank&quot;&gt;interface type&lt;/a&gt; are considered to be the interface.&lt;br /&gt;&lt;br /&gt;Let’s declare an interface in Go:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type Notifier interface {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Notify() error&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;Here we define an interface called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notifier&lt;/span&gt; with a single method called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt;. It is a &lt;a href=&quot;http://golang.org/doc/effective_go.html#interface-names&quot; target=&quot;_blank&quot;&gt;convention&lt;/a&gt; in Go to name interfaces with an &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;-er&lt;/span&gt; suffix when the interface contains only one method. This is not a hard rule but something we should honor, especially when the interface and method name have the same signature and meaning.&lt;br /&gt;&lt;br /&gt;We can specify as many methods as we want for our interfaces. In the standard library you will be hard pressed to find many interfaces with more than two methods. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Implementing Interfaces&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Go is unique when it comes to how we implement the interfaces we want our types to support. Go does not require us to explicitly state that our types implement an interface. If every method that belongs to an interface’s method set is implemented by our type, then our type is said to implement the interface.&lt;br /&gt;&lt;br /&gt;Let’s continue with our example by creating a function that accepts any value or pointer of a type that implements the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notifier&lt;/span&gt; interface:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func SendNotification(notify Notifier) error {&lt;br /&gt;&amp;nbsp; &amp;nbsp; return notify.Notify()&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;The &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function calls the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method that is implemented by the value or pointer that is passed into the function. This function can be used to execute the specific behavior for any value or pointer of a given type that implements the interface.&lt;br /&gt;&lt;br /&gt;Let’s implement the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method for our &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; type and call the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function passing a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func (u *User) Notify() error {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Printf(&quot;User: Sending User Email To %s&amp;lt;%s&amp;gt;\n&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u.Name,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u.Email)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; return nil&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; user := User{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name: &amp;nbsp;&quot;janet jones&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Email: &quot;janet@email.com&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; SendNotification(user)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Output:&lt;br /&gt;cannot use user (type User) as type Notifier in function argument: &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; User does not implement Notifier (Notify method has pointer receiver)&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/VieiPRDGVu&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/VieiPRDGVu&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Why does the compiler not consider our value to be of a type that implements the interface? The rules for determining interface compliance are based on the receiver for those methods and how the interface call is being made. Here are the rules in the spec for how the compiler determines if the value or pointer for our type &lt;a href=&quot;http://golang.org/ref/spec#Method_sets&quot; target=&quot;_blank&quot;&gt;implements&lt;/a&gt; the interface:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;The method set of the corresponding pointer type *T is the set of all methods with receiver *T or T&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This rule is stating that if the interface variable we are using to call a particular interface method contains a pointer, then methods with receivers based on both values and pointers will satisfy the interface. This rule does not apply for our example because we are passing a value to the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function.&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;The method set of any other type T consists of all methods with receiver type T.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This rule is stating that if the interface variable we are using to call a particular interface method contains a value, then only methods with receivers based on values will satisfy the interface. This rule does not apply for our example because the receiver for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method accepts a pointer.&lt;br /&gt;&lt;br /&gt;Since those are the only two rules in the spec for interface compliance, I have derived this rule that applies to our example:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;The method set of the corresponding type T &lt;u&gt;&lt;b&gt;does not&lt;/b&gt;&lt;/u&gt; consists of any methods with receiver type *T.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This is our case and why we are receiving the compiler error. The &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method is using a pointer for the receiver and we are using a value to make the interface method call. To fix this we just need to pass the address of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; value to the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; user := &amp;amp;User{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name: &amp;nbsp;&quot;janet jones&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Email: &quot;janet@email.com&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; SendNotification(user)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Output:&lt;br /&gt;User: Sending User Email To janet jones&amp;lt;janet@email.com&amp;gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/3NNiS4dMrK&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/3NNiS4dMrK&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Embedded Types&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;a href=&quot;http://golang.org/ref/spec#Struct_types&quot; target=&quot;_blank&quot;&gt;Struct types&lt;/a&gt; have the ability to contain anonymous or embedded fields. This is also called embedding a type. When we embed a type into a struct, the name of the type acts as the field name for what is then an embedded field.&lt;br /&gt;&lt;br /&gt;Let’s declare a new type and embed our &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; type into it:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type Admin struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; User&lt;br /&gt;&amp;nbsp; &amp;nbsp; Level string&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;We have declared a new type called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; and embedded the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; type within the struct declaration. This is not inheritance but composition. There is no relationship between the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; and the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type.&lt;br /&gt;&lt;br /&gt;Let’s change &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;main&lt;/span&gt; to create a value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type and pass the address of this value to the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; admin := &amp;amp;Admin{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; User: User{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name: &amp;nbsp;&quot;john smith&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Email: &quot;john@email.com&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Level: &quot;super&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; SendNotification(admin)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Output&lt;br /&gt;User: Sending User Email To john smith&amp;lt;john@email.com&amp;gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/2jZMCGEfxW&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/2jZMCGEfxW&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Sure enough, we are able to call the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function with a pointer of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt;. Thanks to composition, the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type now implements the interface through the promotion of the methods from the embedded &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; type.&lt;br /&gt;&lt;br /&gt;If the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type now contains the fields and methods of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; type, then where are they in relationship to the struct? &lt;br /&gt;&lt;br /&gt;&lt;i&gt;“When we &lt;a href=&quot;http://golang.org/doc/effective_go.html#embedding&quot; target=&quot;_blank&quot;&gt;embed&lt;/a&gt; a type, the methods of that type become methods of the outer type, but when they are invoked, the receiver of the method is the inner type, not the outer one.” - Effective Go&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Since the name of the embedded type acts as the field name and the embedded type exists as an inner type, we can then make the following method call:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;admin.User.Notify()&lt;br /&gt;&lt;br /&gt;// Output&lt;br /&gt;User: Sending User Email To john smith&amp;lt;john@email.com&amp;gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/_huNeKVmXS&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/_huNeKVmXS&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Here we are accessing the field and method set of the inner type through the use of the type’s name. However, these fields and methods are also promoted to the outer type:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;admin.Notify()&lt;br /&gt;&lt;br /&gt;// Output&lt;br /&gt;User: Sending User Email To john smith&amp;lt;john@email.com&amp;gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/v4ro-KHiKJ&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/v4ro-KHiKJ&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;So calling the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method using the outer type, calls the implementation of the inner type’s method.&lt;br /&gt;&lt;br /&gt;These are the rules for inner type &lt;a href=&quot;http://golang.org/ref/spec#Method_sets&quot; target=&quot;_blank&quot;&gt;method set promotion&lt;/a&gt; in Go:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Given a struct type S and a type named T, promoted methods are included in the method set of the struct as follows:&lt;/i&gt;&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;If S contains an anonymous field T, the method sets of S and *S both include promoted methods with receiver T.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This rule is stating that when we embed a type, methods for the embedded type with receivers that use a value are promoted and available for calling by values and pointers of the outer type.&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;The method set of *S also includes promoted methods with receiver *T.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This rule is stating that when we embed a type, methods for the embedded type with receivers that use a pointer are promoted and available for calling by pointers of the outer type.&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;If S contains an anonymous field *T, the method sets of S and *S both include promoted methods with receiver T or *T.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This rule is stating that when we embed a pointer of the type, methods for the embedded type with receivers that use both values and pointers are promoted and available for calling by values and pointers of the outer type.&lt;br /&gt;&lt;br /&gt;Since those are the only three rules in the spec for method promotion, I have derived this rule for one other case:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;&lt;i&gt;If S contains an anonymous field T, the method set of S &lt;u&gt;&lt;b&gt;does not&lt;/b&gt;&lt;/u&gt; include promoted methods with receiver *T.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;This rule is stating that when we embed a type, methods for the embedded type with receivers that use a pointer are not promoted for calling by values of the outer type. This is consistent with the rules for interface compliance that we stated above.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Answering The Questions&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Now we can finalize the sample program that will provide the answers for the two questions we asked in the beginning of the post. Let’s implement the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notifier&lt;/span&gt; interface for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func (a *Admin) Notify() error {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Printf(&quot;Admin: Sending Admin Email To %s&amp;lt;%s&amp;gt;\n&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a.Name,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a.Email)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; return nil&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The implementation of the interface by the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type displays a message on behalf of an admin. This will help us determine which implementation gets called when we use a pointer of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type to make the function call to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;Now let’s create a value of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type and pass the address of that value to the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function and see what happens:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; admin := &amp;amp;Admin{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; User: User{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name: &amp;nbsp;&quot;john smith&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Email: &quot;john@email.com&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Level: &quot;super&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; SendNotification(admin)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Output&lt;br /&gt;Admin: Sending Admin Email To john smith&amp;lt;john@email.com&amp;gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/NkDioPJs04&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/NkDioPJs04&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;As expected, the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type’s implementation of the interface is called by the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SendNotification&lt;/span&gt; function. So now what happens when we call the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Notify&lt;/span&gt; method using the outer type:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;admin.Notify() &lt;br /&gt;&lt;br /&gt;// Output&lt;br /&gt;Admin: Sending Admin Email To john smith&amp;lt;john@email.com&amp;gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/RG50rxC0d7&quot; target=&quot;_blank&quot;&gt;http://play.golang.org/p/RG50rxC0d7&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;We get the output for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Admin&lt;/span&gt; type’s implementation. The &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;User&lt;/span&gt; type’s implementation is no longer promoted to the outer type:&lt;br /&gt;&lt;br /&gt;So now we have the knowledge we need to answer the questions:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;Would the compiler throw an error because we now had two implementations of the interface?&lt;/li&gt;&lt;/ul&gt;No, because when we use an embedded type, the unqualified type’s name acts as the field name. This has the effect of fields and methods of the embedded type having a unique name as an inner type of the struct. So we can have an inner and outer implementation of the same interface with each implementation being unique and accessible.&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;If the compiler accepted the type declaration, how does the compiler determine which implementation to use for interface calls?&lt;/li&gt;&lt;/ul&gt;If the outer type contains an implementation that satisfies the interface, it will be used. Otherwise, thanks to method promotion, any inner type that implements the interface can be used through the outer type.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The way methods, interfaces, and embedded types work together is something that makes Go very unique. These features help us create powerful constructs to achieve the same ends as object oriented code without all the complexity. With the language features that we talked about in this post, we can build abstracted and scalable frameworks with a minimal amount of code and confusion.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;The more I learn about the details of the language and the compiler, the more I come to appreciate how &lt;a href=&quot;http://en.wikipedia.org/wiki/Orthogonality_(programming)&quot; target=&quot;_blank&quot;&gt;orthogonal&lt;/a&gt; the language is. Small features that work together and allow us to be creative and use the language in ways not even the language designers thought or dreamed about. I recommend to take the time to learn the language features so you can do more with less and be both creative and productive at the same time.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/183613223728302854/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/05/methods-interfaces-and-embedded-types.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/183613223728302854'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/183613223728302854'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/05/methods-interfaces-and-embedded-types.html' title='Methods, Interfaces and Embedded Types in Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-8829517233269698363</id><published>2014-04-06T08:33:00.000-04:00</published><updated>2014-04-10T10:25:56.417-04:00</updated><title type='text'>Introduction To Numeric Constants In Go</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;One of the more unique features of Go is how the language implements constants. The rules for &lt;a href=&quot;http://golang.org/ref/spec#Constants&quot; target=&quot;_blank&quot;&gt;constants&lt;/a&gt; in the language specification are unique to Go. They provide the flexibility Go needs at the compiler level to make the code we write readable and intuitive while still maintaining a type safe language.&lt;br /&gt;&lt;br /&gt;This post will attempt to build a foundation for what numeric constants are, how they behave in their simplest form and how best to talk about them. There are a lot of little nuances, terms and concepts that can trip us up. Because of this, the post is going to take things slowly.&lt;br /&gt;&lt;br /&gt;So if you are ready to peek under the covers just a bit, roll up your sleeve and let’s get started: &lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Untyped and Typed Numeric Constants&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Constants can be declared with or without a type in Go. When we declare literal values in our code, we are actually declaring constants that are both untyped and unnamed.&lt;br /&gt;&lt;br /&gt;The following examples show typed and untyped numeric constants that are both named and unnamed:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; untypedInteger &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;12345&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; untypedFloatingPoint = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;3.141592&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; typedInteger       &lt;b&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;int&lt;/span&gt;&lt;/b&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;12345&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; typedFloatingPoint &lt;b&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;float64&lt;/span&gt;&lt;/b&gt; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;3.141592&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;The constants on the left hand side of the declaration are named constants and the literal values on the right hand side are unnamed constants.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Kinds of Numeric Constants&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Your first instinct may be to think that typed constants use the same type system as variables, but they don’t. Constants have their own implementation for representing the values that we associate with them. Every Go &lt;a href=&quot;http://golang.org/cmd/&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; has the flexibility to implement constants as they wish, within a set of mandatory &lt;a href=&quot;http://golang.org/ref/spec#Constants&quot; target=&quot;_blank&quot;&gt;requirements&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;When declaring a typed constant, the declared type is used to associate the type’s precision limitations. It does not change how the value is being internally represented. Because the internal representation of constants can be different between the different compilers, it is best to think of constants as having a &lt;i&gt;&lt;b&gt;kind&lt;/b&gt;&lt;/i&gt;, not a type.&lt;br /&gt;&lt;br /&gt;Numeric constants can be one of four kinds:  integer, floating-point, complex and rune:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;12345&lt;/b&gt;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #783f04;&quot;&gt;// kind: integer&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;3.141592&lt;/b&gt;&lt;/span&gt;      &lt;span style=&quot;color: #783f04;&quot;&gt;// kind: floating-point&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;1E6 &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: #783f04;&quot;&gt;// kind: floating-point&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In the example above, we have declared three numeric constants, one of kind integer and two of kind floating-point. The form of the literal value will determine what kind the constant takes. When the form of the literal value contains a decimal or exponent, the constant is of kind floating-point. When the form does not contain a decimal or exponent, the constant is of kind integer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Constants Are Mathematically Exact&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Regardless of the implementation, constants are always considered to be mathematically exact. This is something that makes constants in Go unique. This is not the case in other languages like C and C++.&lt;br /&gt;&lt;br /&gt;Integers can always be represented precisely when there is enough memory to store their entire value. Since the specification requires integer constants to have at least 256 bits of precision, we are safe in saying integer constants are mathematically exact.&lt;br /&gt;&lt;br /&gt;To have mathematically exact floating-point numbers, there are different strategies and options that the compiler can employ. The specification does not state how the compiler must do this, it just specifies a set of mandatory requirements that need to be met.&lt;br /&gt;&lt;br /&gt;Here are two strategies that the different Go compilers use today to implement mathematically exact floating-point numbers:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;One strategy is to represent all floating-point numbers as fractions, and use rational arithmetic on those fractions. This is what go/types does today and these floating-point numbers never have any loss of precision.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;Another strategy is to use floating-point numbers with so much precision that they appear to be exact for all practical purposes. When we use floating-point numbers with several hundred bits, the difference between exact and approximate becomes virtually non-existent. This is what the gc/gccgo compilers do today.&lt;/li&gt;&lt;/ul&gt;As developers however, it is best to not consider what internal representation is being used by the compiler, it is irrelevant. Just remember that all constants, regardless if they are declared with or without a type, use the same representation to store their values, which is not the same as variables and is mathematically exact.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Mathematically Exact Example&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Since constants only exist during compilation, it is hard to provide an example that shows constants are mathematically exact. One way is to show how the compiler will let us declare constants of kind integer with values that are much larger than the largest integer types can support.&lt;br /&gt;&lt;br /&gt;Here is a program that can be compiled because constants of kind integer are mathematically exact:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;package&lt;/b&gt; main&lt;br /&gt;&lt;br /&gt;&lt;b&gt;import&lt;/b&gt; &lt;span style=&quot;color: #990000;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #783f04;&quot;&gt;// Much larger value than int64.&lt;/span&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; myConst = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;9223372036854775808543522345&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;func&lt;/b&gt; main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&lt;span style=&quot;color: #990000;&quot;&gt;&quot;Will Compile&quot;&lt;/span&gt;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;If we change the constant to be of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int64&lt;/span&gt;, which means the constant is now bound to the precision limitations of a 64 bit integer, the program will no longer compile:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;package&lt;/b&gt; main&lt;br /&gt;&lt;br /&gt;&lt;b&gt;import&lt;/b&gt; &lt;span style=&quot;color: #990000;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #783f04;&quot;&gt;// Much larger value than int64.&lt;/span&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; myConst &lt;b&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;int64&lt;/span&gt;&lt;/b&gt; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;9223372036854775808543522345&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;func&lt;/b&gt; main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&lt;span style=&quot;color: #990000;&quot;&gt;&quot;Will NOT Compile&quot;&lt;/span&gt;)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b&gt;Compiler Error:&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;./ideal.go:6: constant 9223372036854775808543522345 overflows int64 &lt;/span&gt;&lt;/div&gt;&lt;br /&gt;Here we can see that constants of kind integer can represent very large numbers and why we say they are mathematically exact.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Numeric Constant Declarations&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;When we declare an untyped numeric constant, there are no type constraints that must be met by the constant value:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; untypedInteger &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;12345&lt;/b&gt;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #783f04;&quot;&gt;// kind: integer&lt;/span&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; untypedFloatingPoint = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;3.141592&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;color: #783f04;&quot;&gt;// kind: floating-point &lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In each case, the untyped constant on the left hand side of the declaration is given the same kind and value as the constant on the right.&lt;br /&gt;&lt;br /&gt;When we declare a typed constant, the constant on the right hand side of the declaration must use a form that is compatible with the declared type on the left:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; typedInteger       &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;int&lt;/span&gt;&lt;/b&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;12345&lt;/span&gt;&lt;/b&gt; &amp;nbsp; &amp;nbsp;// kind: integer&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; typedFloatingPoint &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;float64&lt;/span&gt;&lt;/b&gt; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;3.141592&lt;/b&gt;&lt;/span&gt; // kind: floating-point &lt;/div&gt;&lt;br /&gt;The value on the right hand side of the declaration must also fit into the range for the declared type. For instance, this numeric constant declaration is invalid:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; myUint8&amp;nbsp;&lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;uint8&lt;/span&gt;&lt;/b&gt; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;1000 &lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;uint8&lt;/span&gt; only can represent numbers from 0 to 255. This is what I mean when I said earlier that the declared type is used to associate the type’s precision limitations.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Implicit Integer Type Conversions&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;In Go there are no implicit type &lt;a href=&quot;http://golang.org/ref/spec#Conversions&quot; target=&quot;_blank&quot;&gt;conversions&lt;/a&gt; between variables. However, implicit type conversions between variables and constants can happen regularly by the compiler.&lt;br /&gt;&lt;br /&gt;Let’s start with an implicit integer conversion:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; myInt &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;int&lt;/span&gt;&lt;/b&gt; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;123 &lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In this example we have constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;123&lt;/span&gt; of kind integer being implicitly converted to a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int&lt;/span&gt;. Since the form of the constant is not using a decimal point or exponent, the constant takes the kind integer. Constants of kind integer can be implicitly converted into signed and unsigned integer variables of any length as long as no truncation needs to take place.&lt;br /&gt;&lt;br /&gt;Constants of kind floating-point can also be implicitly converted into integer variables if the constant uses a form that is compatible with the integer type:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; myInt &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;int&lt;/span&gt;&lt;/b&gt; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;123.0 &lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;We can also perform implicit type conversion assignments without declaring an explicit type for the variable:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; myInt = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;123 &lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In this case, the default type of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int64&lt;/span&gt; is used to initialize the variable being assigned with constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;123&lt;/span&gt; of kind integer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Implicit Floating-Point Type Conversions&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Next let’s look at an implicit floating-point conversion:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; myFloat &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;float64&lt;/span&gt;&lt;/b&gt; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;0.333 &lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;This time the compiler is performing an implicit conversion between constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;0.333&lt;/span&gt; of kind floating-point to a variable of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;float64&lt;/span&gt;. Since the form of the constant is using a decimal point, the constant takes the kind floating-point. The default type for a variable initialized with a constant of kind floating-point is &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;float64&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;The compiler can also perform implicit conversions between constants of kind integer to variables of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;float64&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; myFloat &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;float64&lt;/span&gt;&lt;/b&gt; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;1 &lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;In this example, constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;1&lt;/span&gt; of kind integer is implicitly converted to a variable of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;float64&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Kind Promotion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Performing constant arithmetic between other constants and variables is something we do quite often in our programs. It follows the rules for &lt;a href=&quot;http://golang.org/ref/spec#Operators&quot; target=&quot;_blank&quot;&gt;binary operators&lt;/a&gt; in the specification. The rule states that operand types must be identical unless the operation involves shifts or untyped constants.&lt;br /&gt;&lt;br /&gt;Let’s look at an example of two constants that are multiplied together:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; answer = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;3&lt;/b&gt;&lt;/span&gt; &lt;b&gt;*&lt;/b&gt; &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;0.333 &lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In this example we perform multiplication between constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;3&lt;/span&gt; of kind integer and constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;0.333&lt;/span&gt; of kind floating-point.&lt;br /&gt;&lt;br /&gt;There is a rule in the specification about constant expressions that is specific to this operation:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&quot;Except for shift operation, if the operands of a binary operation are &lt;u&gt;different kinds of untyped constants&lt;/u&gt;, ..., the result &lt;u&gt;use the kind that appears later in this list&lt;/u&gt;: integer, rune, floating-point, complex.&quot;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Based on this rule, the result of the multiplication between these two constants will be a constant of kind floating-point. Kind floating-point is being promoted ahead of kind integer based on the rule.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Numeric Constant Arithmetic&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Let’s continue with our multiplication example:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; answer = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;3&lt;/span&gt;&lt;/b&gt; &lt;b&gt;*&lt;/b&gt; &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;0.333 &lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;The result of the multiplication will be a new constant of kind floating-point. That constant is then assigned to the variable &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;answer&lt;/span&gt; through an implicit type conversion from kind floating-point to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;float64&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;When we divide numeric constants, the kind of the constants determine how the division is performed.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; third = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;1&lt;/span&gt;&lt;/b&gt; &lt;b&gt;/&lt;/b&gt; &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;3.0 &lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;When one of the two constants are of kind floating-point, the result of the division will also be a constant of kind floating-point. In our example we have used a decimal point to represent the constant in the denominator. This follows the rules for kind promotion that we talked about before.&lt;br /&gt;&lt;br /&gt;Let’s take the same example but use kind integer in the denominator:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; zero = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;1&lt;/span&gt;&lt;/b&gt; &lt;b&gt;/&lt;/b&gt; &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;3 &lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;This time we are performing division between two constants of kind integer. The result of the division will be a new constant of type integer. Since dividing 3 into the value of 1 represents a number that is less than 1, the result of this division is constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;0&lt;/span&gt; of kind integer.&lt;br /&gt;&lt;br /&gt;Let’s create a typed constant using numeric constant arithmetic:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;type&lt;/b&gt; Numbers &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;int8&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; One Numbers = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; Two &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/span&gt; &lt;b&gt;*&lt;/b&gt; One&lt;/div&gt;&lt;br /&gt;Here we declare a new type called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Numbers&lt;/span&gt; with a base type of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int8&lt;/span&gt;. Then we declare constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;One&lt;/span&gt; with type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Numbers&lt;/span&gt; and assign constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;1&lt;/span&gt; of kind integer. Next we declare constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Two&lt;/span&gt; which is promoted to type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Numbers&lt;/span&gt; through the multiplication of constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;2&lt;/span&gt; of kind integer and constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;One&lt;/span&gt; of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Numbers&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;The declaration of constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Two&lt;/span&gt; shows an example of a constant getting promoted not just to a user-defined type, but a user-defined type associated with a base type.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;One Practical Example&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Let’s look at one practical example right from the standard library. The time package declares this type and set of constants:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;type&lt;/b&gt; Duration &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;int64&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; (&lt;br /&gt;&amp;nbsp; &amp;nbsp; Nanosecond  Duration = &lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Microsecond &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;1000&lt;/span&gt;&lt;/b&gt; &lt;b&gt;*&lt;/b&gt; Nanosecond&lt;br /&gt;&amp;nbsp; &amp;nbsp; Millisecond &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;1000&lt;/span&gt;&lt;/b&gt; &lt;b&gt;*&lt;/b&gt; Microsecond&lt;br /&gt;&amp;nbsp; &amp;nbsp; Second &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;1000&lt;/span&gt;&lt;/b&gt; &lt;b&gt;*&lt;/b&gt; Millisecond&lt;br /&gt;)&lt;/div&gt;&lt;br /&gt;All of the constants declared above are constants of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Duration&lt;/span&gt; which have a base type of &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int64&lt;/span&gt;. Here we are declaring typed constants using constant arithmetic between constants that are typed and untyped.&lt;br /&gt;&lt;br /&gt;Since the compiler will perform implicit conversions for constants, we can write code in Go like this:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;package&lt;/b&gt; main&lt;br /&gt;&lt;br /&gt;&lt;b&gt;import&lt;/b&gt; (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #990000;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #990000;&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;const&lt;/b&gt; fiveSeconds = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;5&lt;/span&gt;&lt;/b&gt; &lt;b&gt;*&lt;/b&gt; time.Second&lt;br /&gt;&lt;br /&gt;&lt;b&gt;func&lt;/b&gt; main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;now := time.Now()&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;lessFiveNanoseconds := now.Add(&lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;-5&lt;/span&gt;&lt;/b&gt;)&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;lessFiveSeconds := now.Add(-fiveSeconds)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;fmt.Printf(&lt;span style=&quot;color: #990000;&quot;&gt;&quot;Now &amp;nbsp; &amp;nbsp; : %v\n&quot;&lt;/span&gt;, now)&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;fmt.Printf(&lt;span style=&quot;color: #990000;&quot;&gt;&quot;Nano &amp;nbsp; &amp;nbsp;: %v\n&quot;&lt;/span&gt;, lessFiveNanoseconds)&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;fmt.Printf(&lt;span style=&quot;color: #990000;&quot;&gt;&quot;Seconds : %v\n&quot;&lt;/span&gt;, lessFiveSeconds)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #4c1130;&quot;&gt;&lt;b&gt;Output:&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #4c1130;&quot;&gt;Now &amp;nbsp; &amp;nbsp; : 2014-03-27 13:30:49.111038384 -0400 EDT&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #4c1130;&quot;&gt;Nano &amp;nbsp; &amp;nbsp;: 2014-03-27 13:30:49.111038379 -0400 EDT&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #4c1130;&quot;&gt;Seconds : 2014-03-27 13:30:44.111038384 -0400 EDT&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;The power of constants are exhibited with the method calls to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Add&lt;/span&gt;. Let’s look at the definition of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Add&lt;/span&gt; method for the receiver type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Time&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;func&lt;/b&gt; (t Time) Add(d Duration) Time &lt;/div&gt;&lt;br /&gt;The &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Add&lt;/span&gt; method accepts a single parameter of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Duration&lt;/span&gt;. Let’s look closer at the method calls to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Add&lt;/span&gt; from our program:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; lessFiveNanoseconds = now.Add(&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;b&gt;-5&lt;/b&gt;&lt;/span&gt;)&lt;br /&gt;&lt;b&gt;var&lt;/b&gt; lessFiveMinutes = now.Add(-fiveSeconds) &lt;/div&gt;&lt;br /&gt;The compiler is implicitly converting constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;-5&lt;/span&gt; into a variable of type&amp;nbsp;&lt;span style=&quot;font-family: &#39;Courier New&#39;, Courier, monospace;&quot;&gt;Duration&lt;/span&gt;&amp;nbsp;to allow the method call to&amp;nbsp;happen. Constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;fiveSeconds&lt;/span&gt; is already of type&amp;nbsp;&lt;span style=&quot;font-family: &#39;Courier New&#39;, Courier, monospace;&quot;&gt;Duration&lt;/span&gt;&amp;nbsp;thanks to the rules for constant&amp;nbsp;arithmetic:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;const&lt;/b&gt; fiveSeconds = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;5&lt;/span&gt;&lt;/b&gt; &lt;b&gt;*&lt;/b&gt; time.Second &lt;/div&gt;&lt;br /&gt;The multiplication between constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;5&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;time.Second&lt;/span&gt; results in constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;fiveSeconds&lt;/span&gt; becoming a constant of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Duration&lt;/span&gt;. This is because constant &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;time.Second&lt;/span&gt; is of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Duration&lt;/span&gt; and this type is promoted when determining the type of the result. To support the function call, the constant still needs to be implicitly converted from a constant of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Duration&lt;/span&gt; to a variable of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Duration&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;If constants didn&#39;t behave the way they do, these kind of assignments and function calls would always require explicit conversions. Look at what happens when we try to use a value of type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int&lt;/span&gt; to make the same method call:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;var&lt;/b&gt; difference &lt;b&gt;&lt;span style=&quot;color: #134f5c;&quot;&gt;int&lt;/span&gt;&lt;/b&gt; = &lt;b&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;-5&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;var&lt;/b&gt; lessFiveNano = now.Add(difference)&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #990000;&quot;&gt;&lt;b&gt;Compiler Error:&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #990000;&quot;&gt;./const.go:16: cannot use difference (type int) as type time.Duration in functi&lt;/span&gt;on argument &lt;/div&gt;&lt;br /&gt;Once we use a typed integer value as the parameter for the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Add&lt;/span&gt; method call, we received a compiler error. The compiler will not allow implicit type conversions between typed variables. For that code to compile we would need to perform an explicit type conversion:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Add(time.Duration(difference)) &lt;/div&gt;&lt;br /&gt;Constants are the only mechanism we have to write code without the need to use explicit type conversions.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;We take the behavior of constants for granted, which is a testament to the language designers and those who have worked hard on this feature. A lot of work and care has gone into making constants work this way and the benefits are hopefully clear.&lt;br /&gt;&lt;br /&gt;So the next time you are working with a constant, remember you are working with something that is unique. A hidden gem buried in the compiler that doesn’t get enough credit or recognition as a unique feature of Go. Constants help make coding in Go fun and the code we write readable and intuitive. While at the same time keeping the code we write type safe.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Thanks&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Thanks to&amp;nbsp;&lt;a href=&quot;http://blog.natefinch.com/&quot; target=&quot;_blank&quot;&gt;Nate Finch&lt;/a&gt; and &lt;a href=&quot;http://www.westryn.net/resumes/kim.html&quot; target=&quot;_blank&quot;&gt;Kim Shrier&lt;/a&gt;&amp;nbsp;who have provided several reviews of the post that have helped to make sure the content and examples were accurate, flowed well and would be interesting to Go developers. I was ready to give up a few times and Nate’s encouragement kept me going.&lt;br /&gt;&lt;br /&gt;Special thanks to Robert Griesemer and others on the Go dev team for their time and patience in teaching me the subject matter. The Go dev team is filled with an amazing group of people who really care about the community and the people who are a part of it. Thanks!!&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/8829517233269698363/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/04/introduction-to-numeric-constants-in-go.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/8829517233269698363'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/8829517233269698363'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/04/introduction-to-numeric-constants-in-go.html' title='Introduction To Numeric Constants In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-7658649759967055434</id><published>2014-03-15T17:07:00.001-04:00</published><updated>2014-03-16T19:59:03.276-04:00</updated><title type='text'>Exported/Unexported Identifiers In Go</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;One of the first things I learned about in Go was using an uppercase or lowercase letter as the first letter when naming a type, variable or function. It was explained that when the first letter was capitalized, the identifier was public to any piece of code that wanted to use it. When the first letter was lowercase, the identifier was private and could only be accessed within the package it was defined.&lt;br /&gt;&lt;br /&gt;I have come to realize that the use of the language public and private is really not accurate. It is more accurate to say an identifier is exported or unexported from a package. When an identifier is exported from a package, it means the identifier can be directly accessed from any other package in the code base. When an identifier is unexported from a package, it can&#39;t be directly accessed from any other package. What we will soon learn is that just because an identifier is unexported, it doesn&#39;t mean it can&#39;t be accessed outside of its package, it just means it can&#39;t be accessed directly.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Direct Identifier Access&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Let&#39;s start with a simple example of an exported type:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_1a.go&quot;&gt;&lt;/script&gt;Here we define a user-defined type called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;AlertCounter&lt;/span&gt;&amp;nbsp;inside the package &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;counters&lt;/span&gt;. This type is an alias for the built-in type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;int&lt;/span&gt;, but in Go &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;AlertCounter&lt;/span&gt;&amp;nbsp;will be considered a unique and distinct type. We are using the capital letter &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&#39;A&#39;&lt;/span&gt; as the first letter for the name of the type, which means this type is exported and accessible by other packages.&lt;br /&gt;&lt;br /&gt;Now let&#39;s access our&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;AlertCounter&lt;/span&gt;&amp;nbsp;type in the main program:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_1b.go&quot;&gt;&lt;/script&gt;Since the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;AlertCounter&lt;/span&gt;&amp;nbsp;type has been exported, this code builds fine. When we run the program we get the value of 10.&lt;br /&gt;&lt;br /&gt;Now let&#39;s change the exported &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;AlertCounter&lt;/span&gt;&amp;nbsp;type to be an unexported type by changing the name to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;alertCounter&lt;/span&gt;&amp;nbsp;and see what happens:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_2a.go&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_2b.go&quot;&gt;&lt;/script&gt;After making the changes to the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;counters&lt;/span&gt;&amp;nbsp;and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;main&lt;/span&gt;&amp;nbsp;packages, we attempt to build the code again and get the following compiler error:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;./main.go:11: cannot refer to unexported name counters.alertCounter&lt;br /&gt;./main.go:11: undefined: counters.alertCounter &lt;/div&gt;&lt;br /&gt;As expected we can&#39;t directly access the&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;alertCounter&lt;/span&gt;&amp;nbsp;type because it is unexported. Even though we&amp;nbsp;can&#39;t access the&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;alertCounter&lt;/span&gt;&amp;nbsp;type directly anymore, there is a way for us to create and use variables of this unexported type in the main package:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_3a.go&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_3b.go&quot;&gt;&lt;/script&gt;In the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;counters&lt;/span&gt;&amp;nbsp;package we add an exported function called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;NewAlertCounter&lt;/span&gt;. This function creates and returns objects of the&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;alertCounter&lt;/span&gt;&amp;nbsp;type. In the main program we use this&amp;nbsp;function and the programming logic stays the same.&lt;br /&gt;&lt;br /&gt;What this example shows is that an identifier that is defined as unexported can still be accessed and used by other packages. It just can&#39;t be accessed directly.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Using Structs&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Defining exported and unexported members for our structs work in the exact same way. If a field or method name starts with a capital letter, the member is exported and is accessible outside of the package. If a field or method starts with a lowercase letter, the member is unexported and does not have accessibility outside of the package.&lt;br /&gt;&lt;br /&gt;Here is an example of a struct with both exported and unexported fields. The main program has a compiler error because it attempts to access the unexported field directly:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_4a.go&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_4b.go&quot;&gt;&lt;/script&gt;Here is the error from the compiler:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;./main.go:14: unknown animal.Dog field &#39;age&#39; in struct literal &lt;/div&gt;&lt;br /&gt;As expected the compiler does not let the main program access the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;age&lt;/span&gt;&amp;nbsp;field directly.&lt;br /&gt;&lt;br /&gt;Let&#39;s look at an interesting example of embedding. We start with two user-defined types where one type embeds the other:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_5a.go&quot;&gt;&lt;/script&gt;We added a new exported type called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Animal&lt;/span&gt;&amp;nbsp;with two exported fields called &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Name&lt;/span&gt;&amp;nbsp;and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Age&lt;/span&gt;. Then we embed the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Animal&lt;/span&gt;&amp;nbsp;type into the exported &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Dog&lt;/span&gt;&amp;nbsp;type. This means that the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Dog&lt;/span&gt;&amp;nbsp;type now has three exported fields, &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Name&lt;/span&gt;, &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Age&lt;/span&gt;&amp;nbsp;and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;BarkStrength&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;Let&#39;s look at the implementation of the main program:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_5b.go&quot;&gt;&lt;/script&gt;In main we use a composite literal to create and initialize an object of the exported &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Dog&lt;/span&gt;&amp;nbsp;type. Then we display the structure and values of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;dog&lt;/span&gt;&amp;nbsp;object.&lt;br /&gt;&lt;br /&gt;To make things more interesting, let&#39;s change the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Animal&lt;/span&gt;&amp;nbsp;type from exported to unexported by changing the first letter of the type&#39;s name to a lowercase letter &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_6a.go&quot;&gt;&lt;/script&gt;The&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;animal&lt;/span&gt;&amp;nbsp;type remains embedded in the exported&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Dog&lt;/span&gt;&amp;nbsp;type, but now as an unexported type.&amp;nbsp;We keep the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Name&lt;/span&gt;&amp;nbsp;and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Age&lt;/span&gt;&amp;nbsp;fields within the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;animal&lt;/span&gt;&amp;nbsp;type as exported fields.&lt;br /&gt;&lt;br /&gt;In the main program we just change the name of the type from &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Animal&lt;/span&gt;&amp;nbsp;to &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;animal&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_6b.go&quot;&gt;&lt;/script&gt;Once again we have a main program that can&#39;t compile because we are trying to access the unexported type &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;animal&lt;/span&gt;&amp;nbsp;from inside the composite literal:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;./main.go:11: cannot refer to unexported name animals.animal&lt;br /&gt;./main.go:14: unknown animals.Dog field &#39;animal&#39; in struct literal &lt;/div&gt;&lt;br /&gt;We can fix the compiler error by initializing the exported fields from the unexported embedded type outside of the composite literal:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_7.go&quot;&gt;&lt;/script&gt;Now the main program builds again. The exported fields that were embedded into the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Dog&lt;/span&gt;&amp;nbsp;type from the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;animal&lt;/span&gt;&amp;nbsp;type are accessible, even though they came from an unexported type. The exported fields keep their exported status when the type is embedded.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Standard Library&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The exported &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Time&lt;/span&gt;&amp;nbsp;type from the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;time&lt;/span&gt;&amp;nbsp;package is a good example of a type from the standard library that provides no access to its internals:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9567247.js?file=exportedtypes_8.go&quot;&gt;&lt;/script&gt;The language designers are using the unexported fields to keep the internals of the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Time&lt;/span&gt; type private. They are &quot;hiding&quot; the information so we can&#39;t do anything contrary to how the time data works. With that being said, we still can use the unexported fields through the interface they provide. Without the ability to use and access unexported fields indirectly, we would not be able to copy objects of this type or embed this type into our own user-defined types.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;A solid understanding of how to hide and provide access to data from our packages is important. There is a lot more to exporting and unexporting identifiers than meets the eye. In setting out to write this post, I though a couple of examples would do the trick. Then I realized how involved the topic can get once we start looking at embedding unexported types into our own types.&lt;br /&gt;&lt;br /&gt;The ability to use exported or unexported identifiers is an implementation detail, one that Go give us flexibility to use in our programs. The standard library has great examples of using unexported identifiers to hide and protect data. We looked at one example with the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;time.Time&lt;/span&gt;&amp;nbsp;type. Take the time to look at the standard library to learn more.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/7658649759967055434/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/7658649759967055434'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/7658649759967055434'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html' title='Exported/Unexported Identifiers In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-6296062787601634495</id><published>2014-03-07T17:58:00.001-05:00</published><updated>2014-03-14T17:28:38.879-04:00</updated><title type='text'>Web Form Validation And Localization In Go</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;As I improve my knowledge and framework for a Go based web service I am building, I continue to go back and enhance my &lt;a href=&quot;http://www.goinggo.net/2013/12/sample-web-application-using-beego-and.html&quot; target=&quot;_blank&quot;&gt;Beego Sample App&lt;/a&gt;. Something I just added recently was providing localized messages for validation errors. I was fortunate to find Nick Snyder&#39;s &lt;a href=&quot;https://github.com/nicksnyder/go-i18n&quot; target=&quot;_blank&quot;&gt;go-i18n&lt;/a&gt; package. Nick&#39;s package made it easy to support multiple languages for the Go web service I am writing.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Abstracting go-i18n&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The go-i18n package is simple to use and you can use it to read files or strings that contain all the messages you want to localize. It has some nice features including variable substitution and support for handling plurals for each individual locale. Nick has documentation for his package, so I am going to show you how I abstracted and integrated go-i18n into the Beego sample app.&lt;br /&gt;&lt;br /&gt;I decided I didn&#39;t want to use files to store the messages, but create raw string literal variables. The less I had to worry about managing external resources the better. With that being said, I built a simple package that abstracted the support I needed. Luckily go-i18n supports passing in a string that can contain the JSON document with the message data:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9417459.js?file=localization_messages.go&quot;&gt;&lt;/script&gt;I am just using simple messages right now, but as you can see, the variable En_US is defined and assigned a JSON document with the messages I need localized. The go-i18n package also lets you define messages like this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9417459.js?file=localization_sample.go&quot;&gt;&lt;/script&gt;In this sample, the translation has one message for the singular case and one for the plural case. There is also support for using variable substitution thanks to template support.&lt;br /&gt;&lt;br /&gt;Here is the localize package that provides support for the web service:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9417459.js?file=localization_full.go&quot;&gt;&lt;/script&gt;The Init function creates the default locale for the application. Currently the Beego Sample App only supports English for the United States. Eventually, we can add cases for the other locales. Obviously this can all be done through configuration in the future.&lt;br /&gt;&lt;br /&gt;The Init function uses the LoadJSON function to load the go-i18n datastore with the internal messages for the default locale. Later on we can use the LoadJSON function again to load more JSON documents for the same or different locales.&lt;br /&gt;&lt;br /&gt;The Init function also uses the NewTranslation function to obtain a new i18n.TranslateFunc object for the default locale. This object is used to retrieve messages from the go-i18n datastore. If we have a scenario where the default locale is not valid, we can use the NewTranslation function at any time to obtain an object for the locale we need.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Beego Integration&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;To see how I integrated the go-i18n package into the sample app, we need to look at the controller:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9417459.js?file=localization_controller.go&quot;&gt;&lt;/script&gt;As discussed in my previous post about the Beego Sample App, we define a struct with tags that are used by the Beego validation module. I added support for defining the error to be returned when validation fails, by providing a new tag called error. In this case the error tag contains the id of the localized message we want to return. The ParseAndValidate function will handle the rest:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9417459.js?file=localization_parseval.go&quot;&gt;&lt;/script&gt;When the Beego validation module finds a problem, then the real work begins. The function uses reflection to find the error tag on any of the fields in the param struct. If an error tag is found, the id of the localized message is stored along with the field name. Then the function ranges over all the errors that the Beego validation module found and if an error tag existed for that field, we use the id to retrieve the localized message.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Testing&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;If we run the run_endpoint_test.sh shell script, which can be found in the zscripts folder, we can see the localized message returned in the last test:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/goinggo/9417459.js?file=localization_result.go&quot;&gt;&lt;/script&gt;The last test is designed to validate the localized message is returned.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The Beego framework has been great for developing my Go web service. It has the right amount of framework and modules, like the validation module, when you need it. The ability to bring in a package like go-i18n and integrate it so easily is another big win for Beego.&lt;br /&gt;&lt;br /&gt;If you are in need for localizing your Go application, take a look at go-i18n and see if it can work for you.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/6296062787601634495/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/03/web-form-validation-and-localization-in.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/6296062787601634495'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/6296062787601634495'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/03/web-form-validation-and-localization-in.html' title='Web Form Validation And Localization In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-736250672526085148</id><published>2014-02-25T10:19:00.000-05:00</published><updated>2014-03-14T09:52:09.673-04:00</updated><title type='text'>Running MongoDB Queries Concurrently With Go</title><content type='html'>&lt;i&gt;If you are attending GopherCon 2014 or plan to watch the videos once they are released, this article will prepare you for the talk by Gustavo Niemeyer and Steve Francia. It provides a&amp;nbsp;beginners view for using the Go mgo driver against a MongoDB database.&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;MongoDB supports many different programming languages thanks to a great set of &lt;a href=&quot;http://docs.mongodb.org/ecosystem/drivers/&quot;&gt;drivers&lt;/a&gt;. One such driver is the MongoDB Go driver which is called &lt;a href=&quot;http://labix.org/mgo&quot;&gt;mgo&lt;/a&gt;. This driver has been externally developed by &lt;a href=&quot;http://gophercon.com/speakers/#gustavo_niemeyer&quot;&gt;Gustavo Niemeyer&lt;/a&gt; from Canonical, and eventually &lt;a href=&quot;http://gophercon.com/speakers/#steve_francia&quot;&gt;Steve Francia&lt;/a&gt;, the head of the drivers team at MongoDB Inc, took notice and offered support. Both Gustavo and Steve will be talking at &lt;a href=&quot;http://gophercon.com/&quot;&gt;GopherCon 2014&lt;/a&gt; in April about &quot;&lt;a href=&quot;http://gophercon.com/schedule/#gustavo_niemeyer&quot;&gt;Painless Data Storage With MongoDB and Go&lt;/a&gt;&quot;. The talk centers around the mgo driver and how MongoDB and Go really work well together to build highly scalable and concurrent software.&lt;span id=&quot;docs-internal-guid-42314786-69f7-a6d7-0263-6f34798f5ee5&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;MongoDB and Go let us build scalable software on many different operating systems and architectures, without the need to install any frameworks or runtime environments. Go programs are native binaries and the Go tooling is constantly improving to create binaries that run as fast as equivalent C programs. That wouldn&#39;t mean anything if writing code in Go was complicated and as tedious as writing programs in C. This is where Go really shines because once you get up to speed, writing programs in Go is fast and fun.&lt;br /&gt;&lt;br /&gt;In this post I am going to show you how to write a Go program using the mgo driver to connect and run queries concurrently against a MongoDB database. I will break down the sample code and explain a few things that seem to be always be a bit confusing to those new to MongoDB and Go.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Sample Program&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The sample program connects to a public MongoDB database I have hosted with&amp;nbsp;&lt;a href=&quot;https://mongolab.com/welcome/&quot; target=&quot;_blank&quot;&gt;MongoLab&lt;/a&gt;. If you have &lt;a href=&quot;http://www.goinggo.net/2013/06/installing-go-gocode-gdb-and-liteide.html&quot; target=&quot;_blank&quot;&gt;Go&lt;/a&gt; and &lt;a href=&quot;http://wiki.bazaar.canonical.com/Download&quot; target=&quot;_blank&quot;&gt;Bazaar&lt;/a&gt; installed on your machine, you can run the program. The program launches ten goroutines that individually query all the records from the buoy_stations collection inside the goinggo database. The records are unmarshaled into native Go types and each goroutine logs the number of documents returned:&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/ardan-bkennedy/9198289.js?file=GoMgoSample-Full.go&quot;&gt;&lt;/script&gt;Now that you have seen the entire program, we can break it down. Let&#39;s start with the type structures that are defined in the beginning: &lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/ardan-bkennedy/9198289.js?file=GoMgoSample-1.go&quot;&gt;&lt;/script&gt;The structures represent the data that we are going to retrieve and unmarshal from our query. BuoyStation represents the main document and BuoyCondition and BuoyLocation are embedded documents. The mgo driver makes it easy to use native types that represent the documents stored in our collections by using tags. With the tags, we can control how the mgo driver unmarshals the returned documents into our native Go structures.&lt;br /&gt;&lt;br /&gt;Now let&#39;s look at how we connect to a MongoDB database using mgo: &lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/ardan-bkennedy/9198289.js?file=GoMgoSample-2.go&quot;&gt;&lt;/script&gt;We start with creating a mgo.DialInfo object. We can connect to a single MongoDB database or a replica set. Connecting to a replica set can be accomplished by providing multiple addresses in the Addrs field or with a single address. If we are using a single host address to connect to a replice set, the mgo driver will learn about any remaining hosts from the replica set member we connect to. In our case we are connecting to a single host.&lt;br /&gt;&lt;br /&gt;After providing the host, we specify the database, username and password we need for authentication. One thing to note is that the database we authenticate against may not necessarily be the database our application needs to access. Some applications authenticate against the admin database and then use other databases depending on their configuration. The mgo driver supports these types of configurations very well.&lt;br /&gt;&lt;br /&gt;Next we use the mgo.DialWithInfo method to create a mgo.Session object. The mgo.Session object maintains a pool of connections to the MongoDB host. We can create multiple sessions with different modes and settings to support different aspects of our applications.  We can specify if the session is to use a Strong or Monotonic mode, and we can set the safe level as well as other settings. &lt;br /&gt;&lt;br /&gt;The next line of code sets the mode for the session. There are three modes that can be set, Strong, Monotonic and Eventual. Each mode sets a specific consistency for how reads and writes are performed. For more information on the differences between each mode, check out the &lt;a href=&quot;http://godoc.org/labix.org/v2/mgo#Session.SetMode&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; for the mgo driver.&lt;br /&gt;&lt;br /&gt;We are using Monotonic mode which provides reads that may not entirely be up to date, but the reads will always see the history of changes moving forward. In this mode reads occur against secondary members of our replica sets until a write happens. Once a write happens, the primary member is used. The benefit is some distribution of the reading load can take place against the secondaries when possible.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With the session set and ready to go, next we execute multiple queries concurrently:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/ardan-bkennedy/9198289.js?file=GoMgoSample-4.go&quot;&gt;&lt;/script&gt;This code is classic Go concurrency in action. First we create a sync.WaitGroup object so we can keep track of all the goroutines we are going to launch as they complete their work. Then we immediately set the count of the sync.WaitGroup object to ten and use a for loop to launch ten goroutines using the RunQuery function. The keyword go is used to launch a function or method to run concurrently. The final line of code calls the Wait method on the sync.WaitGroup object which locks the main goroutine until everything is done processing.&lt;br /&gt;&lt;br /&gt;To learn more about Go concurrency and better understand how this particular piece of code works, check out these posts on &lt;a href=&quot;http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html&quot; target=&quot;_blank&quot;&gt;concurrency&lt;/a&gt; and &lt;a href=&quot;http://www.goinggo.net/2014/02/the-nature-of-channels-in-go.html&quot; target=&quot;_blank&quot;&gt;channels&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Now let&#39;s look at the RunQuery function and see how to properly use the mgo.Session object to acquire a connection and execute a query: &lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/ardan-bkennedy/9198289.js?file=GoMgoSample-5.go&quot;&gt;&lt;/script&gt;The very first thing we do inside of the RunQuery function is to defer the execution of the Done method on the sync.WaitGroup object. The defer keyword will postpone the execution of the Done method, to take place once the RunQuery function returns. This will guarantee that the sync.WaitGroup objects count will decrement even if an unhandled exception occurs.&lt;br /&gt;&lt;br /&gt;Next we make a copy of the session we created in the main goroutine. Each goroutine needs to create a copy of the session so they each obtain their own socket without serializing their calls with the other goroutines. Again, we use the defer keyword to postpone and guarantee the execution of the Close method on the session once the RunQuery function returns. Closing the session returns the socket back to the main pool, so this is very important. &lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/ardan-bkennedy/9198289.js?file=GoMgoSample-6.go&quot;&gt;&lt;/script&gt;To execute a query we need a mgo.Collection object. We can get a mgo.Collection object through the mgo.Session object by specifying the name of the database and then the collection. Using the mgo.Collection object, we can perform a Find and retrieve all the documents from the collection. The All function will unmarshal the response into our slice of BuoyStation objects. A slice is a dynamic array in Go. Be aware that the All method will load all the data in memory at once. For large collections it is better to use the &lt;a href=&quot;http://godoc.org/labix.org/v2/mgo#Iter&quot; target=&quot;_blank&quot;&gt;Iter&lt;/a&gt; method instead. Finally, we just log the number of BuoyStation objects that are returned.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The example shows how to use Go concurrency to launch multiple goroutines that can execute queries against a MongoDB database independently. Once a session is established, the mgo driver exposes all of the MongoDB functionality and handles the unmarshaling of BSON documents into Go native types.&lt;br /&gt;&lt;br /&gt;MongoDB can handle a large number of concurrent requests when you architect your MongoDB databases and collections with concurrency in mind. Go and the mgo driver are perfectly aligned to push MongoDB to its limits and build software that can take advantage of all the computing power that is available.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;The mgo driver can help you distribute your queries across a MongoDB replica set. The mgo driver gives you the ability to create and configure your sessions and take advantage of MongoDB&#39;s mode and configuration options. The mode you use for your session, how and where the cluster and load balancer is setup, and the type of work being processed by MongoDB at the time of those queries, plays an important role in the actual distribution.&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;The mgo driver provides a safe way to leverage Go&#39;s concurrency support and you have the flexibility to execute queries concurrently and in parallel. It is best to take the time to learn a bit about MongoDB replica sets and load balancer configuration. Then make sure the load balancer is behaving as expected under the different types of load your application can produce.&lt;/div&gt;&lt;br /&gt;Now is a great time to see what MongoDB and Go can do for your software applications, web services and service platforms. Both technologies are being battle tested everyday by all types of companies, solving all types of business and computing problems.  &lt;!-- package main  import (  &quot;labix.org/v2/mgo&quot;  &quot;labix.org/v2/mgo/bson&quot;  &quot;log&quot;  &quot;sync&quot;  &quot;time&quot; )  const (  MongoDBHosts = &quot;ds035428.mongolab.com:35428&quot;  AuthDatabase = &quot;goinggo&quot;  AuthUserName = &quot;guest&quot;  AuthPassword = &quot;welcome&quot;  TestDatabase = &quot;goinggo&quot; )  type (  // BuoyCondition contains information for an individual station  BuoyCondition struct {   WindSpeed     float64 `bson:&quot;wind_speed_milehour&quot;`   WindDirection int     `bson:&quot;wind_direction_degnorth&quot;`   WindGust      float64 `bson:&quot;gust_wind_speed_milehour&quot;`  }   // BuoyLocation contains the buoy&#39;s location  BuoyLocation struct {   Type        string    `bson:&quot;type&quot;`   Coordinates []float64 `bson:&quot;coordinates&quot;`  }   // BuoyStation contains information for an individual station  BuoyStation struct {   ID        bson.ObjectId `bson:&quot;_id,omitempty&quot;`   StationId string        `bson:&quot;station_id&quot;`   Name      string        `bson:&quot;name&quot;`   LocDesc   string        `bson:&quot;location_desc&quot;`   Condition BuoyCondition `bson:&quot;condition&quot;`   Location  BuoyLocation  `bson:&quot;location&quot;`  } )  func main() {  // We need this object to establish a session to our MongoDB  mongoDBDialInfo := &amp;mgo.DialInfo{   Addrs:    []string{MongoDBHosts},   Timeout:  60 * time.Second,   Database: AuthDatabase,   Username: AuthUserName,   Password: AuthPassword,  }   // Create a session which maintains a pool of socket connections  // to our MongoDB  mongoSession, err := mgo.DialWithInfo(mongoDBDialInfo)  if err != nil {   log.Fatalf(&quot;CreateSession: %s\n&quot;, err)  }   // Reads may not be entirely up-to-date, but they will always see the  // history of changes moving forward, the data read will be consistent  // across sequential queries in the same session, and modifications made  // within the session will be observed in following queries (read-your-writes).  // http://godoc.org/labix.org/v2/mgo#Session.SetMode  mongoSession.SetMode(mgo.Monotonic, true)   // Create a wait group to manage the goroutines  var waitGroup sync.WaitGroup   // Perform 10 concurrent queries against the database  waitGroup.Add(10)  for query := 0; query &lt; 10; query++ {   go RunQuery(query, &amp;waitGroup, mongoSession)  }   // Wait for all the queries to complete  waitGroup.Wait()  log.Println(&quot;All Queries Completed&quot;) }  func RunQuery(query int, waitGroup *sync.WaitGroup, mongoSession *mgo.Session) {  // Decrement the wait group count so the program knows this  // has been completed once the goroutine exits  defer waitGroup.Done()   // Request a socket connection from the session to process our query.  // Close the session when the goroutine exits and put the connection back  // into the pool  sessionCopy := mongoSession.Copy()  defer sessionCopy.Close()   // Get a collection to execute the query against  collection := sessionCopy.DB(TestDatabase).C(&quot;buoy_stations&quot;)   log.Printf(&quot;RunQuery : %d : Executing\n&quot;, query)   // Retrieve the list of stations  var buoyStations []BuoyStation  err := collection.Find(nil).All(&amp;buoyStations)  if err != nil {   log.Printf(&quot;RunQuery : ERROR : %s\n&quot;, err)   return  }   log.Printf(&quot;RunQuery : %d : Count[%d]\n&quot;, query, len(buoyStations)) } --&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/736250672526085148/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/02/running-queries-concurrently-against.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/736250672526085148'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/736250672526085148'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/02/running-queries-concurrently-against.html' title='Running MongoDB Queries Concurrently With Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-4469444733656318355</id><published>2014-02-17T09:25:00.000-05:00</published><updated>2014-03-14T17:23:24.797-04:00</updated><title type='text'>The Nature Of Channels In Go</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;In my last post called &lt;a href=&quot;http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html&quot; target=&quot;_blank&quot;&gt;Concurrency, Goroutines and GOMAXPROCS&lt;/a&gt;, I set the stage for talking about channels. We discussed what concurrency was and how goroutines played a role. With that foundation in hand, we can now understand the nature of channels and how they can be used to synchronize goroutines to share resources in a safe, less error prone and fun way. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;What Are Channels&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Channels are type safe message queues that have the intelligence to control the behavior of any goroutine attempting to read or write to it. A channel acts as a conduit between two goroutines and will synchronize the exchange of any resource that is passed through it. It is the channel&#39;s ability to control the goroutines interaction that creates the synchronization mechanism. When a channel is created with no capacity for its queue, it is called an unbuffered channel. In turn, a channel created with capacity for its queue is called a buffered channel.&lt;br /&gt;&lt;br /&gt;To understand what the synchronization behavior will be for any goroutine interacting with a channel, we need to know the type and state of the channel. The scenarios are a bit different depending on whether we are using an unbuffered or buffered channel, so let&#39;s talk about each one independently.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Unbuffered Channels&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Unbuffered channels have no capacity and therefore require both goroutines to be ready to make any exchange. When a goroutine attempts to write a resource to an unbuffered channel and there is no goroutine waiting to receive the resource, the channel will lock the goroutine and make it wait. When a goroutine attempts to read from an unbuffered channel, and there is no goroutine waiting to send a resource, the channel will lock the goroutine and make it wait.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-vnJIWvlbP-E/UwDVICJKB9I/AAAAAAAANX0/T04V_58i8Vs/s1600/Screen+Shot+2014-02-16+at+10.10.54+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-vnJIWvlbP-E/UwDVICJKB9I/AAAAAAAANX0/T04V_58i8Vs/s1600/Screen+Shot+2014-02-16+at+10.10.54+AM.png&quot; height=&quot;305&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;In the diagram above, we see an example of two goroutines making an exchange using an unbuffered channel. In step 1, the two goroutines approach the channel and then in step 2, the goroutine on the left sticks his hand into the channel or performs a write. At this point, that goroutine is locked in the channel until the exchange is complete. Then in step 3, the goroutine on the right places his hand into the channel or performs a read. That goroutine is also locked in the channel until the exchange is complete. In step 4 and 5 the exchange is made and finally in step 6, both goroutines are free to remove their hands and go on their way.&lt;br /&gt;&lt;br /&gt;Synchronization is inherent in the interaction between the write and the read. One can not happen without the other. The nature of an unbuffered channel is synchronization.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Buffered Channels&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Buffered channels have capacity and therefore can behave a bit differently. When a goroutine attempts to write a resource to a buffered channel and channel&#39;s queue is full, the channel will lock the goroutine and make it wait until a buffer becomes available. If there is room in the queue, the write can take place immediately and the goroutine can move on. When a goroutine attempts to read from a buffered channel and the buffered channel&#39;s queue is empty, the channel will lock the goroutine and make it wait until a resource has been queued.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-GkVAtGeUzrs/UwIQ6AezJmI/AAAAAAAANYE/5XWpxN-zA3w/s1600/Screen+Shot+2014-02-17+at+8.38.15+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-GkVAtGeUzrs/UwIQ6AezJmI/AAAAAAAANYE/5XWpxN-zA3w/s1600/Screen+Shot+2014-02-17+at+8.38.15+AM.png&quot; height=&quot;202&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In the diagram above, we see an example of two goroutines adding and removing items from a buffered channel independently. In step 1, the goroutine on the right is removing a resource from the channel or performing a read. In step 2, the goroutine on the right can remove the resource independent of the goroutine on the left adding a new resource to the channel. In step 3, both goroutines are adding and removing a resource from the channel at the same time and in step 4 both goroutines are done.&lt;br /&gt;&lt;br /&gt;Synchronization still occurs within the interactions of reads and writes, however when the queue has buffer availability, the writes will not lock. Reads will not lock when there is something to read from the queue. Consequently, if the buffer is full or if there is nothing to retrieve, a buffered channel will behave very much like an unbuffered channel.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Relay Race&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;If you have ever watched a track meet you may have seen a relay race. In a relay race there are four athletes who run around the track as fast as they can as a team. The key to the race is that only one runner per team can be running at a time. The runner with the baton is the only one allowed to run, and the exchange of the baton from runner to runner is critical to winning the race.&lt;br /&gt;&lt;br /&gt;Let&#39;s build a sample program that uses four goroutines and a channel to simulate a relay race. The goroutines will be the runners in the race and the channel will be used to exchanged the baton between each runner. This is a classic example of how resources can be passed between goroutines and how a channel controls the behavior of the goroutines that interact with it.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;time&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Create an unbuffered channel&lt;br /&gt;&amp;nbsp; &amp;nbsp; baton := make(chan int)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // First runner to his mark&lt;br /&gt;&amp;nbsp; &amp;nbsp; go Runner(baton)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Start the race&lt;br /&gt;&amp;nbsp; &amp;nbsp; baton &amp;lt;- 1&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Give the runners time to race&lt;br /&gt;&amp;nbsp; &amp;nbsp; time.Sleep(500 * time.Millisecond)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func Runner(baton chan int) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; var newRunner int&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Wait to receive the baton&lt;br /&gt;&amp;nbsp; &amp;nbsp; runner := &amp;lt;-baton&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Start running around the track&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Runner %d Running With Baton\n&quot;, runner)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // New runner to the line&lt;br /&gt;&amp;nbsp; &amp;nbsp; if runner != 4 {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; newRunner = runner + 1&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Runner %d To The Line\n&quot;, newRunner)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go Runner(baton)&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Running around the track&lt;br /&gt;&amp;nbsp; &amp;nbsp; time.Sleep(100 * time.Millisecond)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Is the race over&lt;br /&gt;&amp;nbsp; &amp;nbsp; if runner == 4 {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Runner %d Finished, Race Over\n&quot;, runner)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Exchange the baton for the next runner&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Runner %d Exchange With Runner %d\n&quot;, runner, newRunner)&lt;br /&gt;&amp;nbsp; &amp;nbsp; baton &amp;lt;- newRunner&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;When we run the sample program we get the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Runner 1 Running With Baton&lt;br /&gt;Runner 2 To The Line&lt;br /&gt;Runner 1 Exchange With Runner 2&lt;br /&gt;Runner 2 Running With Baton&lt;br /&gt;Runner 3 To The Line&lt;br /&gt;Runner 2 Exchange With Runner 3&lt;br /&gt;Runner 3 Running With Baton&lt;br /&gt;Runner 4 To The Line&lt;br /&gt;Runner 3 Exchange With Runner 4&lt;br /&gt;Runner 4 Running With Baton&lt;br /&gt;Runner 4 Finished, Race Over &lt;/div&gt;&lt;br /&gt;The program starts out creating an unbuffered channel:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Create an unbuffered channel&lt;br /&gt;baton := make(chan int)&lt;/div&gt;&lt;br /&gt;Using an unbuffered channel forces the goroutines to be ready at the same time to make the exchange of the baton. This need for both goroutines to be ready creates the synchronization.&lt;br /&gt;&lt;br /&gt;If we look at the rest of the main function, we see a goroutine created for the first runner in the race and then the baton is handed off to that runner. The baton in this example is an integer value that is being passed between each runner. The sample is using a sleep to let the race complete before main terminates and ends the program:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Create an unbuffered channel&lt;br /&gt;baton := make(chan int)&lt;br /&gt;&lt;br /&gt;// First runner to his mark&lt;br /&gt;go Runner(baton)&lt;br /&gt;&lt;br /&gt;// Start the race&lt;br /&gt;baton &amp;lt;- 1&lt;br /&gt;&lt;br /&gt;// Give the runners time to race&lt;br /&gt;time.Sleep(500 * time.Millisecond) &lt;/div&gt;&lt;br /&gt;If we just focus on the core parts of the Runner function, we can see how the baton exchange takes place until the race is over. The Runner function is launched as a goroutine for each runner in the race. Every time a new goroutine is launched, the channel is passed into the goroutine. The channel is the conduit for the exchange, so the current runner and the one waiting to go next need to reference the channel:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func Runner(baton chan int)&lt;/div&gt;&lt;br /&gt;The first thing each runner does is wait for the baton exchange. That is simulated with the read on the channel. The read immediately locks the goroutine until the baton is written to the channel. Once the baton is written to the channel, the read will release and the goroutine will simulate the next runner sprinting down the track. If the fourth runner is running, no new runner will enter the race. If we are still in the middle of the race, a new goroutine for the next runner is launched.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Wait to receive the baton&lt;br /&gt;runner := &amp;lt;-baton&lt;br /&gt;&lt;br /&gt;// New runner to the line&lt;br /&gt;if runner != 4 {&lt;br /&gt;&amp;nbsp; &amp;nbsp; newRunner = runner + 1&lt;br /&gt;&amp;nbsp; &amp;nbsp; go Runner(baton)&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;Then we sleep to simulate some time it takes for the runner to run around the track. If this is the fourth runner, the goroutine terminates after the sleep and the race is complete. If not, the baton exchange takes place with the write to the channel. There is a goroutine already locked and waiting for this exchange. As soon as the baton is written to the channel, the exchange is made and the race continue:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Running around the track&lt;br /&gt;time.Sleep(100 * time.Millisecond)&lt;br /&gt;&lt;br /&gt;// Is the race over&lt;br /&gt;if runner == 4 {&lt;br /&gt;&amp;nbsp; &amp;nbsp; return&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Exchange the baton for the next runner&lt;br /&gt;baton &amp;lt;- newRunner&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The example showcases a real world event, a relay race between runners, being implemented in a way that mimics the actual events. This is one of the beautiful things about channels. The code flows in a way that simulates how these types of exchanges can happen in the real world.&lt;br /&gt;&lt;br /&gt;Now that we have an understanding of the nature of unbuffered and buffered channels, we can look at different concurrency patterns we can implement using channels. Concurrency patterns allow us to implement more complex exchanges between goroutines that simulate real world computing problems like semaphores, generators and multiplexers.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/4469444733656318355/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/02/the-nature-of-channels-in-go.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4469444733656318355'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4469444733656318355'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/02/the-nature-of-channels-in-go.html' title='The Nature Of Channels In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-vnJIWvlbP-E/UwDVICJKB9I/AAAAAAAANX0/T04V_58i8Vs/s72-c/Screen+Shot+2014-02-16+at+10.10.54+AM.png" height="72" width="72"/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-6392567019291607235</id><published>2014-01-29T21:55:00.000-05:00</published><updated>2014-07-19T07:25:25.189-04:00</updated><title type='text'>Concurrency, Goroutines and GOMAXPROCS</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;When new people join the &lt;a href=&quot;http://www.meetup.com/Go-Miami/&quot; target=&quot;_blank&quot;&gt;Go-Miami&lt;/a&gt; group they always write that they want to learn more about Go&#39;s concurrency model. Concurrency seems to be the big buzz word around the language. It was for me when I first started hearing about Go. It was Rob Pike&#39;s &lt;a href=&quot;http://www.youtube.com/watch?v=f6kdp27TYZs&quot; target=&quot;_blank&quot;&gt;Go Concurrency Patterns&lt;/a&gt; video that finally convinced me I needed to learn this language.&lt;br /&gt;&lt;br /&gt;To understand how Go makes writing concurrent programs easier and less prone to errors, we first need to understand what a concurrent program is and the problems that result from such programs. I will not be talking about CSP (Communicating Sequential Processes) in this post, which is the basis for Go&#39;s implementation of channels. This post will focus on what a concurrent program is, the role that goroutines play and how the GOMAXPROCS environment variable and runtime function affects the behavior of the Go runtime and the programs we write.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Processes and Threads&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;When we run an application, like the browser I am using to write this post, a process is created by the operating system for the application. The job of the process is to act like a container for all the resources the application uses and maintains as it runs. These resources include things like a memory address space, handles to files, devices and threads.&lt;br /&gt;&lt;br /&gt;A thread is a path of execution that is scheduled by the operating system to execute the code we write in our functions against a processor. A process starts out with one thread, the main thread, and when that thread terminates the process terminates. This is because the main thread is the origin for the application. The main thread can then in turn launch more threads and those threads can launch even more threads.&lt;br /&gt;&lt;br /&gt;The operating system schedules a thread to run on an available processor regardless of which process the thread belongs to. Each operating system has its own algorithms that make these decisions and it is best for us to write concurrent programs that are not specific to one algorithm or the other. Plus these algorithms change with every new release of an operating system, so it is dangerous game to play.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Goroutines and Parallelism&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Any function or method in Go can be created as a goroutine. We can consider that the&amp;nbsp;main function is executing as a goroutine, however the Go runtime does not start that goroutine. Goroutines are considered to be lightweight because they use little memory and resources plus their initial stack size is small. Prior to version 1.2 the stack size started at 4K and now it starts at 8K. The stack has the ability to grow and shrink as needed.&lt;br /&gt;&lt;br /&gt;The operating system schedules threads to run against available processors and the Go runtime schedules goroutines to run within a &lt;a href=&quot;http://morsmachine.dk/go-scheduler&quot; target=&quot;_blank&quot;&gt;context&lt;/a&gt; that is bound to a single operating system thread. By default, the Go runtime allocates a single context to execute all the goroutines that are created for our program. Even with this single context and thread, hundreds of thousands of goroutines can be scheduled to run concurrently with amazing efficiency and performance. It is not recommended to add more that one context, but if you want to run goroutines in parallel, Go provides the ability to add more via the GOMAXPROCS environment variable or runtime function.&lt;br /&gt;&lt;br /&gt;Concurrency is not Parallelism. Parallelism is when two or more threads are executing code simultaneously against different processors. If you configure the runtime to use more than one context, the scheduler will distribute goroutines between these contexts which will result in goroutines running on different threads. However, to have true parallelism you need to run your program on a machine with multiple processors. If not, then the goroutines will be running concurrently against a single processor, even though the Go runtime is using multiple threads.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Concurrency Example&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;Let&#39;s build a small program that shows Go running goroutines concurrently. In this example we are using the default setting of running with one context:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;sync&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; var wg sync.WaitGroup&lt;br /&gt;&amp;nbsp; &amp;nbsp; wg.Add(2)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;Starting Go Routines&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;go&lt;/b&gt; func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defer wg.Done()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for char := &#39;a&#39;; char &amp;lt; &#39;a&#39;+26; char++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%c &quot;, char)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;go&lt;/b&gt; func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defer wg.Done()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for number := 1; number &amp;lt; 27; number++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%d &quot;, number)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;Waiting To Finish&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; wg.Wait()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;\nTerminating Program&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;This program launches two goroutines by using the keyword &lt;i&gt;go&lt;/i&gt;&amp;nbsp;and declaring two anonymous functions. The first goroutine displays the english alphabet using lowercase letters and the second goroutine displays numbers 1 through 26. When we run this program we get the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Starting Go Routines&lt;br /&gt;Waiting To Finish&lt;br /&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 10 11&lt;br /&gt;12 13 14 15 16 17 18 19 20 21 22 23 24 25 26&lt;br /&gt;Terminating Program&lt;/div&gt;&lt;br /&gt;When we look at the output we can see that the code was run concurrently. Once the two goroutines are launched, the main goroutine waits for the goroutines to complete. We need to do this because once the main goroutine terminates, the program terminates. Using a &lt;i&gt;WaitGroup&lt;/i&gt; is a great way for goroutines to communicate when they are done.&lt;br /&gt;&lt;br /&gt;We can see that the first goroutine completes displaying all 26 letters and then the second goroutine gets a turn to display all 26 numbers. Because it takes less than a microsecond for the first goroutine to complete its work, we don&#39;t see the scheduler interrupt the first goroutine before it finishes its work. We can give a reason to the scheduler to swap the goroutines by putting a sleep into the first goroutine:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;sync&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;time&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; var wg sync.WaitGroup&lt;br /&gt;&amp;nbsp; &amp;nbsp; wg.Add(2)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;Starting Go Routines&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; go func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defer wg.Done()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;time.Sleep(1 * time.Microsecond)&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for char := &#39;a&#39;; char &amp;lt; &#39;a&#39;+26; char++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%c &quot;, char)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; go func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defer wg.Done()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for number := 1; number &amp;lt; 27; number++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%d &quot;, number)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;Waiting To Finish&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; wg.Wait()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;\nTerminating Program&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;This time we add a microsecond of sleep in the first goroutine as soon as it starts. This is enough to cause the scheduler to swap the two goroutines:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Starting Go Routines&lt;br /&gt;Waiting To Finish&lt;br /&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a&lt;br /&gt;b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br /&gt;Terminating Program&lt;/div&gt;&lt;br /&gt;This time the numbers display first and then the letters. A microsecond of sleep is enough to cause the scheduler to stop running the first goroutine and let the second goroutine do its thing.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Parallel Example&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;In our past two examples the goroutines were running concurrently, but not in parallel. Let&#39;s make a change to the code to allow the goroutines to run in parallel. All we need to do is add a second context to the scheduler to use two threads:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;runtime&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;sync&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;runtime.GOMAXPROCS(2)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; var wg sync.WaitGroup&lt;br /&gt;&amp;nbsp; &amp;nbsp; wg.Add(2)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;Starting Go Routines&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;go&lt;/b&gt; func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defer wg.Done()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for char := &#39;a&#39;; char &amp;lt; &#39;a&#39;+26; char++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%c &quot;, char)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;go&lt;/b&gt; func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defer wg.Done()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for number := 1; number &amp;lt; 27; number++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%d &quot;, number)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;Waiting To Finish&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; wg.Wait()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Println(&quot;\nTerminating Program&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Here is the output for the program:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Starting Go Routines&lt;br /&gt;Waiting To Finish&lt;br /&gt;a b 1 2 3 4 c d e f 5 g h 6 i 7 j 8 k 9 10 11 12 l m n o p q 13 r s 14&lt;br /&gt;t 15 u v 16 w 17 x y 18 z 19 20 21 22 23 24 25 26&lt;br /&gt;Terminating Program &lt;/div&gt;&lt;br /&gt;Every time we run the program we are going to get different results. The scheduler does not behave exactly the same for each and every run. We can see that the goroutines are truly running in parallel. Both goroutines start running immediately and you can see them both competing for standard out to display their results.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Just because we can add multiple contexts for the scheduler to use doesn&#39;t mean we should. There is a reason the Go team has set the defaults to the runtime the way they did. Especially the default for only using a single context. Just know that arbitrarily adding contexts and running goroutines in parallel will not necessarily provide better performance for your programs. Always &lt;a href=&quot;http://blog.golang.org/profiling-go-programs&quot; target=&quot;_blank&quot;&gt;profile&lt;/a&gt; and benchmark your programs and make sure the Go runtime configuration is only changed if absolutely required.&lt;br /&gt;&lt;br /&gt;The problem with building concurrency into our applications is eventually our goroutines are going to attempt to access the same resources, possibly at the same time. Read and write operations against a shared resource must always be atomic. In other words reads and writes must happen by one goroutine at a time or else we create race conditions in our programs. To learn more about &lt;a href=&quot;http://www.goinggo.net/2013/09/detecting-race-conditions-with-go.html&quot; target=&quot;_blank&quot;&gt;race conditions&lt;/a&gt; read my post.&lt;br /&gt;&lt;br /&gt;Channels are the way in Go we write safe and elegant concurrent programs that eliminate race conditions and make writing concurrent programs fun again. Now that we know how goroutines work, are scheduled and can be made to run in parallel, channels are the next thing we need to learn.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/6392567019291607235/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/6392567019291607235'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/6392567019291607235'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html' title='Concurrency, Goroutines and GOMAXPROCS'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-1319131010712056921</id><published>2014-01-21T21:24:00.000-05:00</published><updated>2014-01-21T21:24:44.136-05:00</updated><title type='text'>Decode JSON Documents In Go</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;We are working on a project where we have to make calls into a web service. Many of the web calls return very large documents that contain many sub-documents. The worst part is, we usually only need a handful of the fields for any given document and those fields tend to be scattered all over the place.&lt;br /&gt;&lt;br /&gt;Here is a sample of a smaller document:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var document string = `{&lt;br /&gt;&quot;userContext&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;conversationCredentials&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;sessionToken&quot;: &quot;06142010_1:75bf6a413327dd71ebe8f3f30c5a4210a9b11e93c028d6e11abfca7ff&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;valid&quot;: true,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;isPasswordExpired&quot;: false,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;cobrandId&quot;: 10000004,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;channelId&quot;: -1,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;locale&quot;: &quot;en_US&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;tncVersion&quot;: 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;applicationId&quot;: &quot;17CBE222A42161A3FF450E47CF4C1A00&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;cobrandConversationCredentials&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;sessionToken&quot;: &quot;06142010_1:b8d011fefbab8bf1753391b074ffedf9578612d676ed2b7f073b5785b&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;preferenceInfo&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;currencyCode&quot;: &quot;USD&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;timeZone&quot;: &quot;PST&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;dateFormat&quot;: &quot;MM/dd/yyyy&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;currencyNotationType&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;currencyNotationType&quot;: &quot;SYMBOL&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;numberFormat&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;decimalSeparator&quot;: &quot;.&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;groupingSeparator&quot;: &quot;,&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;groupPattern&quot;: &quot;###,##0.##&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;br /&gt;},&lt;br /&gt;&quot;lastLoginTime&quot;: 1375686841,&lt;br /&gt;&quot;loginCount&quot;: 299,&lt;br /&gt;&quot;passwordRecovered&quot;: false,&lt;br /&gt;&quot;emailAddress&quot;: &quot;johndoe@email.com&quot;,&lt;br /&gt;&quot;loginName&quot;: &quot;sptest1&quot;,&lt;br /&gt;&quot;userId&quot;: 10483860,&lt;br /&gt;&quot;userType&quot;: {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;userTypeId&quot;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;userTypeName&quot;: &quot;normal_user&quot;&lt;br /&gt;}&lt;br /&gt;}`&lt;/div&gt;&lt;br /&gt;It is not scalable for us to create all the structs and embedded structs to unmarshal the different JSON documents using json.Unmarshal and working directly with a map was out of the question. What we needed was a way to decode these JSON documents into structs that just contained the fields we needed, regardless where those fields lived in the JSON document.&lt;br /&gt;&lt;br /&gt;Luckily we came a across a package by &lt;a href=&quot;https://github.com/mitchellh&quot; target=&quot;_blank&quot;&gt;Mitchell Hashimoto&lt;/a&gt; called &lt;a href=&quot;https://github.com/goinggo/mapstructure&quot; target=&quot;_blank&quot;&gt;mapstructure&lt;/a&gt;&amp;nbsp;and we forked it. This package is able to take a JSON document that is already unmarshaled into a map and decode that into a struct. Unfortunately, you still needed to create all the embedded structs if you wanted the data at the different levels. So I studied the code and build some functionality on top that allowed us do what we needed.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;DecodePath&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The first function we added is called DecodePath. This allows us to specify the fields and sub-documents we want from the JSON document and store them into the structs we need. Let&#39;s start with a small example using the JSON document above:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type UserType struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; UserTypeId   int&lt;br /&gt;&amp;nbsp; &amp;nbsp; UserTypeName string&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;type User struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Session &amp;nbsp; string &amp;nbsp; `jpath:&quot;userContext.cobrandConversationCredentials.sessionToken&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; CobrandId    int &amp;nbsp; &amp;nbsp; &amp;nbsp;`jpath:&quot;userContext.cobrandId&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; UserType &amp;nbsp;UserType `jpath:&quot;userType&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; LoginName    string &amp;nbsp; `jpath:&quot;loginName&quot;`&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;docScript := []byte(document)&lt;br /&gt;docMap := map[string]interface{}{}&lt;br /&gt;json.Unmarshal(docScript, &amp;amp;docMap)&lt;br /&gt;&lt;br /&gt;user := User{}&lt;br /&gt;DecodePath(docMap, &amp;amp;user)&lt;br /&gt;&lt;br /&gt;fmt.Printf(&quot;%#v&quot;, user) &lt;/div&gt;&lt;br /&gt;If we run this program we get the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;mapstructure.User{&lt;br /&gt;&amp;nbsp; &amp;nbsp; Session:&quot;06142010_1:b8d011fefbab8bf1753391b074ffedf9578612d676ed2b7f073b5785b&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; CobrandId:10000004,&lt;br /&gt;&amp;nbsp; &amp;nbsp; UserType:mapstructure.UserType{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; UserTypeId:1,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; UserTypeName:&quot;normal_user&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; LoginName:&quot;sptest1&quot;&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The &quot;jpath&quot; tag is used to find the map keys and set the values into the struct. The User struct contains fields from three different layers of the JSON document. We only needed to define two structs to pull the data out of the map we needed.&lt;br /&gt;&lt;br /&gt;We can also map entire structs the same way a normal unmarshal would work. Just name the fields in the struct to match the field names in the JSON document. The names of the fields in the struct don&#39;t need to be in the same case as the fields in the JSON document.&lt;br /&gt;&lt;br /&gt;Here is a more complicated example using an anonymous field in our struct:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type NumberFormat struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; DecimalSeparator &amp;nbsp;string `jpath:&quot;userContext.preferenceInfo.numberFormat.decimalSeparator&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; GroupingSeparator string `jpath:&quot;userContext.preferenceInfo.numberFormat.groupingSeparator&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; GroupPattern &amp;nbsp; &amp;nbsp; &amp;nbsp;string `jpath:&quot;userContext.preferenceInfo.numberFormat.groupPattern&quot;`&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;type User struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; LoginName string `jpath:&quot;loginName&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; NumberFormat&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;docScript := []byte(document)&lt;br /&gt;docMap := map[string]interface{}{}&lt;br /&gt;json.Unmarshal(docScript, &amp;amp;docMap)&lt;br /&gt;&lt;br /&gt;user := User{}&lt;br /&gt;DecodePath(docMap, &amp;amp;user)&lt;br /&gt;&lt;br /&gt;fmt.Printf(&quot;%#v&quot;, user) &lt;/div&gt;&lt;br /&gt;If we run this program we get the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;mapstructure.User{&lt;br /&gt;&amp;nbsp; &amp;nbsp; LoginName:&quot;sptest1&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; NumberFormat:mapstructure.NumberFormat{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; DecimalSeparator:&quot;.&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; GroupingSeparator:&quot;,&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; GroupPattern:&quot;###,##0.##&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;We can also use an anonymous&amp;nbsp;field pointer:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type User struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; LoginName string `jpath:&quot;loginName&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; *NumberFormat&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;In this case DecodePath will instantiate an object of that type and perform the decode, but only if a mapping can be found.&lt;br /&gt;&lt;br /&gt;We now have great control over decoding JSON documents into structs. What happens when the JSON you get back is an array of documents?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;DecodeSlicePath&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;There are times when the web api returns an array of JSON documents:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var document = `[{&quot;name&quot;:&quot;bill&quot;},{&quot;name&quot;:&quot;lisa&quot;}]` &lt;/div&gt;&lt;br /&gt;In this case we need to decode the slice of maps into a slice of objects. We added another function called DecodeSlicePath that does just that:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type NameDoc struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Name string `jpath:&quot;name&quot;`&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;sliceScript := []byte(document)&lt;br /&gt;sliceMap := []map[string]interface{}{}&lt;br /&gt;json.Unmarshal(sliceScript, &amp;amp;sliceMap)&lt;br /&gt;&lt;br /&gt;var myslice []NameDoc&lt;br /&gt;DecodeSlicePath(sliceMap, &amp;amp;myslice)&lt;br /&gt;&lt;br /&gt;fmt.Printf(&quot;%#v&quot;, myslice) &lt;/div&gt;&lt;br /&gt;Here is the output: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;[]mapstructure.NameDoc{&lt;br /&gt;&amp;nbsp; &amp;nbsp; mapstructure.NameDoc{Name:&quot;bill&quot;},&lt;br /&gt;&amp;nbsp; &amp;nbsp; mapstructure.NameDoc{Name:&quot;lisa&quot;}&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The function DecodeSlicePath creates the slice based on the length of the map and then decodes each JSON document, one at a time. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;If it were not for Mitchell I would not have been able to get this to work. His package is brilliant and handles all the real technical issues around decoding maps into structs. The two functions I have built on top of mapstructure provides a nice convenience factor we needed for our project. If you&#39;re dealing with some of the same issue, please try out the package.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/1319131010712056921/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/01/decode-json-documents-in-go.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/1319131010712056921'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/1319131010712056921'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/01/decode-json-documents-in-go.html' title='Decode JSON Documents In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-2436560613180939967</id><published>2014-01-16T19:20:00.000-05:00</published><updated>2014-01-22T13:39:57.457-05:00</updated><title type='text'>Be Selected To Attend GopherCon 2014</title><content type='html'>Gopher Academy &lt;a href=&quot;http://blog.gopheracademy.com/scholarship-for-women&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; a great program today.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Today I&#39;d like to announce the GopherCon Scholarship Program. It&#39;s goal is to increase the visibility of women in the Go community through the most direct path I can imagine: sponsoring their attendance to GopherCon 2014.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;The program works by you purchasing one of these special tickets. There will be a selection/nomination process and those woman selected will be able to attend GopherCon thanks to you. It is designed to make GopherCon the most inclusive and welcoming place for all people to get together and learn about Go based technologies.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.outcast.io/&quot; target=&quot;_blank&quot;&gt;OutCast.io&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&quot;http://www.ardanstudios.com/&quot; target=&quot;_blank&quot;&gt;Ardan Studios&lt;/a&gt;&amp;nbsp;recognizes the need to find ways to engage more women and girls to become technology creators. We have daughters that we would love to see have more opportunity. There is a great organization called &lt;a href=&quot;http://www.chicktech.org/&quot; target=&quot;_blank&quot;&gt;ChickTech&lt;/a&gt;. They are leading the way in creating local programs to get more women and girls involved in technology. ChickTech is dedicated to:&lt;br /&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&quot;&lt;i style=&quot;font-weight: bold;&quot;&gt;retaining women in the technology workforce and increasing the number of women and girls pursuing technology-based careers.&quot;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;If you&#39;re interested, ChickTech is always looking for local mentors and volunteers. They have a way for you to make a difference that fits your schedule and interests. This is a chance for you to give back to the woman and girls in your life, it just takes an email to get started.&lt;br /&gt;&lt;br /&gt;We really&amp;nbsp;want to help and do something special. I will be speaking at &lt;a href=&quot;http://www.gophercon.com/&quot; target=&quot;_blank&quot;&gt;GopherCon 2014&lt;/a&gt; in Denver this April and speakers get their flight and hotel room for free. We wanted to give that to some deserving woman who is passionate about technology and otherwise would not be able to attend the conference.&lt;br /&gt;&lt;br /&gt;If you&#39;re interested in receiving this free trip to GopherCon or want to nominate someone you know, write a post about yourself or that person and why you/they would like to attend GopherCon. You can also write a post about something cool you are doing with Go. Write your post in Google Docs and share it with me at bill@thekennedyclan.net. GoingGo.net will publish your post and we, with the GopherCon team, will select a winner on February 15th.﻿&lt;br /&gt;&lt;br /&gt;We hope to get a great response and are very excited that we can be involved in this great scholarship program. It is important to get more women and girls active in technology and this is a great way to start.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/2436560613180939967/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/01/gophercon-2014-scholarship-for-women.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/2436560613180939967'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/2436560613180939967'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/01/gophercon-2014-scholarship-for-women.html' title='Be Selected To Attend GopherCon 2014'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-485932027969196416</id><published>2014-01-16T11:15:00.000-05:00</published><updated>2014-01-17T09:07:10.825-05:00</updated><title type='text'>Go Package Management For 2014</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;In October 2013 I sent out a call to action to the Go community. I wanted to form a group of Gophers that would come together and help write a specification and build a working implementation of a package management tool. We are not there yet, but the group did accomplish a few things:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;We started a mailing list called &lt;a href=&quot;https://groups.google.com/forum/#!forum/go-package-management&quot; target=&quot;_blank&quot;&gt;Go package management&lt;/a&gt; [go-pm] where people could discuss ideas and get feedback on existing and new tools.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;We wrote a &lt;a href=&quot;https://docs.google.com/document/d/1k-3mwBqAdTIKGcilWZPuKSMy3DWtfNRFDs9o98lcwHY&quot; target=&quot;_blank&quot;&gt;goals document&lt;/a&gt; that outlined what we wanted to accomplish along with guidelines and help for package management tool authors.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;We identified and categorized the existing set of tools that are available for use.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;We developed a set of user stories that describe the different scenarios people were facing.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;We started a list of packages that tool developers can use to test their tools against.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;We helped some of the tool developers find and fix bugs.&lt;/li&gt;&lt;/ul&gt;Overall I think the last 3 months have been productive and I am pleased with the results.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Building Tools&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;I have come to appreciate that there isn&#39;t going to be a silver bullet or a one tool fits all solution. I believe a majority of the use-cases that have been defined in the &lt;a href=&quot;https://docs.google.com/document/d/1k-3mwBqAdTIKGcilWZPuKSMy3DWtfNRFDs9o98lcwHY&quot; target=&quot;_blank&quot;&gt;goals document&lt;/a&gt; can be solved and building tools to handle these use-cases is worth the time and effort. If you&#39;re thinking about building a tool, please consider these guidelines which are outlined in the goals document: &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Work with the Go language as defined in the Go 1 spec of March 28, 2012.&lt;/b&gt;&lt;br /&gt;Don’t implement solutions that require feature changes or build tools that change the way Go works.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Provide backwards compatibility with go get and the convention of using VCS repositories in the import paths.&lt;/b&gt;&lt;br /&gt;The existing set of programs, build processes and workflows can’t break. You must respect the existing environments and allow them to continue to function.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Prevent version skewing.&lt;/b&gt;&lt;br /&gt;Don’t build into the solution the potential for version skewing to occur. Such as requiring semantic versioning in the import path urls. Imports should not need to be changed to access the latest or different versions of a package.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Work on all operating systems and architectures that Go currently supports.&lt;/b&gt;&lt;br /&gt;One of the great things about Go is that programs can be built on all these different operating systems and architectures. Your tool should not exclude a platform or make use of a specific operating system construct like symlinks.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Interoperate in such a way that ‘go get’ continues to work for package authors who do not wish to participate, or for existing Go source code that cannot be changed. Also, do not force package authors to choose between making their code go getable or using the proposed solution.&lt;/b&gt;&lt;br /&gt;No one should be required to use a tool in order to share or import a repository. The tooling must continue to work for everyone.&lt;br /&gt;&lt;br /&gt;All these guidelines are important because they will allow others to try and use your tools without the need to refactor any existing code. They also guarantee that existing projects continue to build and install with the Go tooling on all platforms. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Choices&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;I would love to see the community rally around a few tools and help improve them. There are two classes of tools that I think work well with Go, Vendoring and Revision Locking. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Vendoring&lt;/b&gt; takes the 3rd party source code that is referenced in your project and makes a copy of that code inside a new folder within the project. All the code your project needs is inside the one project repository. Vendoring also provides a performance enhancement on getting the code because only one url call is required.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Revision Locking&lt;/b&gt; creates a dependency file that references specific commits in the different version control systems the code is located in. Just like vendoring, the RL tool is used to get, build and install your project. One advantage is that your project repository continues to only contain the specific project code.&lt;br /&gt;&lt;br /&gt;Choosing how to handle package management it is a matter of personal preference. The Go team recommends vendoring, which can be found in the Go &lt;a href=&quot;http://golang.org/doc/faq#get_version&quot; target=&quot;_blank&quot;&gt;FAQ&lt;/a&gt;. They mention Keith Rarick&#39;s tool &lt;a href=&quot;https://github.com/kr/goven&quot; target=&quot;_blank&quot;&gt;goven&lt;/a&gt; as an option. Keith has abandoned** goven for his other tool &lt;a href=&quot;https://github.com/kr/godep&quot; target=&quot;_blank&quot;&gt;godep&lt;/a&gt;, which provides both vendoring and revision locking. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;** After talking with Keith he has stated that he has not totally abandoned goven, it is just &quot;finished&quot;. He continues to maintain the package and merge bug fixes when necessary.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;New Call To Action&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;For 2014 I would like to see the Go community play a greater role in helping the package management tool authors. There are several ways I think this can be done: &lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;color: black;&quot;&gt;Participate in the &lt;a href=&quot;https://groups.google.com/forum/#!forum/go-package-management&quot; target=&quot;_blank&quot;&gt;go-pm group&lt;/a&gt;. Give advice and help to those who have questions.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;Submit packages that the tool authors can use to help test their tools.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;Report bugs and feature requests.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;Continue to add user stories that are missing in the goals document.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;Submit your new tools and ideas to the go-pm group.&lt;/li&gt;&lt;li style=&quot;color: black;&quot;&gt;Work with the existing tool authors to improve the tools that we have today.&lt;/li&gt;&lt;/ul&gt;I hope to see all of you participating in the go-pm mailing list this year. I love Go and only want to see it improve for everyone.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/485932027969196416/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2014/01/go-package-management-for-2014.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/485932027969196416'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/485932027969196416'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2014/01/go-package-management-for-2014.html' title='Go Package Management For 2014'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-557198743267416805</id><published>2013-12-31T19:39:00.000-05:00</published><updated>2013-12-31T19:39:25.139-05:00</updated><title type='text'>Macro View of Map Internals In Go</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;There are lots of posts that talk about the internals of slices, but when it comes to maps, we are left in the dark. I was wondering why and then I found the code for maps and it all made sense.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://golang.org/src/pkg/runtime/hashmap.c&quot; target=&quot;_blank&quot;&gt;http://golang.org/src/pkg/runtime/hashmap.c&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;At least for me, this code is complicated. That being said, I think we can create a macro view of how maps are structured and grow. This should explain why they are unordered, efficient and fast.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Creating and Using Maps&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Let&#39;s look at how we can use a map literal to create a map and store a few values:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;// Create an empty map with a key and value of type string&lt;br /&gt;colors := map[string]string{}&lt;br /&gt;&lt;br /&gt;// Add a few keys/value pairs to the map&lt;br /&gt;colors[&quot;AliceBlue&quot;] = &quot;#F0F8FF&quot;&lt;br /&gt;colors[&quot;Coral&quot;] &amp;nbsp; &amp;nbsp; = &quot;#FF7F50&quot;&lt;br /&gt;colors[&quot;DarkGray&quot;] &amp;nbsp;= &quot;#A9A9A9&quot; &lt;/div&gt;&lt;br /&gt;When we add values to a map, we always specify a key that is associated with the value. This key is used to find this value again without the need to iterate through the entire collection:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;fmt.Printf(&quot;Value: %s&quot;, colors[&quot;Coral&quot;])&lt;/div&gt;&lt;br /&gt;If we do iterate through the map, we will not necessarily get the keys back in the same order. In fact, every time you run the code, the order could change:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;colors := map[string]string{}&lt;br /&gt;colors[&quot;AliceBlue&quot;] &amp;nbsp; = &quot;#F0F8FF&quot;&lt;br /&gt;colors[&quot;Coral&quot;] &amp;nbsp; &amp;nbsp; &amp;nbsp; = &quot;#FF7F50&quot;&lt;br /&gt;colors[&quot;DarkGray&quot;] &amp;nbsp; &amp;nbsp;= &quot;#A9A9A9&quot;&lt;br /&gt;colors[&quot;ForestGreen&quot;] = &quot;#228B22&quot;&lt;br /&gt;colors[&quot;Indigo&quot;] &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;#4B0082&quot;&lt;br /&gt;colors[&quot;Lime&quot;] &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;#00FF00&quot;&lt;br /&gt;colors[&quot;Navy&quot;] &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;#000080&quot;&lt;br /&gt;colors[&quot;Orchid&quot;] &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;#DA70D6&quot;&lt;br /&gt;colors[&quot;Salmon&quot;] &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;#FA8072&quot;&lt;br /&gt;&lt;br /&gt;for key, value := range colors {&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%s:%s, &quot;, key, value)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Output:&lt;br /&gt;AliceBlue:#F0F8FF, DarkGray:#A9A9A9, Indigo:#4B0082, Coral:#FF7F50,&lt;br /&gt;ForestGreen:#228B22, Lime:#00FF00, Navy:#000080, Orchid:#DA70D6,&lt;br /&gt;Salmon:#FA8072&lt;/div&gt;&lt;br /&gt;Now that we know how to create, set key/value pairs and iterate over a map, we can peek under the hood.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;How Maps Are Structured&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Maps in Go are implemented as a hash table. If you need to learn what a hash table is, there are lots of articles and posts about the subject. This is the Wikipedia page to get you started:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Hash_table&quot; target=&quot;_blank&quot;&gt;http://en.wikipedia.org/wiki/Hash_table&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The hash table for a Go map is structured as an array of buckets. The number of buckets is always equal to a power of 2. When a map operation is performed, such as (&lt;b&gt;colors[&quot;Black&quot;] = &quot;#000000&quot;)&lt;/b&gt;, a hash key is generated against the key that is specified. In this case the string &quot;Black&quot; is used to generate the hash key. The&amp;nbsp;low order bits (LOB) of the generated hash key is used to select a bucket.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-oViOhYEG52M/UsNU778YUcI/AAAAAAAANR4/OKxPPhQwmDo/s1600/Screen+Shot+2013-12-31+at+6.35.43+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://1.bp.blogspot.com/-oViOhYEG52M/UsNU778YUcI/AAAAAAAANR4/OKxPPhQwmDo/s640/Screen+Shot+2013-12-31+at+6.35.43+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;Once a bucket is selected, the key/value pair needs to be stored, removed or looked up, depending on the type of operation. If we look inside any bucket, we will find two data structures. First, there is an array with the top 8 high order bits (HOB) from the same hash key that was used to select the bucket. This array distinguishes each individual key/value pair stored in the respective bucket. Second, there is an array of bytes that store the key/value pairs. The byte array packs all the keys and then all the values together for the respective bucket.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-Cod-uUUJfyM/UsNa36ufFeI/AAAAAAAANSU/k-a3-k7594g/s1600/Screen+Shot+2013-12-31+at+7.01.15+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;416&quot; src=&quot;http://3.bp.blogspot.com/-Cod-uUUJfyM/UsNa36ufFeI/AAAAAAAANSU/k-a3-k7594g/s640/Screen+Shot+2013-12-31+at+7.01.15+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;When we are iterating through a map, the iterator walks through the array of buckets and then return the key/value pairs in the order they are laid out in the byte array. This is why maps are unsorted collections. The hash keys determines the walk order of the map because they determine which buckets each key/value pair will end up in.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Memory and Bucket Overflow&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;There is a reason the key/value pairs are packed like this in a single byte array. If the keys and values were stored like key/value/key/value, padding allocations between each key/value pair would be needed to maintain proper alignment boundaries. An example where this would apply is with a map that looks like this:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;map[int64]int8 &lt;/div&gt;&lt;br /&gt;The 1 byte value in this map would result in 7 extra bytes of padding per key/value pair.&amp;nbsp;By packing the&amp;nbsp;key/value pairs as key/key/value/value, the padding only has to be appended to the end of the byte array and not in between.&amp;nbsp;Eliminating the padding bytes saves the bucket and the map a good amount of memory. To learn more about alignment boundaries, read this post:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/07/understanding-type-in-go.html&quot; target=&quot;_blank&quot;&gt;http://www.goinggo.net/2013/07/understanding-type-in-go.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;A bucket is configured to store only 8 key/value pairs. If a ninth key needs to be added to a bucket that is full, an overflow bucket is created and reference from inside the respective bucket.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-DgyZ53dIqxo/UsNdawR9PsI/AAAAAAAANSg/tiMNkkr6vxU/s1600/Screen+Shot+2013-12-31+at+7.12.06+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;202&quot; src=&quot;http://3.bp.blogspot.com/-DgyZ53dIqxo/UsNdawR9PsI/AAAAAAAANSg/tiMNkkr6vxU/s640/Screen+Shot+2013-12-31+at+7.12.06+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;How Maps Grow&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;As we continue to add or remove key/value pairs from the map, the efficiency of the map lookups begin to deteriorate. The load threshold values that determine when to grow the hash table are based on these four factors:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;% overflow &amp;nbsp;: Percentage of buckets which have an overflow bucket&lt;br /&gt;bytes/entry :&amp;nbsp;Number of overhead bytes used per key/value pair&lt;br /&gt;hitprobe &amp;nbsp; &amp;nbsp;:&amp;nbsp;Number of entries that need to be checked when looking up a key&lt;br /&gt;missprobe &amp;nbsp; :&amp;nbsp;Number of entries that need to be checked when looking up an absent key &lt;/div&gt;&lt;br /&gt;Currently, the code uses the following load threshold values:&lt;br /&gt;&lt;br /&gt;&lt;table border=&quot;1&quot; cellpadding=&quot;5&quot; style=&quot;width: 100%;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;LOAD&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;%overflow&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;bytes/entry&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;hitprobe&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;missprobe&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6.50&lt;/td&gt;&lt;td&gt;20.90&lt;/td&gt;&lt;td&gt;10.79&lt;/td&gt;&lt;td&gt;4.25&lt;/td&gt;&lt;td&gt;6.50&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Growing the hash table starts with assigning a pointer called the &quot;old bucket&quot; pointer to the current bucket array. Then a new bucket array is allocated to hold twice the number of existing buckets. This could result in large allocations, but the memory is not initialized so the allocation is fast.&lt;br /&gt;&lt;br /&gt;Once the memory for the new bucket array is available, the key/value pairs from the old bucket array can be moved or &quot;evacuated&quot; to the new bucket array. Evacuations happen as key/value pairs are added or removed from the map. The key/value pairs that are together in an old bucket could be moved to different buckets inside the new bucket array. The evacuation algorithm attempts to distribute the key/value pairs evenly across the new bucket array.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-FcohbDEo8PI/UsNf35ZiDZI/AAAAAAAANSs/XBN_wbBlsYs/s1600/Screen+Shot+2013-12-31+at+7.22.39+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;250&quot; src=&quot;http://2.bp.blogspot.com/-FcohbDEo8PI/UsNf35ZiDZI/AAAAAAAANSs/XBN_wbBlsYs/s640/Screen+Shot+2013-12-31+at+7.22.39+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;This is a very delicate dance because iterators still need to run through the old buckets until every old bucket has been evacuated. This also affects how key/value pairs are returned during iteration operations. A lot of care has been taken to make sure iterators work as the map grows and expands.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;As I stated in the beginning, this is just a macro view of how maps are structured and grow. The code is written in C and performs a lot of memory and pointer manipulation to keep things fast, efficient and safe.&lt;br /&gt;&lt;br /&gt;Obviously, this implementation can be changed at any time and having this understanding doesn&#39;t affect our ability, one way or the other, to use maps. It does show that if you know how many keys you need ahead of time, it is best to allocated that space during initialization. It also explains why maps are unsorted collections and why iterators seem random when walking through maps.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Special Thanks&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;I would like to thank Stephen McQuay and Keith Randall for their review, input and corrections for the post.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/557198743267416805/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/12/macro-view-of-map-internals-in-go.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/557198743267416805'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/557198743267416805'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/12/macro-view-of-map-internals-in-go.html' title='Macro View of Map Internals In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-oViOhYEG52M/UsNU778YUcI/AAAAAAAANR4/OKxPPhQwmDo/s72-c/Screen+Shot+2013-12-31+at+6.35.43+PM.png" height="72" width="72"/><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-4325301115831693055</id><published>2013-12-20T15:30:00.000-05:00</published><updated>2013-12-23T21:08:09.067-05:00</updated><title type='text'>Queue Your Way To Scalability</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The first thing I did when I started programming in Go was begin porting my Windows utilities classes and service frameworks over to Linux. This is what I did when I moved from C++ to C#. Thank goodness, I soon learned about &lt;a href=&quot;http://www.iron.io/&quot; target=&quot;_blank&quot;&gt;Iron.IO&lt;/a&gt; and the services they offered. Then it hit me, if I wanted true scalability, I needed to start building worker tasks that could be queued to run anywhere at any time. It was not about how many machines I needed, it was about how much compute time I needed.&lt;br /&gt;&lt;br /&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;float: right; margin-left: 1em; text-align: right;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;&quot;&gt;&lt;a href=&quot;http://www.outcast.io/&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://1.bp.blogspot.com/-1O5BR9TS4bs/Urbe8C5aaGI/AAAAAAAANMI/6GbvP7Df0oo/s320/photo.PNG&quot; width=&quot;180&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.outcast.io/&quot; target=&quot;_blank&quot;&gt;Outcast Marine Forecast&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The freedom that comes with architecting a solution around web services and worker tasks is refreshing. If I need 1,000 instances of a task to run, I can just queue it up. I don&#39;t need to worry about capacity, resources, or any other IT related issues. If my service becomes an instant hit overnight, the architecture is ready, the capacity is available.&lt;br /&gt;&lt;br /&gt;My mobile weather application &lt;a href=&quot;http://www.outcast.io/&quot; target=&quot;_blank&quot;&gt;Outcast&lt;/a&gt; is a prime example. I currently have a single scheduled task that runs in Iron.IO every 10 minutes. This task updates marine forecast areas for the United States and downloads and parses 472 web pages from the NOAA website. We are about to add Canada and eventually we want to move into Europe and Australia. At that point a single scheduled task is not a scalable or redundant architecture for this process.&lt;br /&gt;&lt;br /&gt;Thanks to the &lt;a href=&quot;https://github.com/iron-io/iron_go&quot; target=&quot;_blank&quot;&gt;Go Client&lt;/a&gt;&amp;nbsp;from Iron.IO, I can build a task that wakes up on a schedule and queues up as many marine forecast area worker tasks as needed. I can use this architecture to process each marine forecast area independently, in their own worker task, providing incredible scalability and redundancy. The best part, I don&#39;t have to think about hardware or IT related capacity issues.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Create a Worker Task&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Back in September I wrote a post about building and uploading an Iron.IO worker task using Go:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/09/running-go-programs-in-ironworker.html&quot; target=&quot;_blank&quot;&gt;http://www.goinggo.net/2013/09/running-go-programs-in-ironworker.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This task simulated 60 seconds of work and ran experiments to understand some of the capabilities of the worker task container. We are going to use this worker task to demonstrate how to use the Go Client to queue a task. If you want to follow along, go ahead and walk through the post and create the worker task.&lt;br /&gt;&lt;br /&gt;I am going to assume you walked through the post and created the worker called &quot;task&quot; as depicted in the image below:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-6IxgoVvaDbc/Ui0NYLBSl6I/AAAAAAAAM20/_JDyJSuQRLY/s640/Screen+Shot+2013-09-08+at+7.50.29+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;164&quot; src=&quot;http://4.bp.blogspot.com/-6IxgoVvaDbc/Ui0NYLBSl6I/AAAAAAAAM20/_JDyJSuQRLY/s640/Screen+Shot+2013-09-08+at+7.50.29+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Download The Go Client&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Download the &lt;a href=&quot;https://github.com/iron-io/iron_go&quot; target=&quot;_blank&quot;&gt;Go Client&lt;/a&gt;&amp;nbsp;from Iron.IO:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;go get github.com/iron-io/iron_go &lt;/div&gt;&lt;br /&gt;Now navigate to the examples folder:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-wwRuukh9a9E/UrSLUS-QzuI/AAAAAAAANLM/b4hGLpQd-wg/s1600/Screen+Shot+2013-12-20+at+1.23.58+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;193&quot; src=&quot;http://2.bp.blogspot.com/-wwRuukh9a9E/UrSLUS-QzuI/AAAAAAAANLM/b4hGLpQd-wg/s200/Screen+Shot+2013-12-20+at+1.23.58+PM.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The examples leverage the API that can be found here:&lt;br /&gt;&lt;a href=&quot;http://dev.iron.io/worker/reference/api/&quot; target=&quot;_blank&quot;&gt;http://dev.iron.io/worker/reference/api/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Not all the API calls are represented in these examples, but from these examples the rest of the API can be easily implemented.&lt;br /&gt;&lt;br /&gt;In this post we are going to focus on the task API calls. These are API&#39;s that you will most likely be able to leverage in your own programs and architectures. &lt;br /&gt;&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Queue a Task&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Open up the queue example from the examples/tasks folder. We will walk through the more important aspects of the code.&lt;br /&gt;&lt;br /&gt;In order to queue a task with the Go client, we need to create this document which will be posted with the request:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;tasks&quot;: [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;code_name&quot;: &quot;MyWorker&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;timeout&quot; : 60,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;payload&quot;: &quot;{\&quot;x\&quot;: \&quot;abc\&quot;, \&quot;y\&quot;: \&quot;def\&quot;}&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; ]&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;In the case of our worker task, the payload document in Go should look like this:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var payload = `{&quot;tasks&quot;:[&lt;br /&gt;{&lt;br /&gt;&amp;nbsp; &quot;code_name&quot; : &quot;&lt;b&gt;task&lt;/b&gt;&quot;,&lt;br /&gt;&amp;nbsp; &quot;timeout&quot; : &lt;b&gt;120&lt;/b&gt;,&lt;br /&gt;&amp;nbsp; &quot;payload&quot; : &quot;&quot;&lt;br /&gt;}]}` &lt;/div&gt;&lt;br /&gt;Now let&#39;s look at the code that will request our task to be queued. The first thing we need to do is set our project id and token.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;config := config.Config(&quot;iron_worker&quot;)&lt;br /&gt;config.ProjectId = &quot;your_project_id&quot;&lt;br /&gt;config.Token = &quot;your_token&quot; &lt;/div&gt;&lt;br /&gt;As described in the post from September, this information can be found inside our project configuration:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-IZMVVKhb4TY/UitNaTY7nvI/AAAAAAAAMyQ/qw2pp94Co_I/s640/Screen+Shot+2013-09-07+at+11.59.12+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;385&quot; src=&quot;http://1.bp.blogspot.com/-IZMVVKhb4TY/UitNaTY7nvI/AAAAAAAAMyQ/qw2pp94Co_I/s640/Screen+Shot+2013-09-07+at+11.59.12+AM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Now we can use the Go Client to build the url and prepare the payload for the request:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;url := api.ActionEndpoint(config, &quot;tasks&quot;)&lt;br /&gt;postData := bytes.NewBufferString(payload) &lt;/div&gt;&lt;br /&gt;Using the url object, we can send the request to Iron.IO and capture the response:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;resp, err := url.Request(&quot;POST&quot;, postData)&lt;br /&gt;defer resp.Body.Close()&lt;br /&gt;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Println(err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; return&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;body, err := ioutil.ReadAll(resp.Body)&lt;br /&gt;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Println(err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;We want to check the response to make sure everything was successful. This is the response we will get back:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;msg&quot;: &quot;Queued up&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;tasks&quot;: [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;id&quot;: &quot;4eb1b471cddb136065000010&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; ]&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;To unmarshal the result, we need these data structures:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type (&lt;br /&gt;&amp;nbsp; &amp;nbsp; TaskResponse struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Message string `json:&quot;msg&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Tasks &amp;nbsp; []Task `json:&quot;tasks&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Task struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Id string `json:&quot;id&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;) &lt;/div&gt;&lt;br /&gt;Now let&#39;s unmarshal the results:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;taskResponse := &amp;amp;TaskResponse{}&lt;br /&gt;err = json.Unmarshal(body, taskResponse)&lt;br /&gt;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Printf(&quot;%v\n&quot;, err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;If we want to use a map instead to reduce the code base, we can do this:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;results := map[string]interface{}{}&lt;br /&gt;err = json.Unmarshal(body, &amp;amp;results)&lt;br /&gt;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Printf(&quot;%v\n&quot;, err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;When we run the example code and everything works, we should see the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Url: https://worker-aws-us-east-1.iron.io:443/2/projects/522b4c518a0c960009000007/tasks&lt;br /&gt;&lt;br /&gt;&quot;msg&quot;: Queued up&lt;br /&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;id&quot;: &quot;52b4721726d9410296012cc8&quot;,&lt;br /&gt;}, &lt;/div&gt;&lt;br /&gt;If we navigate to the Iron.IO HUD, we should see the task was queued and completed successfully:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-AYxpRShtTq4/UrSbuQbSelI/AAAAAAAANLc/CrGqKgbFHs4/s1600/Screen+Shot+2013-12-20+at+2.33.30+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-AYxpRShtTq4/UrSbuQbSelI/AAAAAAAANLc/CrGqKgbFHs4/s640/Screen+Shot+2013-12-20+at+2.33.30+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The Go client is doing a lot of the boilerplate work for us behind the scenes. We just need to make sure we have all the configuration parameters that are required. Queuing a task is one of the more complicated API calls. Look at the other examples to see how to get information for the tasks we queue and even get the logs.&lt;br /&gt;&lt;br /&gt;Queuing a task like this gives you the flexibility to schedule work on specific intervals or based on events. There are a lot of use cases where different types of web requests could leverage queuing a task. Leveraging this type of architecture provides a nice separation of concerns with scalability and redundancy built in. It keeps our web applications focused and optimized for handling user requests and pushes the asynchronous and background tasks to a cloud environment designed and architected to handle things at scale.&lt;br /&gt;&lt;br /&gt;As Outcast grows we will continue to leverage all the services that Iron.IO and the cloud has to offer. &amp;nbsp;There is a lot of data that needs to be downloaded, processing and then delivered to users through the mobile application. By building a scalable architecture today, we can handle what happens tomorrow.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/4325301115831693055/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/12/queue-your-way-to-scalability.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4325301115831693055'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4325301115831693055'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/12/queue-your-way-to-scalability.html' title='Queue Your Way To Scalability'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-1O5BR9TS4bs/Urbe8C5aaGI/AAAAAAAANMI/6GbvP7Df0oo/s72-c/photo.PNG" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-5239519374669728372</id><published>2013-12-17T14:22:00.000-05:00</published><updated>2013-12-23T18:48:14.827-05:00</updated><title type='text'>Three-Index Slices in Go 1.2</title><content type='html'>With the release of Go 1.2, slices gained the ability to specify the capacity when performing a slicing operation. This doesn&#39;t mean we can use this index to extend the capacity of the underlying array. It means we can create a new slice whose capacity is restricted. Restricting the capacity provides a level of protection to the underlying array and gives us more control over append operations.&lt;br /&gt;&lt;br /&gt;Here are the release notes and design document for the feature request:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://tip.golang.org/doc/go1.2#three_index&quot; target=&quot;_blank&quot;&gt;http://tip.golang.org/doc/go1.2#three_index&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://docs.google.com/document/d/1GKKdiGYAghXRxC2BFrSEbHBZZgAGKQ-yXK-hRKBo0Kk/pub&quot; target=&quot;_blank&quot;&gt;https://docs.google.com/document/d/1GKKdiGYAghXRxC2BFrSEbHBZZgAGKQ-yXK-hRKBo0Kk/pub&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Let&#39;s write some code to explore using the new capacity index. As with all my slice posts, I am going to use this InspectSlice function:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func InspectSlice(slice []string) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Capture the address to the slice structure&lt;br /&gt;&amp;nbsp; &amp;nbsp; address := unsafe.Pointer(&amp;amp;slice)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Capture the address where the length and cap size is stored&lt;br /&gt;&amp;nbsp; &amp;nbsp; lenAddr := uintptr(address) + uintptr(8)&lt;br /&gt;&amp;nbsp; &amp;nbsp; capAddr := uintptr(address) + uintptr(16)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Create pointers to the length and cap size&lt;br /&gt;&amp;nbsp; &amp;nbsp; lenPtr := (*int)(unsafe.Pointer(lenAddr))&lt;br /&gt;&amp;nbsp; &amp;nbsp; capPtr := (*int)(unsafe.Pointer(capAddr))&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Create a pointer to the underlying array&lt;br /&gt;&amp;nbsp; &amp;nbsp; addPtr := (*[8]string)(unsafe.Pointer(*(*uintptr)(address)))&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Slice Addr[%p] Len Addr[0x%x] Cap Addr[0x%x]\n&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; address,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; lenAddr,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; capAddr)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Slice Length[%d] Cap[%d]\n&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; *lenPtr,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; *capPtr)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for index := 0; index &amp;lt; *lenPtr; index++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;[%d] %p %s\n&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; index,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;(*addPtr)[index],&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (*addPtr)[index])&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;\n\n&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;To start, let&#39;s create a slice we will use as our source:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;source := []string{&quot;Apple&quot;, &quot;Orange&quot;, &quot;Plum&quot;, &quot;Banana&quot;, &quot;Grape&quot;}&lt;br /&gt;InspectSlice(source)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Output:&lt;br /&gt;Slice Addr[0x210231000] Len Addr[0x210231008] Cap Addr[0x210231010]&lt;br /&gt;Slice Length[5] Cap[5]&lt;br /&gt;[0] 0x21020e140 Apple&lt;br /&gt;[1] 0x21020e150 Orange&lt;br /&gt;&lt;b&gt;[2] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;[3] 0x21020e170 Banana&lt;br /&gt;[4] 0x21020e180 Grape &lt;/div&gt;&lt;br /&gt;We start with a slice of strings with a length and capacity of 5. This means the underlying array has 5 elements and we have access to the entire array.&lt;br /&gt;&lt;br /&gt;Next, let&#39;s take a traditional slice of the &lt;i&gt;&lt;b&gt;source&lt;/b&gt;&lt;/i&gt; and inspect the contents:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;takeOne := source[2:3]&lt;br /&gt;InspectSlice(takeOne)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Output:&lt;br /&gt;Slice Addr[0x210231040] Len Addr[0x210231048] Cap Addr[0x210231050]&lt;br /&gt;Slice Length[1] Cap[3]&lt;br /&gt;&lt;b&gt;[0] 0x21020e160 Plum &lt;/b&gt;&lt;/div&gt;&lt;br /&gt;With this slice operation we only take the third element from the &lt;i&gt;&lt;b&gt;source&lt;/b&gt;&lt;/i&gt;. You can see the first element of the &lt;i&gt;&lt;b&gt;takeOne&lt;/b&gt;&lt;/i&gt; slice has the same address as the third element of the &lt;i&gt;&lt;b&gt;source&lt;/b&gt;&lt;/i&gt; slice. The &lt;i&gt;&lt;b&gt;takeOne&lt;/b&gt;&lt;/i&gt;&amp;nbsp;slice has a length of one and a capacity of three. This is because there are three elements left in the underlying array that are available for use.&lt;br /&gt;&lt;br /&gt;What if we didn&#39;t want the new slice to have access to the remaining capacity? Prior to version 1.2, this was not possible. Let&#39;s take the slice again, but this time restrict the capacity to one:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;takeOneCapOne := source[2:3:3] &amp;nbsp;// Use the third index position to&lt;br /&gt;InspectSlice(takeOneCapOne) &amp;nbsp; &amp;nbsp; // set the capacity&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Output:&lt;br /&gt;Slice Addr[0x210231060] Len Addr[0x210231068] Cap Addr[0x210231070]&lt;br /&gt;Slice Length[1] Cap[1]&lt;br /&gt;[0] 0x21020e160 Plum &lt;/div&gt;&lt;br /&gt;After creating the &lt;i&gt;&lt;b&gt;takeOneCapOne&lt;/b&gt;&lt;/i&gt; slice, the length and capacity are now one. The&amp;nbsp;&lt;i&gt;&lt;b&gt;takeOneCapOne&lt;/b&gt;&lt;/i&gt;&amp;nbsp;slice no longer has access to the remaining capacity in the underlying array.&lt;br /&gt;&lt;br /&gt;Length and capacity is calculated using this formula:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;For slice[ i : j : k ] the&lt;br /&gt;&lt;br /&gt;Length: &amp;nbsp; j - i&lt;br /&gt;Capacity: k - i &lt;/div&gt;&lt;br /&gt;If we attempt to set the capacity greater than the underlying array, the code will panic.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;takeOneCapFour := source[2:3:6] &amp;nbsp;// (6 - 2) attempts to set the capacity&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// to 4. This is greater than what is&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// available.&lt;br /&gt;&lt;br /&gt;Runtime Error:&lt;br /&gt;panic: runtime error: slice bounds out of range&lt;br /&gt;&lt;br /&gt;goroutine 1 [running]:&lt;br /&gt;runtime.panic(0x9ad20, 0x1649ea)&lt;br /&gt;&amp;nbsp; &amp;nbsp; /Users/bill/go/src/pkg/runtime/panic.c:266 +0xb6&lt;br /&gt;main.main()&lt;br /&gt;&amp;nbsp; &amp;nbsp; /Users/bill/Spaces/Test/src/test/main.go:15 +0x24f&lt;/div&gt;&lt;br /&gt;So what happens if we append an element to the&amp;nbsp;&lt;i&gt;&lt;b&gt;takeOneCapOne&lt;/b&gt;&lt;/i&gt;&amp;nbsp;slice?&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;source := []string{&quot;Apple&quot;, &quot;Orange&quot;, &quot;Plum&quot;, &quot;Banana&quot;, &quot;Grape&quot;}&lt;br /&gt;InspectSlice(source)&lt;br /&gt;&lt;br /&gt;takeOneCapOne := source[2:3:3]&lt;br /&gt;InspectSlice(takeOneCapOne)&lt;br /&gt;&lt;br /&gt;takeOneCapOne = append(takeOneCapOne, &quot;Kiwi&quot;)&lt;br /&gt;InspectSlice(takeOneCapOne) &lt;/div&gt;&lt;br /&gt;Here is the output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Slice Addr[0x210231000] Len Addr[0x210231008] Cap Addr[0x210231010]&lt;br /&gt;Slice Length[5] Cap[5]&lt;br /&gt;[0] 0x21020e140 Apple&lt;br /&gt;[1] 0x21020e150 Orange&lt;br /&gt;&lt;b&gt;[2] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;[3] 0x21020e170 Banana&lt;br /&gt;[4] 0x21020e180 Grape&lt;br /&gt;&lt;br /&gt;-- Before Append --&lt;br /&gt;&lt;br /&gt;Slice Addr[0x210231040] Len Addr[0x210231048] Cap Addr[0x210231050]&lt;br /&gt;Slice Length[1] Cap[1]&lt;br /&gt;&lt;b&gt;[0] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;-- After Append --&lt;br /&gt;&lt;br /&gt;Slice Addr[0x210231080] Len Addr[0x210231088] Cap Addr[0x210231090]&lt;br /&gt;Slice Length[2] Cap[2]&lt;br /&gt;&lt;b&gt;[0] 0x210231060 Plum&lt;/b&gt;&lt;br /&gt;[1] 0x210231070 Kiwi &lt;/div&gt;&lt;br /&gt;When we append an element to the&amp;nbsp;&lt;i&gt;&lt;b&gt;takeOneCapOne&lt;/b&gt;&lt;/i&gt;&amp;nbsp;slice, a new underlying array is created for the slice. This new underlying array contains a copy of the elements being referenced from the &lt;i&gt;&lt;b&gt;source&lt;/b&gt;&lt;/i&gt; and then is extended to add the new element. This is because the capacity of the&amp;nbsp;&lt;i&gt;&lt;b&gt;takeOneCapOne&lt;/b&gt;&lt;/i&gt;&amp;nbsp;slice was reached and append needed to grow the capacity. Notice how the address changes in the&amp;nbsp;&lt;i&gt;&lt;b&gt;takeOneCapOne&lt;/b&gt;&lt;/i&gt;&amp;nbsp;slice after the append.&lt;br /&gt;&lt;br /&gt;How is this different from not setting the capacity?&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;source := []string{&quot;Apple&quot;, &quot;Orange&quot;, &quot;Plum&quot;, &quot;Banana&quot;, &quot;Grape&quot;}&lt;br /&gt;InspectSlice(source)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;takeOne := source[2:3] &amp;nbsp;// Don&#39;t specify capacity&lt;/b&gt;&lt;br /&gt;InspectSlice(takeOne)&lt;br /&gt;&lt;br /&gt;takeOne = append(takeOne, &quot;Kiwi&quot;)&lt;br /&gt;InspectSlice(takeOne)&lt;br /&gt;&lt;br /&gt;InspectSlice(source)&lt;/div&gt;&lt;br /&gt;Here is the output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Slice Addr[0x210231000] Len Addr[0x210231008] Cap Addr[0x210231010]&lt;br /&gt;Slice Length[5] Cap[5]&lt;br /&gt;[0] 0x21020e140 Apple&lt;br /&gt;[1] 0x21020e150 Orange&lt;br /&gt;&lt;b&gt;[2] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;&lt;b&gt;[3] 0x21020e170 Banana&lt;/b&gt;&lt;br /&gt;[4] 0x21020e180 Grape&lt;br /&gt;&lt;br /&gt;-- Before Append --&lt;br /&gt;&lt;br /&gt;Slice Addr[0x210231040] Len Addr[0x210231048] Cap Addr[0x210231050]&lt;br /&gt;Slice Length[1] Cap[3]&lt;br /&gt;&lt;b&gt;[0] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;-- After Append --&lt;br /&gt;&lt;br /&gt;Slice Addr[0x210231060] Len Addr[0x210231068] Cap Addr[0x210231070]&lt;br /&gt;Slice Length[2] Cap[3]&lt;br /&gt;&lt;b&gt;[0] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;&lt;b&gt;[1] 0x21020e170 Kiwi&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Slice Addr[0x210231080] Len Addr[0x210231088] Cap Addr[0x210231090]&lt;br /&gt;Slice Length[5] Cap[5]&lt;br /&gt;[0] 0x21020e140 Apple&lt;br /&gt;[1] 0x21020e150 Orange&lt;br /&gt;&lt;b&gt;[2] 0x21020e160 Plum&lt;/b&gt;&lt;br /&gt;&lt;b&gt;[3] 0x21020e170 Kiwi&lt;/b&gt;&lt;br /&gt;[4] 0x21020e180 Grape &lt;/div&gt;&lt;br /&gt;This time the append uses the existing capacity and overwrites the value at element 4 in the underlying array. This could be a disaster if this was not our intent.&lt;br /&gt;&lt;br /&gt;This new feature of setting the capacity can really help protect us and our data from unwanted overwrites. The more we can leverage the built-in functions and runtime to handle these types of operations the better. These types of bugs are very difficult to find so this is going to help immeasurably.&lt;br /&gt;&lt;br /&gt;Here are other posts about slices:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/08/understanding-slices-in-go-programming.html&quot; target=&quot;_blank&quot;&gt;Understanding Slices In Go Programming&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/08/collections-of-unknown-length-in-go.html&quot; target=&quot;_blank&quot;&gt;Collections Of Unknown Length In Go&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/09/slices-of-slices-of-slices-in-go.html&quot; target=&quot;_blank&quot;&gt;Slices Of Slices Of Slices In Go&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.goinggo.net/2013/09/iterating-over-slices-in-go.html&quot; target=&quot;_blank&quot;&gt;Iterating Over Slices In Go&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/5239519374669728372/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/12/three-index-slices-in-go-12.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/5239519374669728372'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/5239519374669728372'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/12/three-index-slices-in-go-12.html' title='Three-Index Slices in Go 1.2'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-4403044012444977298</id><published>2013-12-11T18:27:00.000-05:00</published><updated>2014-03-07T09:38:17.412-05:00</updated><title type='text'>Sample Web Application Using Beego and Mgo</title><content type='html'>&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Introduction&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;I am very excited about the Beego web framework. I wanted to share with you how I use the framework to build real world web sites and web services. Here is a picture of the sample website the post is going to showcase:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-Hjmz_0kp3CQ/UvaxtPf0eaI/AAAAAAAANWg/6GKEXPsfgzM/s1600/Screen+Shot+2014-02-08+at+5.37.01+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-Hjmz_0kp3CQ/UvaxtPf0eaI/AAAAAAAANWg/6GKEXPsfgzM/s1600/Screen+Shot+2014-02-08+at+5.37.01+PM.png&quot; height=&quot;222&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The sample web application:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Implements a traditional grid view of data calling into MongoDB&lt;/li&gt;&lt;li&gt;Provides a modal dialog box to view details using a partial view to generate the HTML&lt;/li&gt;&lt;li&gt;Implements a web service that returns a JSON document&lt;/li&gt;&lt;li&gt;Takes configuration parameters from the environment using &lt;a href=&quot;https://github.com/kelseyhightower/envconfig&quot; target=&quot;_blank&quot;&gt;envconfig&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Implements tests via &lt;a href=&quot;http://smartystreets.github.io/goconvey/&quot; target=&quot;_blank&quot;&gt;goconvey&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Leverages my &lt;a href=&quot;https://github.com/goinggo/tracelog&quot; target=&quot;_blank&quot;&gt;logging&lt;/a&gt; package&lt;/li&gt;&lt;/ol&gt;The code for the sample can be found in the GoingGo repository up on Github:&lt;br /&gt;&lt;a href=&quot;https://github.com/goinggo/beego-mgo&quot; target=&quot;_blank&quot;&gt;https://github.com/goinggo/beego-mgo&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;You can bring the code down and run it. It uses a public MongoDB database I created at MongoLab. You will need &lt;a href=&quot;https://help.github.com/articles/set-up-git&quot; target=&quot;_blank&quot;&gt;git&lt;/a&gt; and &lt;a href=&quot;http://bazaar.canonical.com/en/&quot; target=&quot;_blank&quot;&gt;bazaar&lt;/a&gt; installed on your system before running go get.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;go get github.com/goinggo/beego-mgo&lt;/div&gt;&lt;br /&gt;To quickly run or test the web application, use the scripts located in the zscripts folder.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Web Application Code Structure&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Let&#39;s take a look at the project structure and the different folders that exist: &lt;br /&gt;&lt;br /&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;controllers&lt;/td&gt;&lt;td&gt;Entry point for each Web call. Controllers process the requests.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;localize&lt;/td&gt;&lt;td&gt;Provides localization support for different languages and cultures&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;models&lt;/td&gt;&lt;td&gt;Models are data structures used by the business and service layers&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;routes&lt;/td&gt;&lt;td&gt;Mappings between URL&#39;s and the controller code that handles those calls.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;services&lt;/td&gt;&lt;td&gt;Services provide primitive functions for the different services that exist. These could be database or web calls that perform a specific function.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;static&lt;/td&gt;&lt;td&gt;Resource files such as scripts, stylesheets and images&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;test&lt;/td&gt;&lt;td&gt;Tests that can be run through the go test tool.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;utilities&lt;/td&gt;&lt;td&gt;Code that supports the web application. Boilerplate and abstraction layers for accessing the database and handling panics.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;views&lt;/td&gt;&lt;td&gt;Code related to rendering views&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;zscripts&lt;/td&gt;&lt;td&gt;Support scripts to help make it easier to build, run and test the web application&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Controllers, Models and Services&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;These layers make up the bulk of the code that implement the web application. The idea behind the framework is to hide and abstract as much boilerplate code as possible. This is accomplished by implementing a base controller package and a base services package.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;Base Controller Package&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The base controller package uses composition to abstract default controller behavior required by all controllers:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type (&lt;br /&gt;&amp;nbsp; &amp;nbsp; BaseController struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; beego.Controller&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; services.Service&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func (this *BaseController) Prepare() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.UserId = this.GetString(&quot;userId&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if this.UserId == &quot;&quot; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.UserId = this.GetString(&quot;:userId&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; err := this.Service.Prepare()&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.ServeError(err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func (this *BaseController) Finish() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; defer func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if this.MongoSession != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mongo.CloseSession(this.UserId, this.MongoSession)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.MongoSession = nil&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;A new type called BaseController is declared with the Beego Controller type and the base Service type embedded directly. This composes the fields and methods of these types directly into the BaseController type and makes them directly accessible through an object of the BaseController type.&lt;br /&gt;&lt;br /&gt;Beego Controller framework will execute the Prepare and Finish functions on any Controller object that implements these interfaces. The Prepare function is executed prior to the Controller function being called. These functions will belong to every Controller type&amp;nbsp;by default, allowing this boilerplate code to be implemented once.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;Services Package&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The Service package maintains state and implements boilerplate code required by all services:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;type (&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Services contains common properties&lt;br /&gt;&amp;nbsp; &amp;nbsp; Service struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MongoSession *mgo.Session&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; UserId       string&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func (this *Service) Prepare() (err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.MongoSession, err = mongo.CopyMonotonicSession(this.UserId)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return err&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; return err&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func (this *Service) Finish() (err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; defer helper.CatchPanic(&amp;amp;err, this.UserId, &quot;Service.Finish&quot;)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; if this.MongoSession != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mongo.CloseSession(this.UserId, this.MongoSession)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.MongoSession = nil&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; return err&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func (this *Service) DBAction(databaseName string, collectionName string, mongoCall mongo.MongoCall) (err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; return mongo.Execute(this.UserId, this.MongoSession, databaseName, collectionName, mongoCall)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;In the Service type, the Mongo session and the id of the user is maintained.&amp;nbsp;This version of Prepare handles creating a MongoDB session for use. Finish closes the session which releases the underlying connection back into the pool.&amp;nbsp;&amp;nbsp;The function DBAction provides an abstraction layer for running MongoDB commands and queries.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;Buoy Service&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;This Buoy Service package implements the calls to MongoDB. Let&#39;s look at the FindStation function that is called by the controller methods:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func FindStation(service *services.Service, stationId string) (buoyStation *buoyModels.BuoyStation, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; defer helper.CatchPanic(&amp;amp;err, service.UserId, &quot;FindStation&quot;)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; queryMap := bson.M{&quot;station_id&quot;: stationId}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; buoyStation = &amp;amp;buoyModels.BuoyStation{}&lt;br /&gt;&amp;nbsp; &amp;nbsp; err = service.DBAction(Config.Database, &quot;buoy_stations&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; func(collection *mgo.Collection) error {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return collection.Find(queryMap).One(buoyStation)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if strings.Contains(err.Error(), &quot;not found&quot;) == false {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return buoyStation, err&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; err = nil&lt;br /&gt;&amp;nbsp; &amp;nbsp; } &lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; return buoyStation, err&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The FindStation function prepares the query and then using the DBAction function to execute the query against MongoDB.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Implementing Web Calls&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;With the base types, boilerplate code and service functionality in place, we can now implement the web calls.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;Buoy Controller&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The BuoyController type is composed solely from the BaseController. By composing the BuoyController in this way, it immediately satisfies the Prepare and Finish interfaces and contains all the fields of a Beego Controller.&lt;br /&gt;&lt;br /&gt;The controller functions are bound to routes. The routes specify the urls to the different web calls that the application supports. In our sample application we have three routes:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;beego.Router(&quot;/&quot;, &amp;amp;controllers.BuoyController{}, &quot;get:Index&quot;)&lt;br /&gt;beego.Router(&quot;/buoy/retrievestation&quot;, &amp;amp;controllers.BuoyController{}, &quot;post:RetrieveStation&quot;)&lt;br /&gt;beego.Router(&quot;/buoy/station/:stationId&quot;, &amp;amp;controllers.BuoyController{}, &quot;get,post:RetrieveStationJson&quot;)&lt;/div&gt;&lt;br /&gt;The route specifies a url path, an instance of the controller used to handle the call and the name of the method from the controller to use. A prefix of which verb is accepted can be specified as well.&lt;br /&gt;&lt;br /&gt;The Index controller method is used to deliver the initial html to the browser. This will include the javascript, style sheets and anything else needed to get the web application going:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func (this *BuoyController) Index() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; region := &quot;Gulf Of Mexico&quot;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; buoyStations, err := buoyService.FindRegion(&amp;amp;this.Service, region)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.ServeError(err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.Data[&quot;Stations&quot;] = buoyStations&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.Layout = &quot;shared/basic-layout.html&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.TplNames = &quot;buoy/content.html&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.LayoutSections = map[string]string{}&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.LayoutSections[&quot;PageHead&quot;] = &quot;buoy/page-head.html&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.LayoutSections[&quot;Header&quot;] = &quot;shared/header.html&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.LayoutSections[&quot;Modal&quot;] = &quot;shared/modal.html&quot;&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;A call is made into the service layer to retrieve the list of regions. Then the slice of stations are passed into the view system. Since this is setting up the initial view of the application, layouts and the template are specified. When the controller method returns, the beego framework will generate the html for the response and deliver it to the browser.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-uZ1MOYZrbTo/Uvaji2e8_3I/AAAAAAAANWE/s09xvHHZaj4/s1600/Screen+Shot+2014-02-08+at+4.36.44+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-uZ1MOYZrbTo/Uvaji2e8_3I/AAAAAAAANWE/s09xvHHZaj4/s1600/Screen+Shot+2014-02-08+at+4.36.44+PM.png&quot; height=&quot;104&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;To generate that grid of stations, we need to be able to iterate over the slice of stations. Go templates support iterating over a slice. Here we use the .Stations variable which was passed into the view system:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{{range $index, $val := .Stations}}&lt;br /&gt;&amp;lt;tr&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;br /&gt;&amp;nbsp; &amp;lt;td&amp;gt;&amp;lt;a class=&quot;detail&quot; data=&quot;{{$val.StationId}}&quot; href=&quot;#&quot;&amp;gt;{{$val.StationId}}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;td&amp;gt;{{$val.Name}}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;td&amp;gt;{{$val.LocDesc}}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;td&amp;gt;{{$val.Condition.DisplayWindSpeed}}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;td&amp;gt;{{$val.Condition.WindDirection}}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;td&amp;gt;{{$val.Condition.DisplayWindGust}}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;lt;/tr&amp;gt;&lt;br /&gt;{{end}} &lt;/div&gt;&lt;br /&gt;Each station id is a link that brings up a modal dialog box with the details for each station. The RetrieveStation controller method generates the html for the modal dialog:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func (this *BuoyController) RetrieveStation() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; params := struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StationId string `form:&quot;stationId&quot; valid:&quot;Required; MinSize(4)&quot; error:&quot;invalid_station_id&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; }{}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; if this.ParseAndValidate(&amp;amp;params) == false {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; buoyStation, err := buoyService.FindStation(&amp;amp;this.Service, params.StationId)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.ServeError(err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.Data[&quot;Station&quot;] = buoyStation&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.Layout = &quot;&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.TplNames = &quot;buoy/pv_station.html&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; view, _ := this.RenderString()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.AjaxResponse(0, &quot;SUCCESS&quot;, view)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;RetrieveStation gets the details for the specified station and then uses the view system to generate the html for the dialog box. The partial view is passed back to the requesting ajax call and placed into the browser document:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;function ShowDetail(result) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; try {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var postData = {};&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; postData[&quot;stationId&quot;] = $(result).attr(&#39;data&#39;);&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var service = new ServiceResult();&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; service.getJSONData(&quot;/buoy/retrievestation&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; postData,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ShowDetail_Callback,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Standard_ValidationCallback,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Standard_ErrorCallback&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; catch (e) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alert(e);&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function ShowDetail_Callback() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; try {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $(&#39;#system-modal-title&#39;).html(&quot;Buoy Details&quot;);&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $(&#39;#system-modal-content&#39;).html(this.ResultObject);&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $(&quot;#systemModal&quot;).modal(&#39;show&#39;);&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; catch (e) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alert(e);&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Once the call to modal.(&#39;show&#39;) is performed, the following modal diaglog appears.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-NnBxqehcFA4/Uvamd2bwg1I/AAAAAAAANWQ/S1xN3VbP8BI/s1600/Screen+Shot+2014-02-08+at+4.49.16+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-NnBxqehcFA4/Uvamd2bwg1I/AAAAAAAANWQ/S1xN3VbP8BI/s1600/Screen+Shot+2014-02-08+at+4.49.16+PM.png&quot; height=&quot;362&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The RetrieveStationJson function implements a web service call that returns a JSON document:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func (this *BuoyController) RetrieveStationJson() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; params := struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StationId string `form:&quot;:stationId&quot; valid:&quot;Required; MinSize(4)&quot; error:&quot;invalid_station_id&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; }{}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; if this.ParseAndValidate(&amp;amp;params) == false {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; } &lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; buoyStation, err := buoyService.FindStation(&amp;amp;this.Service, params.StationId)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.ServeError(err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.Data[&quot;json&quot;] = &amp;amp;buoyStation&lt;br /&gt;&amp;nbsp; &amp;nbsp; this.ServeJson()&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;You can see how it calls into the service layer and uses the JSON support to return the response.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Testing The Endpoint&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;In order to make sure the application is always working, it needs to have tests: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func TestStation(t *testing.T) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; r, _ := http.NewRequest(&quot;GET&quot;, &quot;/station/42002&quot;, nil)&lt;br /&gt;&amp;nbsp; &amp;nbsp; w := httptest.NewRecorder()&lt;br /&gt;&amp;nbsp; &amp;nbsp; beego.BeeApp.Handlers.ServeHTTP(w, r)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; response := struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; StationId string `json:&quot;station_id&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name      string `json:&quot;name&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; LocDesc   string `json:&quot;location_desc&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Condition struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Type        string    `json:&quot;type&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Coordinates []float64 `json:&quot;coordinates&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } `json:&quot;condition&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Location struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WindSpeed     float64 `json:&quot;wind_speed_milehour&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WindDirection int     `json:&quot;wind_direction_degnorth&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WindGust      float64 `json:&quot;gust_wind_speed_milehour&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } `json:&quot;location&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; }{}&lt;br /&gt;&amp;nbsp; &amp;nbsp; json.Unmarshal(w.Body.Bytes(), &amp;amp;response)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Convey(&quot;Subject: Test Station Endpoint\n&quot;, t, func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Convey(&quot;Status Code Should Be 200&quot;, func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; So(w.Code, ShouldEqual, 200)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Convey(&quot;The Result Should Not Be Empty&quot;, func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; So(w.Body.Len(), ShouldBeGreaterThan, 0)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Convey(&quot;There Should Be A Result For Station 42002&quot;, func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; So(response.StationId, ShouldEqual, &quot;42002&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;br /&gt;&amp;nbsp; &amp;nbsp; })&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;This test creates a fake call through the Beego handler for the specified route. This is awesome because we don&#39;t need to run the web application to test. By using goconvey we can create tests that produce nice output that is logical and easy to read.&lt;br /&gt;&lt;br /&gt;Here is a sample when the test fails:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Subject: Test Station Endpoint&lt;br /&gt;&lt;br /&gt;&amp;nbsp; Status Code Should Be 200 ✘&lt;br /&gt;&amp;nbsp; The Result Should Not Be Empty ✔&lt;br /&gt;&amp;nbsp; There Should Be A Result For Station 42002 ✘&lt;br /&gt;&lt;br /&gt;Failures:&lt;br /&gt;&lt;br /&gt;* /Users/bill/Spaces/Go/Projects/src/github.com/goinggo/beego-mgo/test/endpoints/buoyEndpoints_test.go &lt;br /&gt;Line 35:&lt;br /&gt;Expected: &#39;200&#39;&lt;br /&gt;Actual:   &#39;400&#39;&lt;br /&gt;(Should be equal)&lt;br /&gt;&lt;br /&gt;* /Users/bill/Spaces/Go/Projects/src/github.com/goinggo/beego-mgo/test/endpoints/buoyEndpoints_test.go &lt;br /&gt;Line 37:&lt;br /&gt;Expected: &#39;0&#39;&lt;br /&gt;Actual:   &#39;9&#39;&lt;br /&gt;(Should be equal)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;3 assertions thus far&lt;br /&gt;&lt;br /&gt;--- FAIL: TestStation-8 (0.03 seconds) &lt;/div&gt;&lt;br /&gt;Here is a sample when it is successful: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Subject: Test Station Endpoint&lt;br /&gt;&lt;br /&gt;&amp;nbsp; Status Code Should Be 200 ✔&lt;br /&gt;&amp;nbsp; The Result Should Not Be Empty ✔&lt;br /&gt;&amp;nbsp; There Should Be A Result For Station 42002 ✔&lt;br /&gt;&lt;br /&gt;3 assertions thus far&lt;br /&gt;&lt;br /&gt;--- PASS: TestStation-8 (0.05 seconds) &lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Take the time to download the project and look around. I have attempted to show you the major points of the sample and how things are put together. The Beego framework makes it easy to implement your own ways to abstract and implement boilerplate code, leverage the go testing harness and run and deploy the code using Go standard mechanisms.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/4403044012444977298/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/12/sample-web-application-using-beego-and.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4403044012444977298'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4403044012444977298'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/12/sample-web-application-using-beego-and.html' title='Sample Web Application Using Beego and Mgo'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-Hjmz_0kp3CQ/UvaxtPf0eaI/AAAAAAAANWg/6GKEXPsfgzM/s72-c/Screen+Shot+2014-02-08+at+5.37.01+PM.png" height="72" width="72"/><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-4950506470683974986</id><published>2013-12-10T09:57:00.000-05:00</published><updated>2013-12-23T21:14:54.316-05:00</updated><title type='text'>Building A Weather App Using Go</title><content type='html'>&lt;a href=&quot;http://2.bp.blogspot.com/-tAbNtyqNjY8/UqIhi8i4-_I/AAAAAAAANIs/is_4nJG40OQ/s1600/weather-main.jpg&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://2.bp.blogspot.com/-tAbNtyqNjY8/UqIhi8i4-_I/AAAAAAAANIs/is_4nJG40OQ/s320/weather-main.jpg&quot; width=&quot;179&quot; /&gt;&lt;/a&gt;At &lt;a href=&quot;http://www.ardanstudios.com/&quot; target=&quot;_blank&quot;&gt;Ardan Studios&lt;/a&gt; we have spent the last 6 months, in our spare time and on weekends, building a consumer based mobile application called &lt;a href=&quot;http://www.outcast.io/&quot; target=&quot;_blank&quot;&gt;OutCast&lt;/a&gt;. The mobile application is tailored towards those who like spending time outdoors, whether that be fishing, hunting or any other type of activity.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-icmY5mzNPak/UqIhiBGzueI/AAAAAAAANIw/sI8UqHuXhow/s1600/buoys.jpg&quot; imageanchor=&quot;1&quot; style=&quot;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://1.bp.blogspot.com/-icmY5mzNPak/UqIhiBGzueI/AAAAAAAANIw/sI8UqHuXhow/s320/buoys.jpg&quot; width=&quot;180&quot; /&gt;&lt;/a&gt;This first release of OutCast shows the conditions for the buoy stations and marine forecasts areas within the United States. All this information is updated every 10 minutes and there are map views with traditional grids and search.&lt;br /&gt;&lt;br /&gt;The backend processing for buoy and marine data is built using Go and running at &lt;a href=&quot;http://www.iron.io/&quot; target=&quot;_blank&quot;&gt;Iron.IO&lt;/a&gt; as a scheduled worker task. The buoy processing downloads a text file from the NOAA website and rips through it, updating MongoDB with any changes. The marine processing is a bit more complicated. This requires pulling down multiple web pages from the NOAA website and parsing out all the text. Go made building and running these tasks a breeze.&lt;br /&gt;&lt;br /&gt;Another important aspect of OutCast is real time weather radar for the last 50 minutes. This has been very challenging on multiple levels. Mainly because we needed a real good image library that would run on Linux and could be integrated with Go. We were fortunate to find ImageMagick&#39;s&amp;nbsp;MagickWand C API and their Go package that provides the CGO bindings (&lt;a href=&quot;https://github.com/gographics/imagick&quot; target=&quot;_blank&quot;&gt;https://github.com/gographics/imagick&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;Processing images is an intense piece of work. Sometimes it takes 3 seconds to clean a single image. With 155 radar stations that need to be processed every 5 minutes, it took us several refactors to get things working well. The MagickWand library can only handle processing one image at a time. This restriction places a lot of stress on getting things done accurately within an acceptable amount of time.&lt;br /&gt;&lt;br /&gt;Here is a sample of a radar image before and after processing: &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-EJVsD8x4HQM/UqIoZMySjPI/AAAAAAAANJU/LhtHUCWJbkM/s1600/BYX_N0R_0.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;183&quot; src=&quot;http://3.bp.blogspot.com/-EJVsD8x4HQM/UqIoZMySjPI/AAAAAAAANJU/LhtHUCWJbkM/s200/BYX_N0R_0.gif&quot; style=&quot;background-color: white;&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-V6qmzCZ_8qY/UqIpjaJNDOI/AAAAAAAANJo/5uhr1BvuUhw/s1600/final.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;176&quot; src=&quot;http://3.bp.blogspot.com/-V6qmzCZ_8qY/UqIpjaJNDOI/AAAAAAAANJo/5uhr1BvuUhw/s200/final.gif&quot; style=&quot;background-color: white;&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;There is another interesting constraint. NOAA updates the images every 120 seconds on different time boundaries. If the program can&#39;t download all the images very quickly, the application could have images out of sync when they are animated across the map. Many radar images cross each other like in Orlando, FL. On this area of the map we have 3 radar images overlapping each other.&lt;br /&gt;&lt;br /&gt;Sometimes the images are not available. The program goes out to get the image and it doesn&#39;t exist. This creates problems with gaps in the timeline. When this happens, there is an alternate image location the program attempts to use. If the image is still not available, then the image from the previous run is used. Unless you are looking for it, you usually can&#39;t tell.&lt;br /&gt;&lt;br /&gt;Then you have the issue of updating S3 storage and MongoDB for each image. This again needs to happen quickly to prevent image overlays from being out of sync. At the end of the day, you want to do your best to make sure that the images for all the radar stations are in sync. This will provide the best user experience.&lt;br /&gt;&lt;br /&gt;Radar image processing happens in three stages and runs on a VM at&amp;nbsp;&lt;a href=&quot;https://www.digitalocean.com/&quot; target=&quot;_blank&quot;&gt;Digital Ocean&lt;/a&gt;&amp;nbsp;with 2 Gig of memory and 2 Cores.&lt;br /&gt;&lt;br /&gt;So how does Go help make this all happen every 5 minutes all day and all night without fail?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Stage 1: Download Images&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;There are 155 images that have to be downloaded. The images range from 1k to 20k in size depending on the activity of the weather at that moment. In this stage, the program spawns a Go routine for each image that needs to be downloaded. The Go program consistently does all 155 downloads in less than one second:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;15:15:02 radar.go:425: main : downloadImages : Started&lt;br /&gt;&lt;br /&gt;-- Spawn Go Routines&lt;br /&gt;15:15:02 radar.go:431: main : downloadImages : Info : Image [1] of [155]&lt;br /&gt;15:15:02 radar.go:431: main : downloadImages : Info : Image [155] of [155]&lt;br /&gt;&lt;br /&gt;-- Sample Download Per Image&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Url , N0R/JAX_N0R_0.gif&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Last-Modified , [Fri, 06 Dec 2013 20:12]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Content-Type , [image/gif]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Vary , [Accept-Encoding]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Cache-Control , [max-age=180]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Expires , [Fri, 06 Dec 2013 20:18:02 GMT]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Date , [Fri, 06 Dec 2013 20:15:02 GMT]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Connection , [keep-alive]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Server , [Apache/2.2.15 (Red Hat)]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Accept-Ranges , [bytes]&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Content-Length , -1&lt;br /&gt;Worker-JAX : downloadImage : Info : HEADER : Image-Length , 6873&lt;br /&gt;&lt;br /&gt;-- All Images Complete&lt;br /&gt;15:15:02 radar.go:445: main : downloadImages : Completed &lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Stage 2: Image Cleanup&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Now that all 155 images have been downloaded, they need to be cleaned using the ImageMagick API. Unfortunately, this can only be done with a single Go routine. Trying to clean more than one image at a time causes the program to pull a lot of memory. It really slows things down and can cause the program to be terminated by the OS. I have also seen other very odd behavior. The program will consistently complete this work in 90 seconds or less:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;15:15:02 radar.go:453: main : cleanImages : Started&lt;br /&gt;15:15:02 radar.go:457: main : cleanImages : Info : Image [1] of [155]&lt;br /&gt;&lt;br /&gt;-- Sample Processing Per Image&lt;br /&gt;Worker-RIW : cleanImage : Started&lt;br /&gt;Worker-RIW : cleanImage : Info : ReadImageBlob&lt;br /&gt;Worker-RIW : cleanImage : Info : TransparentPaintImage&lt;br /&gt;Worker-RIW : cleanImage : Info : WaveImage&lt;br /&gt;Worker-RIW : cleanImage : Info : Crop&lt;br /&gt;Worker-RIW : cleanImage : Info : Resize&lt;br /&gt;Worker-RIW : cleanImage : Info : EqualizeImage&lt;br /&gt;Worker-RIW : cleanImage : Info : GaussianBlurImage&lt;br /&gt;Worker-RIW : cleanImage : Info : BrightnessContrastImage&lt;br /&gt;Worker-RIW : cleanImage : Info : ResetIterator&lt;br /&gt;Worker-RIW : cleanImage : Info : GetImageBlob&lt;br /&gt;Worker-RIW : cleanImage : Completed&lt;br /&gt;Worker-RIW : cleanImage : Info : Defer : PixelWand Destroy&lt;br /&gt;Worker-RIW : cleanImage : Info : Defer : MagicWand Destroy&lt;br /&gt;&lt;br /&gt;-- All Images Complete&lt;br /&gt;15:16:20 radar.go:477: main : cleanImages : Completed &lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Stage 3: Upload To S3 and Update MongoDB&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;The last stage requires uploading all the cleaned images to S3 storage, removing the old images from S3 and then updating MongoDB with the new list of available image files. I am using the &lt;a href=&quot;https://wiki.ubuntu.com/goamz&quot; target=&quot;_blank&quot;&gt;goamz&lt;/a&gt; package from Ubuntu for accessing S3 and the &lt;a href=&quot;http://labix.org/mgo&quot; target=&quot;_blank&quot;&gt;mgo&lt;/a&gt;&amp;nbsp;package from &lt;a href=&quot;http://labix.org/&quot; target=&quot;_blank&quot;&gt;Gustavo Neimeyer &lt;/a&gt;to access MongoDB.&lt;br /&gt;&lt;br /&gt;Just like when we download the images, this stage spawns a Go routine for each image that needs to be uploaded and recorded.&amp;nbsp;The Go program consistently performs this work in one second: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;15:16:20 radar.go:485: main : updateImages : Started&lt;br /&gt;15:16:20 radar.go:491: main : updateImages : Info : Image [1] of [155]&lt;br /&gt;15:16:20 radar.go:491: main : updateImages : Info : Image [2] of [155]&lt;br /&gt;15:16:20 radar.go:491: main : updateImages : Info : Image [3] of [155]&lt;br /&gt;&lt;br /&gt;-- Sample Processing Per Image&lt;br /&gt;collateImage : Started : StationId[RIW] FileName[US/WY/RIW/20131206-2015.gif]&lt;br /&gt;collateImage : Info : Remove : Minutes[50.01] FileName[US/WY/RIW/20131206-1935]&lt;br /&gt;collateImage : Info : Keep : Minutes[45.00] FileName[US/WY/RIW/20131206-1940.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[40.00] FileName[US/WY/RIW/20131206-1945.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[35.00] FileName[US/WY/RIW/20131206-1940.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[30.01] FileName[US/WY/RIW/20131206-1945.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[25.02] FileName[US/WY/RIW/20131206-1950.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[20.01] FileName[US/WY/RIW/20131206-1955.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[15.01] FileName[US/WY/RIW/20131206-2000.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[10.00] FileName[US/WY/RIW/20131206-2005.gif]&lt;br /&gt;collateImage : Info : Keep : Minutes[5.01] FileName[US/WY/RIW/20131206-2010.gif]&lt;br /&gt;collateImage : Info : Keep - New : FileName[US/WY/RIW/20131206-2015.gif]&lt;br /&gt;collateImage : Completed&lt;br /&gt;storeImageMongoDB : Info : Updating Mongo&lt;br /&gt;storeImageMongoDB : Completed&lt;br /&gt;storeImageS3 : Started : Bucket[SRR-Dev] FileName[US/AK/APD/20131206-2015.gif]&lt;br /&gt;storeImageS3 : Info : Putting File Into S3 : FileName[US/AK/APD/20131206-2015.gif]&lt;br /&gt;storeImageMongoDB : Completed&lt;br /&gt;&lt;br /&gt;-- All Images Complete&lt;br /&gt;15:16:21 radar.go:505: main : updateImages : Completed &lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Conclusion&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;This project has taught me a lot about Go. It is exciting to see how fast the Go routines can download the images and perform all the S3 and MongoDB work. Thanks to CGO, I was able to leverage a powerful image processing library and make calls directly from my Go code. &lt;br /&gt;&lt;br /&gt;Currently&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;we&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;are&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;porting&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;the&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;web&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;service&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;that&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;powers&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;the&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;mobile&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;application&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;to&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;Go.&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;It&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;is&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;currently&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;written&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;in&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;Ruby.&amp;nbsp;We are using the &lt;a href=&quot;http://beego.me/&quot; target=&quot;_blank&quot;&gt;beego&lt;/a&gt;&amp;nbsp;package for our web framework, the&amp;nbsp;&lt;a href=&quot;http://smartystreets.github.io/goconvey/&quot; target=&quot;_blank&quot;&gt;goconvey&lt;/a&gt;&amp;nbsp;package for our tests and the&amp;nbsp;&lt;a href=&quot;http://godoc.org/github.com/kelseyhightower/envconfig&quot; target=&quot;_blank&quot;&gt;envconfig&lt;/a&gt;&amp;nbsp;package to handle our configuration needs. &lt;br /&gt;&lt;br /&gt;Our goal for OutCast is to provide people the ability to know in advance that the weekend is going to be great. We plan on using Go and MongoDB to analyze outdoor condition data with user preferences and experiences to deliver relevant information and forecasting. In the future, users will interact with OutCast by providing an experience review after their outdoor activities have ended. &lt;br /&gt;&lt;br /&gt;Currently OutCast is only available in the &lt;a href=&quot;https://itunes.apple.com/us/app/outcast-noaa-radar-hourly/id739808997?mt=8&quot; target=&quot;_blank&quot;&gt;Apple App Store&lt;/a&gt;. We will have our Android version complete in January 2014.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/4950506470683974986/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/12/building-weather-app-using-go.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4950506470683974986'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/4950506470683974986'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/12/building-weather-app-using-go.html' title='Building A Weather App Using Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-tAbNtyqNjY8/UqIhi8i4-_I/AAAAAAAANIs/is_4nJG40OQ/s72-c/weather-main.jpg" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-7844644625369715480</id><published>2013-11-23T08:31:00.000-05:00</published><updated>2013-12-23T21:16:56.466-05:00</updated><title type='text'>Write Your Go Programs Using GEdit</title><content type='html'>&lt;i&gt;&lt;b&gt;This is a guest post from Tad Vizbaras from&amp;nbsp;&lt;a href=&quot;http://www.etasoft.com/&quot; target=&quot;_blank&quot;&gt;Etasoft&lt;/a&gt;&amp;nbsp;in South Florida.&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;There are a number of editors and IDEs for Go development. LiteIde, Vim, Emacs and GEdit just to name a few. Each developer has their own favorite editor for each language they work with. Some like full featured IDE environments while others prefer speed over features. My personal&amp;nbsp;favorite&amp;nbsp;editors for Go development at the moment are Vim and GEdit.&lt;br /&gt;&lt;br /&gt;GEdit comes as part of many Linux distros. If you use Ubuntu, it is part of the operating system. GEdit has some decent features like:&lt;br /&gt;&lt;br /&gt;* Syntax Highlighting&lt;br /&gt;* Split Windows&lt;br /&gt;* Word Wrapping&lt;br /&gt;&lt;br /&gt;Advanced features are left to be handled by external plug-ins.&lt;br /&gt;&lt;br /&gt;I prefer project-less development. That means there are no formal project files and projects are preserved via a workspace bound to a directory structure. Go has excellent support for project-less development. When building and installing your projects, the Go tooling, in conjunction with the way Go packages code, can minimize the need for external scripts and makefiles.&lt;br /&gt;&lt;br /&gt;GEdit is a decent editor but I could not find any good Plug-ins that would allow me to perform a Go build right from the editor. The &quot;External Tools&quot; Plug-in has worked for me. I was able to set up shortcuts and get &quot;go build&quot; to execute. When you click on errors, displayed in the bottom pane of GEdit, the cursor jumps to exact error location.&lt;br /&gt;&lt;br /&gt;When I started programming in Go, the &quot;External Tools&quot; Plug-in worked for me for quite some time. But after awhile, I started to wish that &quot;go build&quot; would run similar to how Linters ran. With Linters, you can run a command after the file is saved. Since Go usually takes only few seconds to build, the Plug-in could execute a &quot;go build&quot; on save and then jump to the error location if there were any.&lt;br /&gt;&lt;br /&gt;I wrote a GEdit Plug-in that is developed in Python. Depending on the version of Python you have installed, you may require some small adjustments. This is covered in the Known Issues section below.&lt;br /&gt;&lt;br /&gt;Ops, I forgot to mention... Go is Awesome. But you probably already know that.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Meet GoBuild for GEdit 3.x&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;GoBuild - GEdit 3 Plug-in for Go (golang) development.&lt;br /&gt;&lt;br /&gt;GoBuild Plug-in version 1.0 for GEdit. Plug-in attaches to the &lt;b&gt;on_save&lt;/b&gt; event in GEdit for Go source code files only. It does nothing for any other file type.&lt;br /&gt;&lt;br /&gt;It will run &quot;go build&quot; after the file is saved. If the current filename has &quot;_test.go&quot; in the name, then the Plug-in will run &quot;go test&quot; against the current file&#39;s directory. The Plug-in will wait a number of seconds for the build or test to complete. It will timeout and quit the build or test so GEdit will not freeze.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Images&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Plug-in captures &quot;go build&quot; errors and shows them in the Gedit status bar. It also jumps to the first error and highlights error line if error is in the current file.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-T3myIxuYUus/UpCryZgLqUI/AAAAAAAANGI/kypJ3ssbQAE/s1600/gobuildscreen1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;422&quot; src=&quot;http://4.bp.blogspot.com/-T3myIxuYUus/UpCryZgLqUI/AAAAAAAANGI/kypJ3ssbQAE/s640/gobuildscreen1.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Plug-in shows the last successful build.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-acritDyafT4/UpCrycZXDhI/AAAAAAAANGA/geUCemFC248/s1600/gobuildscreen2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;422&quot; src=&quot;http://4.bp.blogspot.com/-acritDyafT4/UpCrycZXDhI/AAAAAAAANGA/geUCemFC248/s640/gobuildscreen2.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Plug-in shows any &quot;go test&quot; failures.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-aoziqnXfyUk/UpCryVWklXI/AAAAAAAANGE/6_WZ1pj0DL0/s1600/gobuildscreen3.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;422&quot; src=&quot;http://3.bp.blogspot.com/-aoziqnXfyUk/UpCryVWklXI/AAAAAAAANGE/6_WZ1pj0DL0/s640/gobuildscreen3.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Download&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;I have posted the plugin on GitHub. Please send any feedback you may have. &lt;br /&gt;&lt;a href=&quot;https://github.com/tadvi/gedit-gobuild&quot; target=&quot;_blank&quot;&gt;https://github.com/tadvi/gedit-gobuild&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Know Issues&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Has been tested on Ubuntu 13.04 and 13.10.&lt;br /&gt;&lt;br /&gt;Ubuntu 13.10 requires small change in the gobuild.plugin.&lt;br /&gt;Line with python should be changed to python3 like below:&lt;br /&gt;&lt;br /&gt;Loader=python3&lt;br /&gt;&lt;br /&gt;This is because Gedit seems to default on using python 3 instead of&lt;br /&gt;python 2.7 on newer versions of Linux.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Usage&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&amp;nbsp;* Simply drop files into ~/.local/share/gedit/plugins .&lt;br /&gt;&amp;nbsp;* If this directory does not exist - create it.&lt;br /&gt;&amp;nbsp;* Start GEdit&lt;br /&gt;&amp;nbsp;* Open Edit-Preferences, then plug-ins and check &quot;GoBuild after save&quot; plug-in.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Notes&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&amp;nbsp;* Current build directory is determined based on the active open source file.&lt;br /&gt;&amp;nbsp;* Plug-in is designed for fast development on small to mid size projects.&lt;br /&gt;&amp;nbsp;* Source code file is built with every save.&lt;br /&gt;&amp;nbsp;* Tight iteration of the save-edit-save-edit cycle.&lt;br /&gt;&amp;nbsp;* Not designed for large Go projects because compilation will timeout if it takes too long.&lt;br /&gt;&amp;nbsp;* Not designed for Go unit tests that take a long time to run.&lt;br /&gt;&amp;nbsp;* If you work on Go projects with build times over 5 seconds, this plug-in should be modified&lt;br /&gt;&amp;nbsp; &amp;nbsp; to use keyboard shortcut (such as &#39;F5&#39;) instead of on_save action.&lt;/div&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/7844644625369715480/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/11/write-your-go-programs-using-gedit.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/7844644625369715480'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/7844644625369715480'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/11/write-your-go-programs-using-gedit.html' title='Write Your Go Programs Using GEdit'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-T3myIxuYUus/UpCryZgLqUI/AAAAAAAANGI/kypJ3ssbQAE/s72-c/gobuildscreen1.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-930436952855925512</id><published>2013-11-21T10:29:00.000-05:00</published><updated>2013-12-23T19:34:59.864-05:00</updated><title type='text'>Label Breaks In Go</title><content type='html'>Have you ever found yourself in this situation. You have a case statement inside of a for loop and you would like to break from both the case and for statements in a single call?&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var err error&lt;br /&gt;timeout := time.After(30 * time.Second)&lt;br /&gt;&lt;br /&gt;sigChan := make(chan os.Signal, 1)&lt;br /&gt;signal.Notify(sigChan, os.Interrupt)&lt;br /&gt;&lt;br /&gt;complete := make(chan error)&lt;br /&gt;go launchProcessor(complete)&lt;br /&gt;&lt;br /&gt;for {&lt;br /&gt;&amp;nbsp; &amp;nbsp; select {&lt;br /&gt;&amp;nbsp; &amp;nbsp; case &amp;lt;-sigChan:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;atomic.StoreInt32(&amp;amp;shutdownFlag, 1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;continue&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; case &amp;lt;-timeout:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; os.Exit(1)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; case err = &amp;lt;-complete:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;break&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; // Break the loop&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;break&lt;/b&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;return err &lt;/div&gt;&lt;br /&gt;Here I have an endless for loop waiting on three channels using a select statement.&lt;br /&gt;&lt;br /&gt;The first case is listening for an operating system Interrupt event. If the operating system requests the program to shutdown, this case will set a package level variable and continue back into the loop.&lt;br /&gt;&lt;br /&gt;The second case is listening for a timeout event. If the programs runs for 30 seconds, the timeout event will fire and the program will immediately terminate.&lt;br /&gt;&lt;br /&gt;The third case is listening for a complete event. If the Goroutine that is launched prior to entering the loop completes it work, it will notify the code on this channel. In this case we need to break out of both the case and the for loop.&lt;br /&gt;&lt;br /&gt;Fortunately there isn&#39;t any more logic to process outside of the select statement, so the second break statement works. If there were other cases that broke out of the select statement and did not require the loop to terminate, I would be in trouble. The code would require more logic and flags to determine when to break out of the loop and when to continue iterating.&lt;br /&gt;&lt;br /&gt;Go has an answer to this coding delima. You can define a label and break to that label.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var err error&lt;br /&gt;timeout := time.After(30 * time.Second)&lt;br /&gt;&lt;br /&gt;sigChan := make(chan os.Signal, 1)&lt;br /&gt;signal.Notify(sigChan, os.Interrupt)&lt;br /&gt;&lt;br /&gt;complete := make(chan error)&lt;br /&gt;go launchProcessor(complete)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Loop: &lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; select {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case &amp;lt;-sigChan:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;atomic.StoreInt32(&amp;amp;shutdownFlag, 1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;continue&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case &amp;lt;-timeout:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; os.Exit(1)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case err = &amp;lt;-complete:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;break Loop&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;return err &lt;/div&gt;&lt;br /&gt;I have changed the code a bit by declaring a label called Loop just above the for statement. Then in the last case, the break statement is provided the name of that label. This single call to break will jump the execution of the program outside of the for loop and to the next line of code. In this case, the next line of code is the call to return err.&lt;br /&gt;&lt;br /&gt;You can also use a label with a continue statement. This is a silly example but it shows you the mechanism:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&amp;nbsp; &amp;nbsp; guestList := []string{&quot;bill&quot;, &quot;jill&quot;, &quot;joan&quot;}&lt;br /&gt;&amp;nbsp; &amp;nbsp; arrived := []string{&quot;sally&quot;, &quot;jill&quot;, &quot;joan&quot;} &lt;br /&gt;&lt;br /&gt;CheckList:&lt;br /&gt;&amp;nbsp; &amp;nbsp; for _, guest := range guestList {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for _, person := range arrived {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Guest[%s] Person[%s]\n&quot;, guest, person)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if person == guest {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Let %s In\n&quot;, person)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue CheckList&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; } &lt;/div&gt;&lt;br /&gt;Here is the output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Guest[bill] Person[sally]&lt;br /&gt;Guest[bill] Person[jill]&lt;br /&gt;Guest[bill] Person[joan]&lt;br /&gt;Guest[jill] Person[sally]&lt;br /&gt;Guest[jill] Person[jill]&lt;br /&gt;Let jill In&lt;br /&gt;Guest[joan] Person[sally]&lt;br /&gt;Guest[joan] Person[jill]&lt;br /&gt;Guest[joan] Person[joan] &lt;br /&gt;Let joan in&lt;/div&gt;&lt;br /&gt;In this example there are two for loops, one nested inside the other. From the nested for loop, the continue statement uses a label to jump back to the outer for loop. From the output, you can see that the&lt;br /&gt;outer for loop starts its next iteration. Once the outer for loop is complete, the execution of the program continues on.&lt;br /&gt;&lt;br /&gt;If you think this is just a fancy goto statement, it really isn&#39;t. The label being referenced must enclose the same for, switch or select statement. As you saw, the continue will still begin the next iteration of the for loop.&lt;br /&gt;&lt;br /&gt;Using label breaks and continues in these scenario keeps the code clean and precise.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/930436952855925512/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/11/label-breaks-in-go.html#comment-form' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/930436952855925512'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/930436952855925512'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/11/label-breaks-in-go.html' title='Label Breaks In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-1513214783122282703</id><published>2013-11-05T19:08:00.000-05:00</published><updated>2014-06-12T09:55:39.029-04:00</updated><title type='text'>Using The Log Package In Go</title><content type='html'>Linux is unique to Windows in many ways, and writing programs in Linux is no exception. The use of standard out, standard err and null devices is not only a good idea but it&#39;s the law. If your programs are going to be logging information, it is best to follow the destination conventions. This way your programs will work with all of the Mac/Linux tooling and hosted environments.&lt;br /&gt;&lt;br /&gt;Go has a package in the standard library called log and a type called logger. Using the log package will give you everything you need to be a good citizen. You will be able to write to all the standard devices, custom files or any destination that support the io.Writer interface.&lt;br /&gt;&lt;br /&gt;I have provided a really simple sample that will get you started with using logger:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;io&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;io/ioutil&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;log&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;var (&lt;br /&gt;&amp;nbsp; &amp;nbsp; Trace &amp;nbsp; *log.Logger&lt;br /&gt;&amp;nbsp; &amp;nbsp; Info &amp;nbsp; &amp;nbsp;*log.Logger&lt;br /&gt;&amp;nbsp; &amp;nbsp; Warning *log.Logger&lt;br /&gt;&amp;nbsp; &amp;nbsp; Error &amp;nbsp; *log.Logger&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func Init(&lt;br /&gt;&amp;nbsp; &amp;nbsp; traceHandle io.Writer,&lt;br /&gt;&amp;nbsp; &amp;nbsp; infoHandle io.Writer,&lt;br /&gt;&amp;nbsp; &amp;nbsp; warningHandle io.Writer,&lt;br /&gt;&amp;nbsp; &amp;nbsp; errorHandle io.Writer) {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Trace = log.New(traceHandle,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;TRACE: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Info = log.New(infoHandle,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;INFO: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Warning = log.New(warningHandle,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;WARNING: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Error = log.New(errorHandle,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;ERROR: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Init(ioutil.Discard, os.Stdout, os.Stdout, os.Stderr)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Trace.Println(&quot;I have something standard to say&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; Info.Println(&quot;Special Information&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; Warning.Println(&quot;There is something you need to know about&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; Error.Println(&quot;Something has failed&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;When you run this program you will get the follow output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;INFO: 2013/11/05 18:11:01 main.go:44: Special Information&lt;br /&gt;WARNING: 2013/11/05 18:11:01 main.go:45: There is something you need to know about&lt;br /&gt;ERROR: 2013/11/05 18:11:01 main.go:46: Something has failed &lt;/div&gt;&lt;br /&gt;You will notice that Trace logging is not being displayed. Let&#39;s look at the code to find out why.&lt;br /&gt;&lt;br /&gt;Look at the&amp;nbsp;Trace&amp;nbsp;logger pieces:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var Trace *log.Logger&lt;br /&gt;&lt;br /&gt;Trace = log.New(&lt;b&gt;traceHandle&lt;/b&gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;TRACE: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;&lt;br /&gt;Init(&lt;b&gt;ioutil.Discard&lt;/b&gt;, os.Stdout, os.Stdout, os.Stderr)&lt;br /&gt;&lt;br /&gt;Trace.Println(&quot;I have something standard to say&quot;) &lt;/div&gt;&lt;br /&gt;The code creates a package level variable called&amp;nbsp;Trace&amp;nbsp;which is a pointer to a log.Logger object. Then inside&amp;nbsp;the Init function, a new log.Logger object is created. The parameters to the log.New function are as follows:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func New(out io.Writer, prefix string, flag int) *Logger&lt;br /&gt;&lt;br /&gt;out: &amp;nbsp; &amp;nbsp;The out variable sets the destination to which log data will be written.&lt;br /&gt;prefix: The prefix appears at the beginning of each generated log line.&lt;br /&gt;flags: &amp;nbsp;The flag argument defines the logging properties.&lt;br /&gt;&lt;br /&gt;Flags:&lt;br /&gt;const (&lt;br /&gt;// Bits or&#39;ed together to control what&#39;s printed. There is no control over the&lt;br /&gt;// order they appear (the order listed here) or the format they present (as&lt;br /&gt;// described in the comments).  A colon appears after these items:&lt;br /&gt;// 2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message&lt;br /&gt;Ldate         = 1 &amp;lt;&amp;lt; iota     // the date: 2009/01/23&lt;br /&gt;Ltime &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // the time: 01:23:23&lt;br /&gt;Lmicroseconds &amp;nbsp; &amp;nbsp; // microsecond resolution: 01:23:23.123123.  assumes Ltime.&lt;br /&gt;Llongfile &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // full file name and line number: /a/b/c/d.go:23&lt;br /&gt;Lshortfile &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// final file name element and line number: d.go:23. overrides Llongfile&lt;br /&gt;LstdFlags     = Ldate | Ltime // initial values for the standard logger&lt;br /&gt;)  &lt;/div&gt;&lt;br /&gt;In this sample program the destination for&amp;nbsp;Trace&amp;nbsp;is ioutil.Discard. This is a null device where all write calls&amp;nbsp;succeed without doing anything. Therefore when you write using&amp;nbsp;Trace, nothing appears in the terminal&amp;nbsp;window.&lt;br /&gt;&lt;br /&gt;Look at Info:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var Info *log.Logger&lt;br /&gt;&lt;br /&gt;Info = log.New(&lt;b&gt;infoHandle&lt;/b&gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;INFO: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;&lt;br /&gt;Init(ioutil.Discard, &lt;b&gt;os.Stdout&lt;/b&gt;, os.Stdout, os.Stderr)&lt;br /&gt;&lt;br /&gt;Info.Println(&quot;Special Information&quot;) &lt;/div&gt;&lt;br /&gt;For Info os.Stdout is passed into Init for the infoHandle. This means when you write using&amp;nbsp;Info, the message&amp;nbsp;will appear on the terminal window, via standard out.&lt;br /&gt;&lt;br /&gt;Last, look at Error:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var Error *log.Logger&lt;br /&gt;&lt;br /&gt;Error = log.New(&lt;b&gt;errorHandle&lt;/b&gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;INFO: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile)&lt;br /&gt;&lt;br /&gt;Init(ioutil.Discard, os.Stdout, os.Stdout, &lt;b&gt;os.Stderr&lt;/b&gt;)&lt;br /&gt;&lt;br /&gt;Error.Println(&quot;Special Information&quot;) &lt;/div&gt;&lt;br /&gt;This time os.Stderr is passed into Init for the errorHandle. This means when you write using Error, the message will appear on the terminal window, via standard error. However, passing these messages to os.Stderr allows other applications running your program to know an error has occurred.&lt;br /&gt;&lt;br /&gt;Since any destination that support the io.Writer interface is accepted, you can create and use files:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;file&lt;/b&gt;, err := os.OpenFile(&quot;file.txt&quot;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)&lt;br /&gt;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Fatalln(&quot;Failed to open log file&quot;, output, &quot;:&quot;, err)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;MyFile = log.New(&lt;b&gt;file&lt;/b&gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;PREFIX: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile) &lt;/div&gt;&lt;br /&gt;In the sample code, a file is opened and then passed into the log.New call. Now when you use MyFile to write, the writes go to file.txt.&lt;br /&gt;&lt;br /&gt;You can also have the logger write to multiple destinations at the same time.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;file&lt;/b&gt;, err := os.OpenFile(&quot;file.txt&quot;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)&lt;br /&gt;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Fatalln(&quot;Failed to open log file&quot;, output, &quot;:&quot;, err)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;b&gt;multi&lt;/b&gt; := io.MultiWriter(&lt;b&gt;file&lt;/b&gt;, &lt;b&gt;os.Stdout&lt;/b&gt;)&lt;br /&gt;&lt;br /&gt;MyFile := log.New(&lt;b&gt;multi&lt;/b&gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;PREFIX: &quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Ldate|log.Ltime|log.Lshortfile) &lt;/div&gt;&lt;br /&gt;Here writes are going to the file and to standard out.&lt;br /&gt;&lt;br /&gt;Notice the use of log.Fatalln in the handling of any error with OpenFile. The log package provides an initial logger that can be configured as well. Here is a sample program using log with the standard configuration:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;log&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Println(&quot;Hello World&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Here is the output: &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;2013/11/05 18:42:26 Hello World &lt;/div&gt;&lt;br /&gt;If you want to remove the formatting or change it, you can use the log.SetFlags function:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;log&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.SetFlags(0)&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Println(&quot;Hello World&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Here is the output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Hello World &lt;/div&gt;&lt;br /&gt;Now all the formatting has been removed. If you want to send the output to a different destination use the log.SetOutput:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;io/ioutil&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;log&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.SetOutput(ioutil.Discard)&lt;br /&gt;&amp;nbsp; &amp;nbsp; log.Println(&quot;Hello World&quot;)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Now nothing will display on the terminal window. You can use any destination that support the io.Writer interface.&lt;br /&gt;&lt;br /&gt;Based on this example I wrote a new logging package for all my programs:&lt;br /&gt;&lt;br /&gt;go get github.com/goinggo/tracelog&lt;br /&gt;&lt;br /&gt;I wish I knew about log and loggers when I started writing Go programs. Expect to see a lot more of the log package from me in the future.</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/1513214783122282703/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/11/using-log-package-in-go.html#comment-form' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/1513214783122282703'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/1513214783122282703'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/11/using-log-package-in-go.html' title='Using The Log Package In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-1726419852234373642</id><published>2013-11-03T00:35:00.000-04:00</published><updated>2013-12-23T19:44:37.418-05:00</updated><title type='text'>Using XSLT With Go</title><content type='html'>I am working on a project that requires pulling and processing different XML feeds from the web and storing the data into MongoDB as JSON. Since new feeds come up everyday, changing the Go program to process and publish new feeds is out of the question. A second constraint is that processing has to work in Iron.io or any other linux cloud based environment.&lt;br /&gt;&lt;br /&gt;What I needed was a Go program that could take an XML document and XSLT stylesheet at runtime, transform the XML into JSON and then store the JSON to MongoDB. I have some specific field names and other requirements for the JSON document that I need to make sure exist. XSLT makes this real easy to support.&lt;br /&gt;&lt;br /&gt;At first I looked at the different C libraries that exist. I figured I could integrate a library using CGO but after a few hours I realized this was not going to work. The libraries I found were huge and complex. Then by chance I found a reference about a program called xsltproc. The program exists both for the Mac and Linux operating systems. In fact, it comes pre-installed on the Mac and an apt-get will get you a copy of the program on your linux operating system.&lt;br /&gt;&lt;br /&gt;I have built a sample program that shows how to use xsltproc in your Go programs. Before we download the sample code we need to make sure you have xsltproc installed.&lt;br /&gt;&lt;br /&gt;If you are running on a Mac, xsltproc should already exist under /usr/bin&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;which xsltproc &lt;br /&gt;&lt;br /&gt;/usr/bin/xsltproc&lt;/div&gt;&lt;br /&gt;On your linux operating system just run apt-get if you don&#39;t already have xsltproc installed&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;sudo apt-get install xsltproc &lt;/div&gt;&lt;br /&gt;The xsltproc program will be installed in the same place under /usr/bin. To make sure everything is good, run the xsltproc program requesting the version:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;xsltproc --version&lt;br /&gt;&lt;br /&gt;xsltproc was compiled against libxml 20708, libxslt 10126 and libexslt 815&lt;br /&gt;libxslt 10126 was compiled against libxml 20708&lt;br /&gt;libexslt 815 was compiled against libxml 20708 &lt;/div&gt;&lt;br /&gt;To download and try the sample program, open a terminal session and run the following commands:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;export GOPATH=$HOME/example&lt;br /&gt;&lt;br /&gt;go get github.com/goinggo/xslt&lt;br /&gt;cd $GOPATH/src/github.com/goinggo/xslt&lt;br /&gt;go build &lt;/div&gt;&lt;br /&gt;If you want to install the code under your normal GOPATH, start with the &#39;go get&#39; line. Here are the files that should exist after the build:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;main.go &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-- Source code for test program&lt;br /&gt;deals.xml &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-- Sample XML document from Yipit&lt;br /&gt;stylesheet.xslt &amp;nbsp; &amp;nbsp;-- Stylesheet to transform the Yipit XML feed to JSON&lt;br /&gt;xslt &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; -- Test program&lt;/div&gt;&lt;br /&gt;Let&#39;s look at a portion of the XML document the sample program will transform:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&amp;lt;deals&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;list-item&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;yipit_url&amp;gt;http://yipit.com/business/rondeaus-kickboxing/&amp;lt;/yipit_url&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;end_date&amp;gt;2014-01-2716:00:03&amp;lt;/end_date&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;title&amp;gt;Let a Former Pro Teach You a Few Kicks of the Trade Month...&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;tags&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;list-item&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;url /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;name&amp;gt;Fitness Classes&amp;lt;/name&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;slug&amp;gt;fitness-classes&amp;lt;/slug&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/list-item&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/tags&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; ...&lt;br /&gt;&amp;nbsp; &amp;lt;/list-item&amp;gt;&lt;br /&gt;&amp;lt;/deals&amp;gt;&lt;/div&gt;&lt;br /&gt;The XML can be found in the deals.xml file. It is an extensive XML document and too large to show in its entirety.&lt;br /&gt;&lt;br /&gt;Let&#39;s look at a portion of the XSLT stylesheet:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br /&gt;&amp;lt;xsl:stylesheet&lt;br /&gt;&amp;nbsp; &amp;nbsp; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; xmlns:str=&quot;http://exslt.org/strings&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; version=&quot;1.0&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; extension-element-prefixes=&quot;str&quot;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;xsl:output method=&quot;text&quot; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;xsl:template name=&quot;cleanText&quot;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;xsl:param name=&quot;pText&quot; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;xsl:variable name=&quot;cleaned1&quot; select=&quot;str:replace($pText, &#39;&amp;amp;quot;&#39;, &#39;&#39;)&quot; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;xsl:variable name=&quot;cleaned2&quot; select=&quot;str:replace($cleaned1, &#39;\&#39;, &#39;&#39;)&quot; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;xsl:variable name=&quot;cleaned3&quot; select=&quot;str:replace($cleaned2, &#39;&amp;amp;#xA;&#39;, &#39;&#39;)&quot; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;xsl:value-of select=&quot;$cleaned3&quot; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/xsl:template&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; ...&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;xsl:template match=&quot;/&quot;&amp;gt;{&quot;deals&quot;: [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;xsl:for-each select=&quot;root/response/deals/list-item&quot;&amp;gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;dealid&quot;: &amp;lt;xsl:value-of select=&quot;id&quot; /&amp;gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;feed&quot;: &quot;Yipit&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;date_added&quot;: &quot;&amp;lt;xsl:value-of select=&quot;date_added&quot; /&amp;gt;&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;end_date&quot;: &quot;&amp;lt;xsl:value-of select=&quot;end_date&quot; /&amp;gt;&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ... &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;categories&quot;: [&amp;lt;xsl:for-each select=&quot;tags/list-item&quot;&amp;gt;&quot;&amp;lt;xsl:value-of select=&quot;slug&quot;/&amp;gt;&quot;&amp;lt;xsl:choose&amp;gt;&amp;lt;xsl:when test=&quot;position() != last()&quot;&amp;gt;,&amp;lt;/xsl:when&amp;gt;&amp;lt;/xsl:choose&amp;gt;&amp;lt;/xsl:for-each&amp;gt;],&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ...&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&amp;lt;xsl:choose&amp;gt;&amp;lt;xsl:when test=&quot;position() != last()&quot;&amp;gt;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/xsl:when&amp;gt;&amp;lt;/xsl:choose&amp;gt;&lt;br /&gt;&amp;lt;/xsl:for-each&amp;gt;&lt;br /&gt;]}&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/xsl:template&amp;gt;&lt;br /&gt;&amp;lt;/xsl:stylesheet&amp;gt; &lt;/div&gt;&lt;br /&gt;This XSLT can be found in the stylesheet.xslt file. It is an extensive XSLT stylesheet with templates to help cleanup the XML data. Something really great about xsltproc is that it already contains a bunch of great extensions:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;./xsltproc_darwin -dumpextensions&lt;br /&gt;&lt;br /&gt;Registered XSLT Extensions&lt;br /&gt;--------------------------&lt;br /&gt;Registered Extension Functions:&lt;br /&gt;{http://exslt.org/math}lowest&lt;br /&gt;{http://exslt.org/math}power&lt;br /&gt;{http://exslt.org/strings}concat&lt;br /&gt;{http://exslt.org/dates-and-times}date&lt;br /&gt;{http://exslt.org/dates-and-times}day-name&lt;br /&gt;{http://exslt.org/common}object-type&lt;br /&gt;{http://exslt.org/math}atan&lt;br /&gt;{http://exslt.org/strings}encode-uri&lt;br /&gt;{http://exslt.org/strings}decode-uri&lt;br /&gt;{http://exslt.org/dates-and-times}add-duration&lt;br /&gt;{http://exslt.org/dates-and-times}difference&lt;br /&gt;{http://exslt.org/dates-and-times}leap-year&lt;br /&gt;{http://exslt.org/dates-and-times}month-abbreviation&lt;br /&gt;{http://exslt.org/dynamic}map&lt;br /&gt;{http://exslt.org/math}tan&lt;br /&gt;{http://exslt.org/math}exp&lt;br /&gt;{http://exslt.org/dates-and-times}date-time&lt;br /&gt;{http://exslt.org/dates-and-times}day-in-week&lt;br /&gt;{http://exslt.org/dates-and-times}second-in-minute&lt;br /&gt;{http://exslt.org/dates-and-times}year&lt;br /&gt;{http://icl.com/saxon}evaluate&lt;br /&gt;{http://exslt.org/math}log&lt;br /&gt;{http://exslt.org/dates-and-times}add&lt;br /&gt;{http://exslt.org/dates-and-times}day-abbreviation&lt;br /&gt;{http://icl.com/saxon}line-number&lt;br /&gt;{http://exslt.org/math}constant&lt;br /&gt;{http://exslt.org/sets}difference&lt;br /&gt;{http://exslt.org/dates-and-times}duration&lt;br /&gt;{http://exslt.org/dates-and-times}minute-in-hour&lt;br /&gt;{http://icl.com/saxon}eval&lt;br /&gt;{http://exslt.org/math}min&lt;br /&gt;{http://exslt.org/math}max&lt;br /&gt;{http://exslt.org/math}highest&lt;br /&gt;{http://exslt.org/math}random&lt;br /&gt;{http://exslt.org/math}sqrt&lt;br /&gt;{http://exslt.org/math}cos&lt;br /&gt;{http://exslt.org/sets}has-same-node&lt;br /&gt;{http://exslt.org/strings}tokenize&lt;br /&gt;{http://exslt.org/dates-and-times}seconds&lt;br /&gt;{http://exslt.org/dates-and-times}time&lt;br /&gt;{http://exslt.org/dynamic}evaluate&lt;br /&gt;{http://exslt.org/common}node-set&lt;br /&gt;{http://exslt.org/dates-and-times}month-name&lt;br /&gt;{http://exslt.org/dates-and-times}week-in-year&lt;br /&gt;{http://exslt.org/math}acos&lt;br /&gt;{http://exslt.org/sets}intersection&lt;br /&gt;{http://exslt.org/sets}leading&lt;br /&gt;{http://exslt.org/sets}trailing&lt;br /&gt;{http://exslt.org/strings}replace&lt;br /&gt;{http://exslt.org/dates-and-times}day-in-year&lt;br /&gt;{http://icl.com/saxon}expression&lt;br /&gt;{http://exslt.org/math}abs&lt;br /&gt;{http://exslt.org/math}sin&lt;br /&gt;{http://exslt.org/math}asin&lt;br /&gt;{http://exslt.org/math}atan2&lt;br /&gt;{http://exslt.org/sets}distinct&lt;br /&gt;{http://exslt.org/dates-and-times}hour-in-day&lt;br /&gt;{http://exslt.org/dates-and-times}sum&lt;br /&gt;{http://exslt.org/dates-and-times}week-in-month&lt;br /&gt;{http://exslt.org/strings}split&lt;br /&gt;{http://exslt.org/strings}padding&lt;br /&gt;{http://exslt.org/strings}align&lt;br /&gt;{http://exslt.org/dates-and-times}day-in-month&lt;br /&gt;{http://exslt.org/dates-and-times}day-of-week-in-month&lt;br /&gt;{http://exslt.org/dates-and-times}month-in-year&lt;br /&gt;{http://xmlsoft.org/XSLT/}test&lt;br /&gt;&lt;br /&gt;Registered Extension Elements:&lt;br /&gt;{http://exslt.org/common}document&lt;br /&gt;{http://exslt.org/functions}result&lt;br /&gt;{http://xmlsoft.org/XSLT/}test&lt;br /&gt;&lt;br /&gt;Registered Extension Modules:&lt;br /&gt;http://exslt.org/functions&lt;br /&gt;http://icl.com/saxon&lt;br /&gt;http://xmlsoft.org/XSLT/ &lt;/div&gt;&lt;br /&gt;Look at the stylesheet to see how to access these extensions. I am using the strings extension to help replace characters that are not JSON compliant.&lt;br /&gt;&lt;br /&gt;Now let&#39;s look at the sample code that uses xsltproc to process the XML against the XSLT stylesheet:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;encoding/json&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os/exec&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;type document map[string]interface{}&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; jsonData, err := processXslt(&quot;stylesheet.xslt&quot;, &quot;deals.xml&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;ProcessXslt: %s\n&quot;, err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; os.Exit(1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; documents := struct {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Deals []document `json:&quot;deals&quot;`&lt;br /&gt;&amp;nbsp; &amp;nbsp; }{}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; err = json.Unmarshal(jsonData, &amp;amp;documents)&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Unmarshal: %s\n&quot;, err)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; os.Exit(1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Deals: %d\n\n&quot;, len(documents.Deals))&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for _, deal := range documents.Deals {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;DealId: %d\n&quot;, int(deal[&quot;dealid&quot;].(float64)))&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Title: %s\n\n&quot;, deal[&quot;title&quot;].(string))&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func processXslt(xslFile string, xmlFile string) (jsonData []byte, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; cmd := exec.Cmd{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Args: []string{&quot;xsltproc&quot;, xslFile, xmlFile},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Env:  os.Environ(),&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Path: &quot;xsltproc&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; jsonString, err := cmd.Output()&lt;br /&gt;&amp;nbsp; &amp;nbsp; if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return jsonData, err&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%s\n&quot;, jsonString)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; jsonData = []byte(jsonString)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; return jsonData, err&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The processXslt function uses an exec.Cmd object to shell out and run the xsltproc program. The key to making this work is the cmd.Output function. The xsltproc program will return the result of the transformation to stdout. This means we only need to write the xml and xslt files to disk before running xsltproc. We will receive the result from xsltproc as a string from the cmd.Output call.&lt;br /&gt;&lt;br /&gt;Once the processXslt function has the resulting JSON transformation from xsltproc, the JSON is displayed on the screen and then converted to a slice of bytes for further processing.&lt;br /&gt;&lt;br /&gt;In main after the call to the processXslt function, the slice of bytes containing the JSON transformation is unmarshalled into a map so it can be consumed by our Go program and displayed on the screen. In the future that map can be stored in MongoDB via the mgo MongoDB driver.&lt;br /&gt;&lt;br /&gt;The xsltproc program can be uploaded to any cloud environment that will allow you to write the XML and XSLT to disk. I have been successful in using xsltproc inside an Iron.io IronWorker container.&lt;br /&gt;&lt;br /&gt;If you have the need to process XSLT in your Go programs, give this a try.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/1726419852234373642/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/11/using-xslt-with-go.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/1726419852234373642'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/1726419852234373642'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/11/using-xslt-with-go.html' title='Using XSLT With Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-2807921072270405033</id><published>2013-10-26T20:34:00.000-04:00</published><updated>2013-12-23T19:46:24.155-05:00</updated><title type='text'>Manage Dependencies With GODEP</title><content type='html'>&lt;h3&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h3&gt;If you are using 3rd party packages, (packages that you don&#39;t own or control), you will want a way to create a reproducible build every time you build your projects. If you use 3rd party packages directly and the package authors change things, your projects could break. Even if things don&#39;t break, code changes could create inconsistent behavior and bugs.&lt;br /&gt;&lt;br /&gt;Keith Rarick&#39;s tool &lt;b&gt;godep&lt;/b&gt;&amp;nbsp;is a great step in the right direction for managing 3rd party dependencies and creating reproducible builds. The &lt;b&gt;godep&lt;/b&gt; tool gives you two options for managing dependencies. The first option creates a dependency file with version control information and then with some &lt;b&gt;godep&lt;/b&gt; magic,&amp;nbsp;the code is built against those versions. You can also Vendor your 3rd party packages inside your projects as well. You never need to change a single source code file and everything is accomplished in conjunction with the go tooling.&lt;br /&gt;&lt;h3&gt;&lt;b&gt;&lt;br /&gt;Downloading Godep&lt;/b&gt;&lt;/h3&gt;Download &lt;b&gt;godep&lt;/b&gt;&amp;nbsp;using go get and make sure your $GOPATH/bin directory is in your PATH.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;go get github.com/kr/godep&lt;br /&gt;export PATH=$PATH:$GOPATH/bin&lt;/div&gt;&lt;h3&gt;&lt;b&gt;&lt;br /&gt;Create A Project&lt;/b&gt;&lt;/h3&gt;Build your project using the 3rd party packages as you normally would. Since &lt;b&gt;godep&lt;/b&gt; does not require you to change any import paths in the code, &#39;go get&#39; the code you need and import those packages directly. To keep the post simple, I am going to use an existing program called News Search that uses one 3rd party dependency.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;export GOPATH=$HOME/example&lt;br /&gt;go get github.com/goinggo/newssearch&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-O62h_6ZnNB0/Umu4jBy5bWI/AAAAAAAANDk/Vlc79ZkNEic/s1600/Screen+Shot+2013-10-26+at+8.41.33+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;198&quot; src=&quot;http://2.bp.blogspot.com/-O62h_6ZnNB0/Umu4jBy5bWI/AAAAAAAANDk/Vlc79ZkNEic/s200/Screen+Shot+2013-10-26+at+8.41.33+AM.png&quot; style=&quot;cursor: move;&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;After &#39;go get&#39; completes, I have the following code on disk inside the GOPATH.&lt;br /&gt;&lt;br /&gt;The News Search program is using code from a different Going Go repository, which for this project is a 3rd party package. Since &#39;go get&#39; was successful, the code built and is installed.&lt;br /&gt;&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;Dependency Management&lt;/b&gt;&lt;/h3&gt;Once you have a project that can build and install properly, you can use&amp;nbsp;&lt;b&gt;godep&lt;/b&gt;&amp;nbsp;to create the Godeps dependency file. Change to the root location for the project and run the&amp;nbsp;&lt;b&gt;godep save&lt;/b&gt;&amp;nbsp;command with the &lt;b&gt;-copy=false&lt;/b&gt; option:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;cd $GOPATH/src/github.com/goinggo/newssearch&lt;br /&gt;godep save -copy=false&lt;/div&gt;&lt;br /&gt;Once the save is complete,&amp;nbsp;&lt;b&gt;godep&lt;/b&gt;&amp;nbsp;creates a file called Godeps. You will save this file with your project:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;ImportPath&quot;: &quot;github.com/goinggo/newssearch&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;GoVersion&quot;: &quot;go1.1.2&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;Deps&quot;: [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;ImportPath&quot;: &quot;github.com/goinggo/utilities/workpool&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;Rev&quot;: &quot;7e6141d61b2a16ae83988907308f8e09f703a0d0&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; ]&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The Godeps file contains everything &lt;b&gt;godep&lt;/b&gt; needs to create a reproducible build. The Godep file lists each 3rd party package and the git commit number for that version of code to use.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-dqOJH8Q44Xs/UmvcMSdYPkI/AAAAAAAAND0/Pn70vJ6nAts/s1600/Screen+Shot+2013-10-26+at+11.12.44+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;184&quot; src=&quot;http://4.bp.blogspot.com/-dqOJH8Q44Xs/UmvcMSdYPkI/AAAAAAAAND0/Pn70vJ6nAts/s640/Screen+Shot+2013-10-26+at+11.12.44+AM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Now remove the 3rd party package from its original location and perform a build using the &lt;b&gt;godep&lt;/b&gt; tool:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;godep go build &lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-roq0HleO5kU/Umvc6vHYRiI/AAAAAAAAND8/Fk_mbUjLWUU/s1600/Screen+Shot+2013-10-26+at+11.16.25+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://1.bp.blogspot.com/-roq0HleO5kU/Umvc6vHYRiI/AAAAAAAAND8/Fk_mbUjLWUU/s320/Screen+Shot+2013-10-26+at+11.16.25+AM.png&quot; width=&quot;262&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If you remove the original 3rd party code, you can&#39;t use &#39;go build&#39; directly anymore, the imports don&#39;t exist. To build the project use &#39;go build&#39; from the&amp;nbsp;&lt;b&gt;godep&lt;/b&gt;&amp;nbsp;tool.&lt;br /&gt;&lt;br /&gt;You can also use &#39;go install&#39; and &#39;go test&#39; as long as you run those commands through &lt;b&gt;godep&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;godep go build&lt;br /&gt;godep go install&lt;br /&gt;godep go test&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;To make this work,&amp;nbsp;&lt;b&gt;godep&lt;/b&gt;&amp;nbsp;performs a bit of magic. It uses a working directory and manipulates the GOPATH underneath.&lt;br /&gt;&lt;br /&gt;Run the &lt;b&gt;godep path&lt;/b&gt; command from inside the project folder:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;cd $GOPATH/src/github.com/goinggo/newssearch&lt;br /&gt;godep path&lt;/div&gt;&lt;br /&gt;You should see the following output:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;/var/folders/8q/d2pfdk_x4qd4__l6gypvzsw40000gn/T/godep/rev/&lt;b&gt;7e/6141d61b2a16ae83988907308f8e09f703a0d0 &lt;/b&gt;&lt;/div&gt;&lt;br /&gt;If you open that folder you will see the code for that version. This code is being used to build the project:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-YIHfebJ5pBg/UmxN7iOZJhI/AAAAAAAANEs/uggcrLKOGGo/s1600/Screen+Shot+2013-10-26+at+7.18.42+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;151&quot; src=&quot;http://4.bp.blogspot.com/-YIHfebJ5pBg/UmxN7iOZJhI/AAAAAAAANEs/uggcrLKOGGo/s400/Screen+Shot+2013-10-26+at+7.18.42+PM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;The &lt;b&gt;godep&lt;/b&gt; tool will continue to use the code from this location to perform future builds if it exists. Calling &lt;b&gt;godep go build&lt;/b&gt;&amp;nbsp;will&amp;nbsp;download the version of code specified in the Godeps file if it doesn&#39;t already exist.&lt;br /&gt;&lt;br /&gt;If you open any of your source code files you will see the imports have not changed. The way &lt;b&gt;godep&lt;/b&gt; works, it doesn&#39;t have to change a thing. This is one of the really awesome things about &lt;b&gt;godep&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;b&gt;Updating Dependencies&lt;/b&gt;&lt;/h3&gt;When it is time to update one of your 3rd party libraries just &#39;go get&#39; it. Then you just need to run &lt;b&gt;godep save&lt;/b&gt; once again to update the Godeps file. Because the imports paths in the source code files are not changed,&amp;nbsp;&lt;b&gt;godep&lt;/b&gt;&amp;nbsp;will find and update the dependencies.&lt;br /&gt;&lt;br /&gt;I have changed the 3rd party package and pushed it up to GitHub:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-LrY5a2Sc9jk/UmxKdpVCUSI/AAAAAAAANEY/JiUi9hWkKjg/s1600/Screen+Shot+2013-10-26+at+7.03.43+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;128&quot; src=&quot;http://4.bp.blogspot.com/-LrY5a2Sc9jk/UmxKdpVCUSI/AAAAAAAANEY/JiUi9hWkKjg/s640/Screen+Shot+2013-10-26+at+7.03.43+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Now I &#39;go get&#39; the code changes and update the Godeps file:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;go get github.com/goinggo/utilities&lt;br /&gt;cd $GOPATH/src/github.com/goinggo/newssearch&lt;br /&gt;godep save &lt;/div&gt;&lt;br /&gt;If I open the Godeps file the dependencies have changed:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;ImportPath&quot;: &quot;github.com/goinggo/newssearch&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;GoVersion&quot;: &quot;go1.1.2&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;Deps&quot;: [&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;ImportPath&quot;: &quot;github.com/goinggo/utilities/workpool&quot;,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;Rev&quot;: &quot;8ecd01ec035e29915aa6897a3385ee4f8d80cc05&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; ]&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Now I use &lt;b&gt;godep&lt;/b&gt; to build the code:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;godep go build&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-nwK1OMw4vGY/UmxNDr7uGdI/AAAAAAAANEk/hhgp86i1R4s/s1600/Screen+Shot+2013-10-26+at+7.14.57+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;129&quot; src=&quot;http://1.bp.blogspot.com/-nwK1OMw4vGY/UmxNDr7uGdI/AAAAAAAANEk/hhgp86i1R4s/s320/Screen+Shot+2013-10-26+at+7.14.57+PM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The &lt;b&gt;godep&lt;/b&gt; tool downloaded the new version and built the code successfully.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;Vendoring&lt;/b&gt;&lt;/h3&gt;Vendoring is the act of making your own copy of the 3rd party packages your project is using. Those copies are traditionally placed inside each project and then saved in the project repository. The &lt;b&gt;godep&lt;/b&gt; tool supports Vendoring and will place the copies inside the project that are using them.&lt;br /&gt;&lt;br /&gt;To Vendor code with &lt;b&gt;godep,&lt;/b&gt;&amp;nbsp;don&#39;t use any options with the save command. First clean the workspace and download a new version of the News Search program:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;export GOPATH=$HOME/example&lt;br /&gt;go get github.com/goinggo/newssearch&lt;br /&gt;cd $GOPATH/src/github.com/goinggo/newssearch &lt;/div&gt;&lt;br /&gt;Now issue the &lt;b&gt;godep save&lt;/b&gt; command again but this time without the copy option:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;godep save&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-dM02XG5Nk9c/UmxRxT4pglI/AAAAAAAANE4/0vHPS0Phq74/s1600/Screen+Shot+2013-10-26+at+7.35.04+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;257&quot; src=&quot;http://2.bp.blogspot.com/-dM02XG5Nk9c/UmxRxT4pglI/AAAAAAAANE4/0vHPS0Phq74/s320/Screen+Shot+2013-10-26+at+7.35.04+PM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This time you will have a Godeps folder with a special workspace subfolder and the Godeps file. All the 3rd party packages are copied into the workspace folder under src. This is setup to work with GOPATH.&lt;br /&gt;&lt;br /&gt;Version control files are removed and no import paths are changed in any of the source code files.&lt;br /&gt;&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;Next remove the original code for the 3rd party package and perform the build:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;godep go build &lt;/div&gt;&lt;br /&gt;The build is successful and everything is ready to be pushed back into the repository.&lt;br /&gt;&lt;br /&gt;Performing an update is as simple as downloading the new version of the 3rd party package and running &lt;b&gt;godep save&lt;/b&gt;&amp;nbsp;again.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/h3&gt;The &lt;b&gt;godep&lt;/b&gt; tool solves many of the problems that exist with creating reproducible builds. It is incredibly easy to use and sits on top of the go tooling. It doesn&#39;t change anything about go, how you write go programs or how you import 3rd party packages. The only drawback is that&amp;nbsp;&lt;b&gt;godep&lt;/b&gt;&amp;nbsp;does not&amp;nbsp;support Bazaar using the non-vendored option.&lt;br /&gt;&lt;br /&gt;For the public packages your are publishing, you can include a Godeps file to provide your &quot;stable build&quot; configuration. Package users can choose to use it or not. That is really cool. Build the code with go directly or through &lt;b&gt;godep&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;In the end,&amp;nbsp;&lt;b&gt;godep&lt;/b&gt; is a tool that:&lt;br /&gt;&lt;br /&gt;1. Supports a Vendor and Non-Vendor solution that provides a reproducible build&lt;br /&gt;2. Maintains backwards compatible with all existing Go packages&lt;br /&gt;3. Provides a way to publish and access the &quot;stable build&quot; configuration of a product&lt;br /&gt;4. Easy to update package dependencies when new package versions are available</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/2807921072270405033/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/10/manage-dependencies-with-godep.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/2807921072270405033'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/2807921072270405033'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/10/manage-dependencies-with-godep.html' title='Manage Dependencies With GODEP'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-O62h_6ZnNB0/Umu4jBy5bWI/AAAAAAAANDk/Vlc79ZkNEic/s72-c/Screen+Shot+2013-10-26+at+8.41.33+AM.png" height="72" width="72"/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-8422195229692618723</id><published>2013-10-17T20:33:00.000-04:00</published><updated>2013-12-23T20:06:50.144-05:00</updated><title type='text'>My Channel Select Bug</title><content type='html'>I was testing new functionality on a program that is already running in production when suddenly the code behaved very badly. What I saw shocked me and then it became obvious why it happened. I also have a race condition just waiting to be a problem.&lt;br /&gt;&lt;br /&gt;I have tried to provide a simplified version of the code and the two bugs.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os/signal&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;time&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;var Shutdown bool = false&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; sigChan := make(chan os.Signal, 1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; signal.Notify(sigChan, os.Interrupt)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; select {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case &amp;lt;-sigChan:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Shutdown = true&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case &amp;lt;-func() chan struct{} {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; complete := make(chan struct{})&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go LaunchProcessor(complete)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return complete&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }():&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func LaunchProcessor(complete chan struct{}) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; defer func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; close(complete)&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Start Work\n&quot;)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for count := 0; count &amp;lt; 5; count++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Doing Work\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; time.Sleep(1 * time.Second)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if Shutdown == true {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Kill Early\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;End Work\n&quot;)&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;The idea behind this code is to run a task and terminate. It allows the operating system to request the program to terminate early. I always like shutting down the program cleanly when possible.&lt;br /&gt;&lt;br /&gt;The sample code creates a channel that is bound to an operating system signal and looks for &amp;lt;ctrl&amp;gt; C from the terminal window. If &amp;lt;ctrl&amp;gt; C is issued, the Shutdown flag is set to true and the program continues back into the select statement. The code also spawns a Go routine that performs the work. That routine checks the Shutdown flag to determine if the program needs to terminate early.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Bug Number 1&lt;/h3&gt;Take a look at this part of the code:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;case &amp;lt;-func() chan struct{} {&lt;br /&gt;&amp;nbsp; &amp;nbsp; complete := make(chan struct{})&lt;br /&gt;&amp;nbsp; &amp;nbsp; go LaunchProcessor(complete)&lt;br /&gt;&amp;nbsp; &amp;nbsp; return complete&lt;br /&gt;}(): &lt;/div&gt;&lt;br /&gt;I thought I was being so clever when I wrote this code. I thought it would be cool to execute a function on the fly to spawn the Go routine. It returns a channel that the select waits on to be told the work is complete. When the Go routine is done it closes the channel and the program terminates.&lt;br /&gt;&lt;br /&gt;Let&#39;s run the program:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Start Work&lt;br /&gt;Doing Work&lt;br /&gt;Doing Work&lt;br /&gt;Doing Work&lt;br /&gt;Doing Work&lt;br /&gt;Doing Work&lt;br /&gt;End Work &lt;/div&gt;&lt;br /&gt;As expected the program starts and spawns the Go routine. Once the Go routine is complete the program terminates.&lt;br /&gt;&lt;br /&gt;This time I will hit &amp;lt;ctlr&amp;gt; C while the program is running:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&lt;b&gt;Start Work&lt;/b&gt;&lt;br /&gt;Doing Work&lt;br /&gt;^C&lt;b&gt;Start Work&lt;/b&gt;&lt;br /&gt;Doing Work&lt;br /&gt;Kill Early&lt;br /&gt;Kill Early &lt;/div&gt;&lt;br /&gt;When I hit &amp;lt;ctrl&amp;gt; C the program launched the Go routine again!!&lt;br /&gt;&lt;br /&gt;I thought that the function associated with the case would only be executed once. Then the select would just wait on the channel moving forward. I had no idea that the function would be executed every time the loop iterated back to the select statement.&lt;br /&gt;&lt;br /&gt;To fix the code I needed to remove the function out of the select statement and spawn the Go routine outside of the loop:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; sigChan := make(chan os.Signal, 1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; signal.Notify(sigChan, os.Interrupt)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;complete := make(chan struct{})&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; go LaunchProcessor(complete)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; select {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case &amp;lt;-sigChan:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Shutdown = true&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;case &amp;lt;-complete:&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Now when we run the program we get a better result:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Start Work&lt;br /&gt;Doing Work&lt;br /&gt;Doing Work&lt;br /&gt;^CKill Early &lt;/div&gt;&lt;br /&gt;This time when I hit &amp;lt;ctrl&amp;gt; C the program terminate early and doesn&#39;t spawn another Go routine again.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Bug Number 2&lt;/h3&gt;There is a second less obvious bug lurking in the code as well. Take a look at these pieces of code:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;var Shutdown bool = false&lt;br /&gt;&lt;br /&gt;if whatSig == syscall.SIGINT {&lt;br /&gt;&amp;nbsp; &amp;nbsp; Shutdown = true&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;if Shutdown == true {&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Kill Early\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The code is using a package level variable to signal the running Go routine to shut down when &amp;lt;ctrl&amp;gt; C is hit. The code is working every time I hit &amp;lt;ctrl&amp;gt; C so why is there a bug?&lt;br /&gt;&lt;br /&gt;First let&#39;s run the race detector against the code:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;go build -race&lt;br /&gt;./test&lt;/div&gt;&lt;br /&gt;While it is running I hit &amp;lt;ctrl&amp;gt; C again:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;Start Work&lt;br /&gt;Doing Work&lt;br /&gt;^C==================&lt;br /&gt;WARNING: DATA RACE&lt;br /&gt;Read by goroutine 5:&lt;br /&gt;&amp;nbsp; &amp;nbsp; main.LaunchProcessor()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/Spaces/Test/src/test/main.go:46 +0x10b&lt;br /&gt;&amp;nbsp; &amp;nbsp; gosched0()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/go/src/pkg/runtime/proc.c:1218 +0x9f&lt;br /&gt;&lt;br /&gt;Previous write by goroutine 1:&lt;br /&gt;&amp;nbsp; &amp;nbsp; main.main()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/Spaces/Test/src/test/main.go:25 +0x136&lt;br /&gt;&amp;nbsp; &amp;nbsp; runtime.main()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/go/src/pkg/runtime/proc.c:182 +0x91&lt;br /&gt;&lt;br /&gt;Goroutine 5 (running) created at:&lt;br /&gt;&amp;nbsp; &amp;nbsp; main.main()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/Spaces/Test/src/test/main.go:18 +0x8f&lt;br /&gt;&amp;nbsp; &amp;nbsp; runtime.main()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/go/src/pkg/runtime/proc.c:182 +0x91&lt;br /&gt;&lt;br /&gt;Goroutine 1 (running) created at:&lt;br /&gt;&amp;nbsp; &amp;nbsp; _rt0_amd64()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /Users/bill/go/src/pkg/runtime/asm_amd64.s:87 +0x106&lt;br /&gt;&lt;br /&gt;==================&lt;br /&gt;Kill Early&lt;br /&gt;Found 1 data race(s) &lt;/div&gt;&lt;br /&gt;My use of the Shutdown flag comes up on the race detector. This is because I have two Go routines trying to access the variable in an unsafe way.&lt;br /&gt;&lt;br /&gt;My initial reason for not securing access to the variable was practical but wrong. I figured that since the variable is only used to shutdown the program when it becomes necessary, I didn&#39;t care about a dirty read. If by chance, within the microsecond of glare there was between writing to the variable and reading the variable, if a dirty read occurred, I would catch it again on the next loop. No harm done, right? &amp;nbsp;Why add complicated channel or locking code for something like this?&lt;br /&gt;&lt;br /&gt;Well, there is a little thing called the Go Memory Model.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://golang.org/ref/mem&quot; target=&quot;_blank&quot;&gt;http://golang.org/ref/mem&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The Go Memory Model does not guarantee that the Go routine reading the Shutdown variable will ever see the write by the main routine. It is valid for the write to the Shutdown variable by the main routine to never be written back to main memory. This is because the main routine never reads the Shutdown variable.&lt;br /&gt;&lt;br /&gt;This is not happening today but as the Go compiler becomes more sophisticated it could decide to eliminate the write to the Shutdown variable altogether. This behavior is allowed by the Go Memory Model. Also, we don&#39;t want code that can&#39;t pass the race detector, it is just bad practice, even for practical reasons.&lt;br /&gt;&lt;br /&gt;Here is a final version of the code with all bugs fixed:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;fmt&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;os/signal&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;sync/atomic&quot;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &quot;time&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;var Shutdown int32 = 0&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; sigChan := make(chan os.Signal, 1)&lt;br /&gt;&amp;nbsp; &amp;nbsp; signal.Notify(sigChan, os.Interrupt)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;complete := make(chan struct{})&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; go LaunchProcessor(complete)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; select {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case &amp;lt;-sigChan:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;b&gt;atomic.StoreInt32(&amp;amp;Shutdown,&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;1)&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;case &amp;lt;-complete:&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func LaunchProcessor(complete chan struct{}) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; defer func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; close(complete)&lt;br /&gt;&amp;nbsp; &amp;nbsp; }()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Start Work\n&quot;)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; for count := 0; count &amp;lt; 5; count++ {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Doing Work\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; time.Sleep(1 * time.Second)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;if&amp;nbsp;atomic.LoadInt32(&amp;amp;Shutdown)&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;==&lt;span style=&quot;color: #f57900;&quot;&gt; &lt;/span&gt;1&lt;/b&gt;&amp;nbsp;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;Kill Early\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; fmt.Printf(&quot;End Work\n&quot;)&lt;br /&gt;}&lt;/div&gt;&lt;br /&gt;I prefer to use an if statement to check if the Shutdown flag is set so I can sprinkle that code as needed. This solution changes the Shutdown flag from a boolean value to an int32 and uses the atomic functions Store and Load.&lt;br /&gt;&lt;br /&gt;In the main routine if a &amp;lt;ctrl&amp;gt; C is detected, the Shutdown flag is safely changed from 0 to 1. In the LaunchProcessor Go routine, the value of the Shutdown flag is compared to 1. If that condition is true the Go routine returns.&lt;br /&gt;&lt;br /&gt;It&#39;s amazing sometimes how a simple program like this can contain a few gotchas. Things you may have never thought about or realized when you started. Especially when the code always seems to work.&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/8422195229692618723/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/10/my-channel-select-bug.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/8422195229692618723'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/8422195229692618723'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/10/my-channel-select-bug.html' title='My Channel Select Bug'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-6298089572270107210.post-5010446529381802163</id><published>2013-10-10T18:50:00.000-04:00</published><updated>2013-12-23T20:08:05.754-05:00</updated><title type='text'>Functions and Naked Returns In Go</title><content type='html'>In Go values that are returned from functions are passed by value. Go gives you some nice flexibility when it comes to returning values from a function.&lt;br /&gt;&lt;br /&gt;Here is a simple example of returning two values from a function:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp;&quot;fmt&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id, err := ReturnId()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;if err != nil {&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;fmt.Printf(&quot;ERROR: %s&quot;, err)&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;return&lt;br /&gt;&amp;nbsp; &amp;nbsp;}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Id: %d\n&quot;, id)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func ReturnId() (int, error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id := 10&lt;br /&gt;&amp;nbsp; &amp;nbsp;return id, nil&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The function ReturnId returns a value of type integer and of type error. This is something very common that is done in Go. Error handling is performed by returning a value of type error from your functions and the calling function evaluating that value before continuing.&lt;br /&gt;&lt;br /&gt;If you don&#39;t care about the error for some reason after a function call returns, you can do something like this:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;&amp;nbsp; &amp;nbsp;id, _ := ReturnId()&lt;/div&gt;&lt;br /&gt;This time I used an underscore to represent the return value for the second return argument, which was the error. This is really nice because I don&#39;t need to declare a variable to hold the value being passed in, I can simply ignore it.&lt;br /&gt;&lt;br /&gt;You also have the option to name your return arguments:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func ReturnId() (id int, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id = 10&lt;br /&gt;&amp;nbsp; &amp;nbsp;return id, err&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;If you name your return arguments you are creating local variables just like with your function parameters. This time when I set the id variable, I remove the colon (:) from the short variable declaration and convert it to an assignment operation. Then in the return I specify the return variables as normal.&lt;br /&gt;&lt;br /&gt;Naming your return arguments is a nice way to document what you are returning. There is also something else that you can do with your named arguments, or not do:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func ReturnId() (id int, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id = 10&lt;br /&gt;&amp;nbsp; &amp;nbsp;&lt;b&gt;return&lt;/b&gt;&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;This is what is called a naked return. I have removed the arguments from the return statement. The Go compiler automatically returns the current values in the return arguments local variables. Though this is really cool you need to watch for shadowing:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func ReturnId() (id int, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id = 10&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;if id == 10 {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; err := fmt.Errorf(&quot;Invalid Id\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp;}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;If you try to compile this you will get the following compiler error:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;err is shadowed during return &lt;/div&gt;&lt;br /&gt;To understand why this error exists you need to understand what curly bracket do inside of a function. Each set of curly brackets define a new level of scope. Take this code for example:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id := 10&lt;br /&gt;&amp;nbsp; &amp;nbsp;id := 20&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Id: %d\n&quot;, id)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;If you try to compile this code you get the following error:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;no new variables on left side of := &lt;/div&gt;&lt;br /&gt;This makes sense because you are trying to declare the same variable name twice. The error goes away if we change the code to look like this:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id := 10&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;{&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;id := 20&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Id: %d\n&quot;, id)&lt;br /&gt;&amp;nbsp; &amp;nbsp;}&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Id: %d\n&quot;, id)&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The curly brackets define a new stack frame and therefore a new level of scope. The variable name can be reused inside the new set of curly brackets. When the code reaches the closing curly bracket that small piece of the stack is popped.&lt;br /&gt;&lt;br /&gt;Look again at the code that caused the shadowing error:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func ReturnId() (id int, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;id = 10&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;if id == 10 &lt;b&gt;{&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;err := fmt.Errorf(&quot;Invalid Id\n&quot;)&lt;/b&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return&lt;br /&gt;&amp;nbsp; &amp;nbsp;&lt;b&gt;}&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Inside the if statement we are creating a new variable called err. We are not using the err variable declared as the function return argument. The compiler recognizes this and produces the error. If the compiler did not report this error, you would never see the error that occured inside the if statement. The return err variable is what is passed by default&lt;br /&gt;&lt;br /&gt;Naming your return arguments come in real handy when using a defer statement:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func ReturnId() (id int, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;defer func() {&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;if id == 10 {&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;err = fmt.Errorf(&quot;Invalid Id\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;}&lt;br /&gt;&amp;nbsp; &amp;nbsp;}()&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;id = 10&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;Because the return arguments are named, you can reference them in the defer function. You can even change the value of the return arguments inside the defer call and the calling function will see the new values. This version will display the error message.&lt;br /&gt;&lt;br /&gt;You need to be aware that the defer statement is evaluated inline with the rest of the code:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;func ReturnId() (id int, err error) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;defer func(id int) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;if id == 10 {&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;err = fmt.Errorf(&quot;Invalid Id\n&quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;}&lt;br /&gt;&amp;nbsp; &amp;nbsp;}(id)&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;id = 10&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;return&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;This version does not display the error message. The value of id is not 10 until after the defer statement is evaluated.&lt;br /&gt;&lt;br /&gt;Sometimes it makes sense to use named return arguments, such when using a defer statement at the top of your function. If you are passing raw values out of your function then something like this does not make sense:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #efefef; font-family: &#39;Courier New&#39;, Courier, monospace; font-size: small; overflow-x: scroll; padding: 10px; white-space: nowrap;&quot;&gt;package main&lt;br /&gt;&lt;br /&gt;import (&lt;br /&gt;&amp;nbsp; &amp;nbsp;&quot;fmt&quot;&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;func main() {&lt;br /&gt;&amp;nbsp; &amp;nbsp;ans := AddNumbers(10, 12)&lt;br /&gt;&amp;nbsp; &amp;nbsp;fmt.Printf(&quot;Answer: %d\n&quot;, ans)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;func AddNumbers(a int, b int) (result int) {&lt;br /&gt;&amp;nbsp; &amp;nbsp;return a + b&lt;br /&gt;} &lt;/div&gt;&lt;br /&gt;The return argument is named for the AddNumbers function but never used. Instead we return the answer of the operation directly out of the return. This shows you how you can still return any value you want even if you name the return arguments.&lt;br /&gt;&lt;br /&gt;I asked the Go community for their opinions about using named arguments and naked returns:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://plus.google.com/107537752159279043170/posts/8hMjHhmyNk2&quot; target=&quot;_blank&quot;&gt;https://plus.google.com/107537752159279043170/posts/8hMjHhmyNk2&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I got a very good mix of opinions that I think everyone should read. Go gives you a lot of flexibility and choice when building your functions. Don&#39;t look for a single common practice for everything. Take each function individually and implement the best construct for that use case.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.goinggo.net/feeds/5010446529381802163/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.goinggo.net/2013/10/functions-and-naked-returns-in-go.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/5010446529381802163'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/6298089572270107210/posts/default/5010446529381802163'/><link rel='alternate' type='text/html' href='http://www.goinggo.net/2013/10/functions-and-naked-returns-in-go.html' title='Functions and Naked Returns In Go'/><author><name>William Kennedy</name><uri>https://plus.google.com/107537752159279043170</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-9BjFGDE07Ao/AAAAAAAAAAI/AAAAAAAANhM/M7_KKAP4xAk/s512-c/photo.jpg'/></author><thr:total>6</thr:total></entry></feed>